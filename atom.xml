<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Mobile Development]]></title>
  <subtitle><![CDATA[移动开发]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com//"/>
  <updated>2017-08-04T15:01:55.000Z</updated>
  <id>http://yoursite.com//</id>
  
  <author>
    <name><![CDATA[weifeng]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/08/04/ndk_cpp/"/>
    <id>http://yoursite.com/2017/08/04/ndk_cpp/</id>
    <published>2017-08-04T15:02:40.000Z</published>
    <updated>2017-08-04T15:01:55.000Z</updated>
    <content type="html"><![CDATA[<p>title: C++基础<br>date: 2017-07-25 23:28:16<br>tags: </p>
<h2 id="C++">C++</h2><h3 id="C与C++的关系">C与C++的关系</h3><ul>
<li><p>C++可以与C代码进行混编</p>
</li>
<li><p>C++面向对象的编程语言、C是面向过程的编程</p>
</li>
<li><p>C++是对C的一个增强</p>
</li>
</ul>
<a id="more"></a>
<h4 id="命名空间">命名空间</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt; <span class="comment">//C++中的标准输入输出</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//std 标准命名空间(包含很多标准的定义)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="comment">//命名空间类似于Java中的包(归类)</span></span><br><span class="line"><span class="comment">//下面就可以简写成cout &lt;&lt; "this is C plus plus" &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> NSP_A&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">struct</span> Student&#123;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> age; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> age; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> NSP_B&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">//命名空间嵌套</span></span><br><span class="line">    <span class="keyword">namespace</span> NSP_C&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">90</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> Student&#123;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> age; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> age; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;&lt; 运算符重载,本身没有什么特殊的意义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this is C plus plus"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"this is C plus plus"</span> &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用命名空间</span></span><br><span class="line">    <span class="comment">//::访问修饰符</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; NSP_A::a &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; NSP_B::a &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; NSP_B::NSP_C::c &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用命名空间中的结构体</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> NSP_A;</span><br><span class="line">    Teacher t;</span><br><span class="line">    <span class="comment">//struct NSP_A::Teacher t;</span></span><br><span class="line">    t.age = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//struct NSP_A::Student s;</span></span><br><span class="line">    Student s;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//或者</span></span><br><span class="line">    <span class="keyword">using</span> NSP_A::Student;</span><br><span class="line">    <span class="keyword">struct</span> Student s1;<span class="comment">//struct 写与不写都一样</span></span><br><span class="line">    s1.age = <span class="number">90</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">using</span> NSP_B::Student;</span><br><span class="line">    <span class="keyword">struct</span> Student s2;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="类、属性、方法">类、属性、方法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//圆</span></span><br><span class="line"><span class="keyword">class</span> MyCircle&#123;</span><br><span class="line"><span class="comment">//属性(多个属性共用权限访问修饰符)</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    <span class="keyword">double</span> s;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取面积</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    MyCircle c1;</span><br><span class="line">    c1.setR(<span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"圆的面积:"</span> &lt;&lt; c1.getS() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="结构体">结构体</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> MyTeacher&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;age &lt;&lt; <span class="string">"岁"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyTeacher t1; <span class="comment">//struct 可写可不写</span></span><br><span class="line">    t1.age = <span class="number">10</span>;</span><br><span class="line">    t1.say();</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="布尔类型">布尔类型</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> isSingle = <span class="keyword">true</span>;<span class="comment">//bool isSingle = 17  </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; isSingle &lt;&lt; endl; <span class="comment">// 打印出来是 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(isSingle)&#123;<span class="comment">//isSingle = true 或者大于0的值都是true</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"单身"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) &lt;&lt; endl; <span class="comment">//输出1个字节</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"有对象"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    ((a &gt; b) ? a :b) = <span class="number">30</span>; <span class="comment">//三目运算成为左值 只适用于C++</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b &lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="引用">引用</h4><ul>
<li>指针(保存的是地址)与引用(变量的别名)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指针值交换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_1</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c = *a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"(*a):%d\n"</span>,*a);</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用值交换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_2</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//变量名-门牌号(内存空间0x00001的别名,可不可用有多个名字?)</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//b就是这个内存空间另外一个别名</span></span><br><span class="line">    <span class="comment">//&amp; 在C++中表示引用 </span></span><br><span class="line">    <span class="keyword">int</span> &amp;b = a;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> *p = &amp;a; <span class="comment">//输出10</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; endl;<span class="comment">//输出10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>,x,y);</span><br><span class="line">    </span><br><span class="line">    swap_1(&amp;x, &amp;y);</span><br><span class="line">    </span><br><span class="line">    swap_2(x, y);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>,x,y);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结构体的引用作为参数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用</span></span><br><span class="line"><span class="comment">//不用加*去取值</span></span><br><span class="line"><span class="comment">//引用是变量的别名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">(Teacher &amp;t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.name &lt;&lt; <span class="string">","</span> &lt;&lt; t.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint2</span><span class="params">(Teacher *t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t-&gt;name &lt;&lt; <span class="string">","</span> &lt;&lt; t-&gt;age &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//(*t).name  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用的主要功能: 作为函数的参数或返回值(不能返回局部变量)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Teacher t;</span><br><span class="line">    t.name = <span class="string">"jason"</span>;</span><br><span class="line">    t.age = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    myprint(t);</span><br><span class="line">    </span><br><span class="line">    myprint2(&amp;t);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>指针的引用</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二级指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getTeacher</span><span class="params">(Teacher **p)</span></span>&#123;</span><br><span class="line">    Teacher *tmp = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher));</span><br><span class="line">    tmp-&gt;age = <span class="number">20</span>;</span><br><span class="line">    *p = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针的引用,代替二级指针</span></span><br><span class="line"><span class="comment">//&amp;p = (*p) </span></span><br><span class="line"><span class="comment">//Teacher* &amp;p = (Teacher* *p); 相当于给*p取了一个别名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getTeacher</span><span class="params">(Teacher* &amp;p)</span></span>&#123;</span><br><span class="line">    p = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher));</span><br><span class="line">    p-&gt;age = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Teacher *t = NULL;</span><br><span class="line">    </span><br><span class="line">    getTeacher(&amp;t);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>指针常量</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//指针常量,指针的常量,不改变地址的指针,但是可以修改它指向的内容</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>, b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> *<span class="keyword">const</span> p1 = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//p1 = &amp;b; //NO </span></span><br><span class="line">    *p1 = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//常量指针,指向常量的指针,内容不能修改 类似Java中final修饰的变量其值不能被再次修改</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p2 = &amp;a;</span><br><span class="line">    p2 = &amp;b;</span><br><span class="line">    <span class="comment">//*p2 = 9; //NO</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//const int c;  //NO 必须要赋值</span></span><br><span class="line">    <span class="comment">//int &amp;d; //NO 必须赋值</span></span><br><span class="line">    <span class="comment">//int &amp;e = NULL //NO 引用必须要有值,不能为空</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>指针与引用的区别</li>
</ul>
<p>单纯给变量取别名没有任何意义,作为函数参数传递,能保证参数传递过程中不产生副本</p>
<p>引用可以直接操作变量,而指针要通过取值<code>(*p)</code>,间接操作变量,指针的程序可读性差</p>
<ul>
<li>常引用(类似于Java中的final)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprintf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//常引用</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp;c = a;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//c = b;  //NO</span></span><br><span class="line">    myprintf(c);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>常函数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Teacher(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher析构构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//const Teacher* const this 既是指针常量又是常量指针,const this是常量指针,const Teacher* 指针常量,既不能改变指针的值,又不能改变指针指向的内容</span></span><br><span class="line">    <span class="comment">//常函数,保证了数据的安全,当前对象不能被修改,防止数据成员被非法访问</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="comment">//this-&gt;name = "Jack"; //NO 属性值不能修改</span></span><br><span class="line">        <span class="comment">//改变this指针的值</span></span><br><span class="line">        <span class="comment">//this = (Teacher*)0x00009; //NO</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="keyword">this</span>-&gt;age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//this = (Teacher*)0x00009; //NO this指针是常量指针</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="keyword">this</span>-&gt;age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Teacher <span class="title">t1</span><span class="params">("Jack", 20)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">const</span> Teacher <span class="title">t2</span><span class="params">("Rose", 20)</span></span>;<span class="comment">//常量对象</span></span><br><span class="line">    <span class="comment">//t2.myprint2(); //NO 常量对象只能调用常量函数,非常量对象可以调用常量函数</span></span><br><span class="line">    t1.myprint();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>引用的大小</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Teacher t;</span><br><span class="line">    </span><br><span class="line">    Teacher &amp;t1 = t;</span><br><span class="line">    </span><br><span class="line">    Teacher *p = &amp;t;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(t1) &lt;&lt;endl; <span class="comment">//24</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt;endl; <span class="comment">//4 结构体指针 大小都是4个字节</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>引用必须要有值,不能为空</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">(Teacher *t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t-&gt;name &lt;&lt; <span class="string">","</span> &lt;&lt; t-&gt;age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint2</span><span class="params">(Teacher &amp;t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.name &lt;&lt; <span class="string">","</span> &lt;&lt; t.age &lt;&lt; endl;</span><br><span class="line">    t.age = <span class="number">21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Teacher t;</span><br><span class="line">    </span><br><span class="line">    Teacher *p = NULL;</span><br><span class="line">    </span><br><span class="line">    myprint(p);<span class="comment">//报错,为了防止不报错,要进行非空判断</span></span><br><span class="line">    </span><br><span class="line">    Teacher &amp;t2 = NULL;<span class="comment">//引用不能为空,没法传进去,编译出错</span></span><br><span class="line">    myprint2(t2);<span class="comment">//NO</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>函数默认值参数 和 重载</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中间参数有值的话后面的参数必须有值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y = 9, <span class="keyword">int</span> z = 10)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载,不能有二意性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mtprint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">bool</span> ret)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>可变参数</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdarg.h&gt;</span><br><span class="line"></span><br><span class="line">void func(int i,...)&#123;//从i开始后面是可变参数</span><br><span class="line">    va_list args_p;  //va_list 的实际类型是 char*</span><br><span class="line">    //开始读取可变参数,i是最后一个固定参数</span><br><span class="line">    va_start(args_p,i);</span><br><span class="line">    </span><br><span class="line">    int a = va_arg(args_p,int); //第二个参数为参数类型</span><br><span class="line">    int b = va_arg(args_p,char);</span><br><span class="line">    int c = va_arg(args_p,int);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    //结束</span><br><span class="line">    va_end(args_p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()&#123;</span><br><span class="line">    func(9,10,'b',30);</span><br><span class="line">    </span><br><span class="line">    system("pause);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>循环读取可变参数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i,...)</span></span>&#123;</span><br><span class="line">    va_list args_p;</span><br><span class="line">    va_start(args_p,i);</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        value = va_arg(args_p,<span class="keyword">int</span>);</span><br><span class="line">        <span class="keyword">if</span>(value &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(args_p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="类">类</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyTeacher.h</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#progma once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MyTeacher&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">gwtAge</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* name)</span></span>;</span><br><span class="line">        <span class="keyword">char</span>* getName();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyTeacher.cpp</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "MyTeacher.h"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MyTeacher::setAge(<span class="keyword">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MyTeacher::getAge()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MyTeacher::setName(<span class="keyword">char</span>* name)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* MyTeacher::getName()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">01.</span>cpp</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "MyTeacher.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyTeacher t1;</span><br><span class="line">    t1.name = <span class="string">"Jack"</span>;</span><br><span class="line">    t1.age = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t1.getName() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="构造函数、析构函数、拷贝构造函数">构造函数、析构函数、拷贝构造函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//无参构造函数(写了就会覆盖默认的无参构造函数)</span></span><br><span class="line">    Teacher()&#123;</span><br><span class="line">        <span class="comment">//无参构造函数赋默认值</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(name, <span class="string">"jack walson"</span>);</span><br><span class="line">        age = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"无参构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参构造函数会覆盖默认的构造函数</span></span><br><span class="line">    Teacher(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//析构函数,没有参数</span></span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"析构构造函数"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//释放内存</span></span><br><span class="line">        <span class="built_in">free</span>(<span class="keyword">this</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//浅拷贝 拷贝的是指针的地址,拷贝的是值</span></span><br><span class="line">    <span class="comment">//拷贝构造函数(值拷贝)</span></span><br><span class="line">    <span class="comment">//默认拷贝构造函数,就是值拷贝</span></span><br><span class="line">    Teacher(<span class="keyword">const</span> Teacher &amp;obj)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = obj.name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = obj.age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"拷贝构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//深拷贝 拷贝的是指针指向的数据内容</span></span><br><span class="line">    Teacher(<span class="keyword">const</span> Teacher &amp;obj)&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(obj.name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len+<span class="number">1</span>); <span class="comment">// 长度加1 因为有结束符 0</span></span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, obj.name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = obj.age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">","</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Teacher t1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浅拷贝的问题</span></span><br><span class="line"><span class="comment">//函数执行完毕会调用t1和t2的析构函数,2次释放相同name会出错</span></span><br><span class="line"><span class="comment">//调用这个函数会出错</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Teacher <span class="title">t1</span><span class="params">("test",20)</span></span>;</span><br><span class="line">    </span><br><span class="line">    Teacher t2 = t1;<span class="comment">//调用默认拷贝构造函数</span></span><br><span class="line">    t2.myprint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(Teacher t)</span></span>&#123;</span><br><span class="line">    t.myprint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">(Teacher t)</span></span>&#123;</span><br><span class="line">    t.myprint();</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//Teacher t1; //会调用无参构造函数</span></span><br><span class="line">    <span class="function">Teacher <span class="title">t2</span><span class="params">("test",20)</span></span>; <span class="comment">//会调用有参构造函数</span></span><br><span class="line">    Teacher t3 = Teacher(<span class="string">"jack"</span>,<span class="number">21</span>);</span><br><span class="line">    func();<span class="comment">//会调用析构函数,当对象要被系统释放时,析构函数会被调用,作用: 主要做善后处理</span></span><br><span class="line">    </span><br><span class="line">    Teacher t4 = t2;</span><br><span class="line">    t4.myprint();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//拷贝构造函数被调用的场景</span></span><br><span class="line">    <span class="comment">//1.声明的时候赋值拷贝构造函数会调用(例如: Teacher t4 = t2;) </span></span><br><span class="line">    <span class="comment">//2.作为参数传人也会被调用,实参给形参赋值(例如: func2(t2))</span></span><br><span class="line">    <span class="comment">//3.作为函数返回值返回,给变量初始化赋值(例如: Teacher t5 = func3(t2);)</span></span><br><span class="line">    func2(t2);</span><br><span class="line">    Teacher t5 = func3(t2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里不会调用拷贝构造函数,因为只有声明的时候才会被调用</span></span><br><span class="line">    Teacher t6;</span><br><span class="line">    Teacher t7;</span><br><span class="line">    t6 = t7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="构造函数属性初始化列表">构造函数属性初始化列表</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Teacher(<span class="keyword">char</span>* name)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 有参构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>* getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Student&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">//属性对象</span></span><br><span class="line">    Teacher t1;</span><br><span class="line">    Teacher t2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(<span class="keyword">int</span> id,<span class="keyword">char</span>* t1_n,<span class="keyword">char</span>* t2_n) : t1(t1_n) , t2(<span class="string">"Jack"</span>)&#123;<span class="comment">//给属性对象赋值,也可以直接给值</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Student 有参构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~Student()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Student 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="string">","</span> &lt;&lt; t1.getName() &lt;&lt; t2.getName() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">s1</span><span class="params">(20,"Jack","Rose")</span></span>;</span><br><span class="line">    s1.myprint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//Student中的属性 Teacher 先创建,然后再创建Student. Student先析构,然后属性对象Teacher析构</span></span><br><span class="line">    func(); </span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C++通过new(delete)进行动态内存分配,C中的malloc(free)也是支持的">C++通过new(delete)进行动态内存分配,C中的malloc(free)也是支持的</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Teacher(<span class="keyword">char</span>* name)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 有参构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>* getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//C++的写法</span></span><br><span class="line">    <span class="comment">//会调用构造函数和析构函数</span></span><br><span class="line">    Teacher *t1 = <span class="keyword">new</span> Teacher(<span class="string">"Jack"</span>);<span class="comment">//动态内存分配,在堆内存上开辟空间,需要手动释放堆内存</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t1-&gt;getName() &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">delete</span> t1;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//C的写法</span></span><br><span class="line">    Teacher *t2 = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher));<span class="comment">//与C++最大的区别是不会调用构造函数和析构函数</span></span><br><span class="line">    t2-&gt;setName(<span class="string">"Jack"</span>);</span><br><span class="line">    <span class="built_in">free</span>(t2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    func();</span><br><span class="line">    <span class="comment">//C</span></span><br><span class="line">    <span class="comment">//数组类型</span></span><br><span class="line">    <span class="keyword">int</span> *p1 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">10</span>);</span><br><span class="line">    p1[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//C++</span></span><br><span class="line">    <span class="keyword">int</span> *p2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    p2[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line">    <span class="comment">//释放数组需要加上[]</span></span><br><span class="line">    <span class="keyword">delete</span>[] p2;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="静态成员">静态成员</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="comment">//计数器</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> total; <span class="comment">//不能在这直接赋值</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Teacher(<span class="keyword">char</span>* name)&#123;<span class="comment">//也不能在构造函数中给total属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 有参构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>* getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计数,静态函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span><br><span class="line">        total++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态属性初始化赋值</span></span><br><span class="line"><span class="keyword">int</span> Teacher::total = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//Teacher::total = 10;//无法解析的外部符号</span></span><br><span class="line">    Teacher::total++；</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Teacher::total &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//直接通过类名访问</span></span><br><span class="line">    Teacher::count();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//可以通过对象名访问</span></span><br><span class="line">    <span class="function">Teacher <span class="title">t1</span><span class="params">("Jack")</span></span>;</span><br><span class="line">    t1.count();</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="类的大小">类的大小</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;<span class="comment">//存放全局区不计算成类的大小</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprintf</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"打印"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> i;<span class="comment">//4个字节</span></span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">void</span>(*myprintf)() = myprintf; <span class="comment">//函数不计算成类的大小,它存放于程序代码区.指针大小是固定的4个字节</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(A) &lt;&lt; endl;<span class="comment">// 12</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(B) &lt;&lt; endl;<span class="comment">// 12</span></span><br><span class="line">    <span class="comment">//Java内存分区:JVM Stack、Native Method Stack(本地方法栈 JNI开发中的方法都存在本地方法栈中)、方法区、程序计数区、直接内存</span></span><br><span class="line">    <span class="comment">//C/C++内存分区:栈、堆、全局(静态成员、全局成员)、常量区(字符串)、程序代码区(存放程序的二进制代码)</span></span><br><span class="line">    <span class="comment">//普通属性与结构体有相同的内存布局</span></span><br><span class="line">    <span class="comment">//字符数组是存在堆上</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="this指针">this指针</h4><p>函数是共享的,必须要有能够标识当前对象是谁的办法,所以需要this指针<br>this指针的地址是当前对象的地址</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Teacher(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher析构构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,<span class="keyword">this</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="keyword">this</span>-&gt;age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Teacher <span class="title">t1</span><span class="params">("Jack",20)</span></span>;</span><br><span class="line">    <span class="function">Teacher <span class="title">t2</span><span class="params">("Rose",20)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,&amp;t1);</span><br><span class="line">    t1.myprint();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,&amp;t2);</span><br><span class="line">    t2.myprint();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="友元函数">友元函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> i)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//友元函数</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">modify_i</span><span class="params">(A* p, <span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数的实现,在友元函数中可以访问私有的属性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_i</span><span class="params">(A* p, <span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    p-&gt;i = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* a = <span class="keyword">new</span> A(<span class="number">10</span>);</span><br><span class="line">    a-&gt;myprint();</span><br><span class="line">    </span><br><span class="line">    modify_i(a,<span class="number">20</span>);</span><br><span class="line">    a-&gt;myprint();</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="友元类">友元类</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//友元类</span></span><br><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line">    <span class="comment">//友元类</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> i)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//B这个友元类可以访问A类的任何成员</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accessAny</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a.i = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="运算符重载">运算符重载</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Point&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point(<span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">int</span> y = <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员函数,运算符重载</span></span><br><span class="line">    Point <span class="keyword">operator</span>+(Point &amp;p2)&#123;</span><br><span class="line">        <span class="function">Point <span class="title">tmp</span><span class="params">(<span class="keyword">this</span>-&gt;x+p2.x, <span class="keyword">this</span>-&gt;y+p2.y)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">","</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载+号</span></span><br><span class="line">Point <span class="keyword">operator</span>+(Point &amp;p1, Point &amp;p2)&#123;</span><br><span class="line">    <span class="function">Point <span class="title">tmp</span><span class="params">(p1.x+p2.x, p1.y+p2.y)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载-号</span></span><br><span class="line">Point <span class="keyword">operator</span>-(Point &amp;p1, Point &amp;p2)&#123;</span><br><span class="line">    <span class="function">Point <span class="title">tmp</span><span class="params">(p1.x-p2.x, p1.y-p2.y)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(10,20)</span></span>;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(20,10)</span></span>;</span><br><span class="line">    <span class="comment">//运算符的重载,本质还是函数的调用</span></span><br><span class="line">    <span class="comment">//p1.operator+(p2);</span></span><br><span class="line">    Point p3 = p1 + p2; <span class="comment">//重载+号运算符</span></span><br><span class="line">    </span><br><span class="line">    p3.myprint(); <span class="comment">//30,30</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="当属性私有时,通过友元函数完成运算符重载">当属性私有时,通过友元函数完成运算符重载</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Point&#123;</span><br><span class="line"><span class="keyword">friend</span> Point <span class="keyword">operator</span>+(Point &amp;p1, Point &amp;p2);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point(<span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">int</span> y = <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员函数,运算符重载</span></span><br><span class="line">    Point <span class="keyword">operator</span>+(Point &amp;p2)&#123;</span><br><span class="line">        <span class="function">Point <span class="title">tmp</span><span class="params">(<span class="keyword">this</span>-&gt;x+p2.x, <span class="keyword">this</span>-&gt;y+p2.y)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">","</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载+号</span></span><br><span class="line">Point <span class="keyword">operator</span>+(Point &amp;p1, Point &amp;p2)&#123;</span><br><span class="line">    <span class="function">Point <span class="title">tmp</span><span class="params">(p1.x+p2.x, p1.y+p2.y)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(10,20)</span></span>;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(20,10)</span></span>;</span><br><span class="line">    <span class="comment">//运算符的重载,本质还是函数的调用</span></span><br><span class="line">    <span class="comment">//p1.operator+(p2);</span></span><br><span class="line">    Point p3 = p1 + p2; <span class="comment">//重载+号运算符</span></span><br><span class="line">    </span><br><span class="line">    p3.myprint(); <span class="comment">//30,30</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="继承">继承</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"说话"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Man : <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chasing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"泡妞"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//this-&gt;name;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* brother;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(Human&amp; h)</span></span>&#123;</span><br><span class="line">    h.say();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Man m1;</span><br><span class="line">    m1.say();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//父类类型的引用或者指针</span></span><br><span class="line">    Human* h_p = &amp;m1;</span><br><span class="line">    h_p-&gt;say();</span><br><span class="line">    </span><br><span class="line">    Human &amp;h1 = m1;</span><br><span class="line">    h1.say();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//子类对象初始化父类类型的对象</span></span><br><span class="line">    Human h2 = m1;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="向父类构造方法传参">向父类构造方法传参</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Human(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"说话"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Man : <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//给父类构造函数传参,同时给属性对象赋值</span></span><br><span class="line">    Man(<span class="keyword">char</span> *brother, <span class="keyword">char</span>* s_name, <span class="keyword">char</span>* s_age, <span class="keyword">char</span>* h_name, <span class="keyword">char</span>* h_age) : Human(s_name, s_age) : h(h_name, h_age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;brother = brother;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chasing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"泡妞"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//this-&gt;name;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* brother;</span><br><span class="line">    Human h;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Man m1;//NO 因为父类没有默认的构造函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="function">Man <span class="title">m1</span><span class="params">("Rose","Jack",18,"Test",20)</span></span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="构造函数与析构函数调用的顺序">构造函数与析构函数调用的顺序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Human(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human 构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Human()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"说话"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Man : <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//给父类构造函数传参,同时给属性对象赋值</span></span><br><span class="line">    Man(<span class="keyword">char</span> *brother, <span class="keyword">char</span>* s_name, <span class="keyword">char</span>* s_age, <span class="keyword">char</span>* h_name, <span class="keyword">char</span>* h_age) : Human(s_name, s_age) : h(h_name, h_age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;brother = brother;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Man 构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Man()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Man 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chasing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"泡妞"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//this-&gt;name;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* brother;</span><br><span class="line">    Human h;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//Human 构造函数  Man构造函数  Man 析构函数  Human析构函数</span></span><br><span class="line">    <span class="comment">//父类的构造函数先调用,子类的析构函数先调用</span></span><br><span class="line">   <span class="function">Man <span class="title">m1</span><span class="params">("Rose","Jack",18,"Test",20)</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    func();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="子类对象调用父类的成员">子类对象调用父类的成员</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Human(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human 构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Human()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human 说话"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Man : <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//给父类构造函数传参,同时给属性对象赋值</span></span><br><span class="line">    Man(<span class="keyword">char</span> *brother, <span class="keyword">char</span>* s_name, <span class="keyword">char</span>* s_age, <span class="keyword">char</span>* h_name, <span class="keyword">char</span>* h_age) : Human(s_name, s_age) : h(h_name, h_age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;brother = brother;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Man 构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Man()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Man 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Man 说话"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chasing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"泡妞"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//this-&gt;name;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* brother;</span><br><span class="line">    Human h;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//是覆盖,并非多态</span></span><br><span class="line">    <span class="function">Man <span class="title">m1</span><span class="params">("Rose","Jack",18,"Test",20)</span></span>; </span><br><span class="line">    m1.say();<span class="comment">//调用的是Man中的say函数</span></span><br><span class="line">    <span class="comment">//对象名.父类名::函数名();</span></span><br><span class="line">    m1.Human::say();<span class="comment">//调用的是Human中的say函数</span></span><br><span class="line">    m1.Human::age = <span class="number">10</span>;<span class="comment">//给父类中的属性赋值</span></span><br><span class="line">    </span><br><span class="line">    Human h1 = m1;</span><br><span class="line">    h1.say();<span class="comment">//调用的是Human中的say函数</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="多继承">多继承</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公民</span></span><br><span class="line"><span class="keyword">class</span> Citizen&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Student : <span class="keyword">public</span> Person, <span class="keyword">public</span> Citizen&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/33287F78-183F-4673-917F-9B6BA29B7381.png" alt=""></p>
<h4 id="继承的二义性">继承的二义性</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//虚继承,不同路径继承来的同名成员只有一份拷贝,解决不明确的问题</span></span><br><span class="line"><span class="keyword">class</span> A1 : <span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> A2 : <span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> A1, <span class="keyword">public</span> A2&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    <span class="comment">//b.name = "Jack";//没有加virtual前 NO</span></span><br><span class="line">    <span class="comment">//指定父类显示调用</span></span><br><span class="line">    b.A1::name = <span class="string">"Jack"</span>;</span><br><span class="line">    b.A2::name = <span class="string">"Rose"</span>;</span><br><span class="line">    b.name = <span class="string">"Jack"</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="虚函数-多态(程序的扩展性)">虚函数-多态(程序的扩展性)</h4><ul>
<li><p>动态多态: 程序运行过程中,觉得哪一个函数被调用(重写)</p>
</li>
<li><p>静态多态: 重载</p>
</li>
</ul>
<p>发生动态多态的条件:</p>
<ul>
<li><p>继承</p>
</li>
<li><p>父类的引用或者指针指向子类的对象</p>
</li>
<li><p>函数的重写</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Plane.h</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通飞机</span></span><br><span class="line"><span class="keyword">class</span> Plane&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">land</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Plane.cpp</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Plane.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Plane::fly()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"起飞"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Plane::land()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"着陆"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Jet.h</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直升飞机</span></span><br><span class="line"><span class="keyword">class</span> Jet : <span class="keyword">public</span> Plane&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">land</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jet.cpp</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Jet.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Jet::fly()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"直升飞机在原地起飞..."</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Jet::land()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"直升飞机降落在屋顶"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Copter.h</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Plane.h"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Copter : <span class="keyword">public</span> Plane&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">land</span><span class="params">()</span></span>;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Copter.cpp</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Copter.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Copter::fly()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"喷气式飞机在跑道上起飞"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Copter::land()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"喷气式飞机在跑道上着陆"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">01.</span>cpp</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Plane.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Jet.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Copter.h"</span></span><br><span class="line"><span class="comment">//业务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bizPlay</span><span class="params">(Plane&amp; p)</span></span>&#123;</span><br><span class="line">    p.fly();</span><br><span class="line">    p.land();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Plane p1;</span><br><span class="line">    bizPlay(p1);</span><br><span class="line">    </span><br><span class="line">    Jet p2;</span><br><span class="line">    bizPlay(p2);</span><br><span class="line">    </span><br><span class="line">    Copter p3;</span><br><span class="line">    bizPlay(p3);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="纯虚函数(抽象类)">纯虚函数(抽象类)</h4><ul>
<li><p>当一个类具有一个纯虚函数,这个类就是抽象类</p>
</li>
<li><p>抽象类不能实例化对象</p>
</li>
<li><p>子类继承抽象类,必须要实现纯虚函数,如果没有,子类也是抽象类</p>
</li>
</ul>
<p>抽象类的作用:</p>
<ul>
<li>为了继承约束,根本不知道未来的实现</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Shape&#123;<span class="comment">//具有纯虚函数的类叫抽象类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">sayArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hi"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Circle : <span class="keyword">public</span> Shape&#123;<span class="comment">//如果没有实现父类的纯虚函数,则该类也是抽象类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"圆的面积: "</span> &lt;&lt; <span class="number">3.14</span> * r * r &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Circle <span class="title">c</span><span class="params">(10)</span></span>;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="接口(只是逻辑上的划分,语法上跟抽象类的写法没有区别)">接口(只是逻辑上的划分,语法上跟抽象类的写法没有区别)</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以当做一个接口</span></span><br><span class="line"><span class="keyword">class</span> Drawable&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="函数模板(泛型)">函数模板(泛型)</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myswap</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myswap</span><span class="params">(<span class="keyword">char</span>&amp; a, <span class="keyword">char</span>&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myswap</span><span class="params">(T&amp; a, T&amp; b)</span></span>&#123;</span><br><span class="line">    T tmp = <span class="number">0</span>;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//根据实际类型,自动推导</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    myswap(a, b);<span class="comment">//或者写成 myswap&lt;int&gt;(a, b);</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">","</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> x = <span class="string">'x'</span>, y = <span class="string">'y'</span>;</span><br><span class="line">    myswap(x, y);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">","</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="异常处理">异常处理</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异常处理,根据抛出的异常数据类型,进入到相应的catch块中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">300</span>;</span><br><span class="line">        <span class="keyword">if</span>(age &gt; <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">//throw age;</span></span><br><span class="line">            <span class="comment">//throw "发生异常";</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="number">9.8</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="keyword">int</span> a)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"int 异常"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="keyword">char</span>* b)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(...)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"未知异常"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>抛出函数外</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"除数为零"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        mydiv(<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="keyword">char</span>* a)&#123;</span><br><span class="line">        <span class="keyword">throw</span> a;<span class="comment">//throw 抛出函数外</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        mydiv(<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">        func();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="keyword">char</span>* a)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>抛出对象</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> MyException&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//throw MyException();</span></span><br><span class="line">        <span class="comment">//throw new MyException //不要抛出异常指针,需要手动 delete</span></span><br><span class="line">        <span class="keyword">throw</span> MyException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        mydiv(<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(MyException* e1)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"MyException 指针"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span> e1;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(MyException&amp; e2)&#123; <span class="comment">//不会产生副本</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"MyException 引用"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//catch(MyException e)&#123;//会产生对象的副本,因为调用了拷贝构造函数</span></span><br><span class="line">        <span class="comment">//cout &lt;&lt; "MyException" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>throw声明函数会抛出的异常类型</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="title">throw</span> <span class="params">(<span class="keyword">char</span>*, <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"除数为零"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>标准异常(类似于Java中的NullPointException)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdexcpt&gt; <span class="comment">//需要引入标准异常</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> out_of_range(<span class="string">"超出范围"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> invalid_argument(<span class="string">"参数不合法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>自定义异常</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> NullPointException : <span class="keyword">public</span> exception&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NullPointException(<span class="keyword">char</span>* msg) : exception(msg)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> out_of_range(<span class="string">"超出范围"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//else if(b == 0)&#123;</span></span><br><span class="line">        <span class="comment">//throw invalid_argument("参数不合法");</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == NULL)&#123;</span><br><span class="line">        <span class="keyword">throw</span> NullPointException(<span class="string">"为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        mydiv(<span class="number">8</span>,<span class="number">20</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(out_of_range e1)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e1.what() &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(NullPointException&amp; e2)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e2.what() &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(...)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"其它异常"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>外部类异常</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Err&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">class</span> MyException&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        MyException()&#123;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> Err::MyException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="模板类">模板类</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(T a)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    T a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通类继承模板类</span></span><br><span class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> A&lt;<span class="keyword">int</span>&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> a, <span class="keyword">int</span> b) : A&lt;<span class="keyword">int</span>&gt;(a)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>模板类继承模板类</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(T a)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    T a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> C : <span class="keyword">public</span> A&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C(T c, T a) : A&lt;T&gt;(a)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c = c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    T c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//实例化模板类对象</span></span><br><span class="line">    A&lt;<span class="keyword">int</span>&gt;(<span class="number">6</span>);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="类型转换">类型转换</h4><ul>
<li><p>static_cast 普遍情况</p>
</li>
<li><p>const_cast  去常量</p>
</li>
<li><p>dynamic_cast  子类类型转为父类类型</p>
</li>
<li><p>reinterpret_cast 函数指针转型,不具备移植性</p>
</li>
</ul>
<p>原始类型转换,所有情况都是一种写法,可读性不高,有可能有潜在的风险</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>* func(<span class="keyword">int</span> type)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> &amp;i; </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">            <span class="keyword">char</span> a = <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">return</span> &amp;a;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">default</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> NULL;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">char</span>* c_p)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *c_p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//int i = 0;</span></span><br><span class="line">    <span class="comment">//double d = i; //自动类型转换</span></span><br><span class="line">    <span class="comment">//double d = 9.5;</span></span><br><span class="line">    <span class="comment">//int i = d;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//int i = 8;</span></span><br><span class="line">    <span class="comment">//double d = 9.5;</span></span><br><span class="line">    <span class="comment">//i = static_cast&lt;int&gt;(d);</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//int i = 9;</span></span><br><span class="line">    <span class="comment">//int *i_p = &amp;i;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//void* -&gt; char*</span></span><br><span class="line">    <span class="comment">//char* c_p = (char*)func(2);</span></span><br><span class="line">    <span class="keyword">char</span>* c_p = <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>*&gt;(func(<span class="number">2</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//C++ 意图明显</span></span><br><span class="line">    func2(<span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>*&gt;(func(<span class="number">2</span>)));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//C</span></span><br><span class="line">    func2((<span class="keyword">char</span>*)(func(<span class="number">2</span>)));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>去常量转换</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> c[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//c[1] = 'a';</span></span><br><span class="line">    <span class="comment">//通过指针间接赋值</span></span><br><span class="line">    <span class="comment">//其他人并不知道,这次转型是为了去常量</span></span><br><span class="line">    <span class="comment">//char* c_p = (char*)c;</span></span><br><span class="line">    <span class="comment">//c_p[1] = 'a';</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>* c_p = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(c);</span><br><span class="line">    c_p[<span class="number">1</span>] = <span class="string">'y'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[] = <span class="string">"hello"</span>;</span><br><span class="line">    func(c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>子类类型转为父类类型</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"人"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Man : <span class="keyword">public</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"男人"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chasing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"泡妞"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Woman : <span class="keyword">public</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"女人"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">carebaby</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"生孩子"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Person* obj)</span></span>&#123;</span><br><span class="line">    obj-&gt;print();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用子类的特有函数,转为实际类型</span></span><br><span class="line">    <span class="comment">//并不知道转型失败</span></span><br><span class="line">    <span class="comment">// Man* m = (Man*)obj;</span></span><br><span class="line">    <span class="comment">// m-&gt;print(); //"女人"</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">//如果转型失败,返回NULL</span></span><br><span class="line">    Man* m = <span class="keyword">dynamic_cast</span>&lt;Man*&gt;(obj);</span><br><span class="line">    <span class="keyword">if</span>(m != NULL)&#123;</span><br><span class="line">        m-&gt;chasing();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    Woman* w = <span class="keyword">dynamic_cast</span>&lt;Woman*&gt;(obj);</span><br><span class="line">    <span class="keyword">if</span>(w != NULL)&#123;</span><br><span class="line">        w-&gt;carebaby();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    Woman w1;</span><br><span class="line">    Person *p1 = &amp;w1;</span><br><span class="line">    </span><br><span class="line">    func(p1);<span class="comment">//"女人"</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>函数指针转型</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"func1"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* func2()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"func2"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"abc"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*f_p)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//函数指针数组</span></span><br><span class="line">    f_p f_array[<span class="number">6</span>];</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    f_array[<span class="number">0</span>] = func1;</span><br><span class="line">    <span class="comment">//C方式</span></span><br><span class="line">    <span class="comment">//f_array[1] = (f_p)func2;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//C++方式</span></span><br><span class="line">    f_array[<span class="number">1</span>] = <span class="keyword">reinterpret_cast</span>&lt;f_p&gt;(func2);</span><br><span class="line">    </span><br><span class="line">    f_array[<span class="number">1</span>]();<span class="comment">// func2 不一定总是能执行,reinterpret_cast 转型不具备移植性</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="IO流">IO流</h4><ul>
<li>读写文本文件</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文本文件操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* fname = <span class="string">"/Users/weifeng/dest.txt"</span>;</span><br><span class="line">    <span class="comment">//输出流</span></span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(fname)</span></span>;</span><br><span class="line">    <span class="comment">//创建失败</span></span><br><span class="line">    <span class="keyword">if</span>(fout.bad())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fout &lt;&lt; <span class="string">"Jack"</span> &lt;&lt; endl;</span><br><span class="line">    fout &lt;&lt; <span class="string">"Rose"</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭输出流</span></span><br><span class="line">    fout.close();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//读取</span></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(fname)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(fin.bad())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>(fin.get(ch))&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ch;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fin.close();</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>二进制文件</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* src = <span class="string">"/Users/weifeng/src.jpg"</span>;</span><br><span class="line">    <span class="keyword">char</span>* dest = <span class="string">"/Users/weifeng/dest.jpg"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输入流</span></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(src, ios::binary)</span></span>;</span><br><span class="line">    <span class="comment">//输出流</span></span><br><span class="line">    <span class="function">ofsteam <span class="title">fout</span><span class="params">(dest, ios::binary)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(fin.bad() || fout.bad())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!fin.eof())&#123;</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        <span class="keyword">char</span> buff[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//栈内存执行完会释放</span></span><br><span class="line">        fin.read(buff, <span class="number">1024</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//写入</span></span><br><span class="line">        fout.write(buff, <span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    fin.close();</span><br><span class="line">    fout.close();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对象持久化</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    Person(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">("Jack", 22)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">("Rose", 18)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出流</span></span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">("/Users/weifeng/c_obj.data", ios::binary)</span></span>;</span><br><span class="line">    fout.write((<span class="keyword">char</span>*)(&amp;p1), <span class="keyword">sizeof</span>(Person)); <span class="comment">//指针能够读取到正确的数据,读取内存区的长度</span></span><br><span class="line">    fout.write((<span class="keyword">char</span>*)(&amp;p2), <span class="keyword">sizeof</span>(Person));</span><br><span class="line">    fout.close();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输入流</span></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">("/Users/weifeng/c_obj.data", ios::binary)</span></span>;</span><br><span class="line">    Person tmp;</span><br><span class="line">    fin.read((<span class="keyword">char</span>*)(&amp;tmp), <span class="keyword">sizeof</span>(Person));</span><br><span class="line">    tmp.print();</span><br><span class="line">    </span><br><span class="line">    fin.read((<span class="keyword">char</span>*)(&amp;tmp), <span class="keyword">sizeof</span>(Person));</span><br><span class="line">    tmp.print();</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="STL标准模板库">STL标准模板库</h4><p>STL: standard template library</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">"Jack"</span>; </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">("Rose")</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> s3 </span>= s1 + s2;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s4</span><span class="params">(10,"a")</span></span>; <span class="comment">//十个a</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> s5 = <span class="string">"  pray"</span>;</span><br><span class="line">    </span><br><span class="line">    s3.append(s5);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//string 转C字符串</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* c_str = s1.c_str();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c_str &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//s1.at(2);</span></span><br><span class="line">    <span class="comment">//string遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s1[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//迭代器指针</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">string</span>::iterator it = s1.begin(); it != s1.end(); it++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//at函数(charAt)</span></span><br><span class="line">    <span class="comment">//可能会抛出异常</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; s1.length(); i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s1.at(i) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">catch</span>(...)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"异常"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//动态数组</span></span><br><span class="line">    <span class="comment">//C动态数组只能通过动态内存分配来完成,C++则不需要使用动态内存分配,就可以使用动态数组</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    v.push_back(<span class="number">12</span>);</span><br><span class="line">    v.push_back(<span class="number">10</span>);</span><br><span class="line">    v.push_back(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; v.size(); i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: C++基础<br>date: 2017-07-25 23:28:16<br>tags: </p>
<h2 id="C++">C++</h2><h3 id="C与C++的关系">C与C++的关系</h3><ul>
<li><p>C++可以与C代码进行混编</p>
</li>
<li><p>C++面向对象的编程语言、C是面向过程的编程</p>
</li>
<li><p>C++是对C的一个增强</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[FFmpeg和libyuv的基本使用(五)]]></title>
    <link href="http://yoursite.com/2017/08/04/android_ffmpeg_4/"/>
    <id>http://yoursite.com/2017/08/04/android_ffmpeg_4/</id>
    <published>2017-08-04T14:10:19.000Z</published>
    <updated>2017-08-04T14:14:09.000Z</updated>
    <content type="html"><![CDATA[<h3 id="FFmpeg_和_libyuv的基本使用">FFmpeg 和 libyuv的基本使用</h3><h4 id="万能视频播放器">万能视频播放器</h4><p>实现的基本过程:</p>
<p>将任意格式的视频文件统一解码成YUV格式,然后将解码后的帧数据绘制到本地ANativeWindow里的Surface上. 这里的Surface由SurfaceView提供</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SurfaceHolder holder = surfaceView.getHolder();</span><br><span class="line"><span class="comment">//Surface 传入到Native函数中,用于绘制</span></span><br><span class="line">Surface surface = holder.getSurface();</span><br></pre></td></tr></table></figure>
<p>具体实现代码如下:</p>
<ul>
<li>自定义SurfaceView类 VideoView.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoView</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VideoView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VideoView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VideoView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SurfaceHolder holder = getHolder();</span><br><span class="line">        holder.setFormat(PixelFormat.RGBA_8888);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>新建音视频播放工具类 VideoPlayer.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoPlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(String input, Surface surface)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sound</span><span class="params">(String input, String output)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">playSoud</span><span class="params">(String input)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">readAndPlaySound</span><span class="params">(String input, String output)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 创建一个AudioTrac对象，用于播放</span><br><span class="line">     * <span class="doctag">@param</span> nb_channels</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AudioTrack <span class="title">createAudioTrack</span><span class="params">(<span class="keyword">int</span> sampleRateInHz, <span class="keyword">int</span> nb_channels)</span></span>&#123;</span><br><span class="line">        <span class="comment">//固定格式的音频码流</span></span><br><span class="line">        <span class="keyword">int</span> audioFormat = AudioFormat.ENCODING_PCM_16BIT;</span><br><span class="line">        Log.i(<span class="string">"jason"</span>, <span class="string">"nb_channels:"</span>+nb_channels);</span><br><span class="line">        <span class="comment">//声道布局</span></span><br><span class="line">        <span class="keyword">int</span> channelConfig;</span><br><span class="line">        <span class="keyword">if</span>(nb_channels == <span class="number">1</span>)&#123;</span><br><span class="line">            channelConfig = android.media.AudioFormat.CHANNEL_OUT_MONO;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nb_channels == <span class="number">2</span>)&#123;</span><br><span class="line">            channelConfig = android.media.AudioFormat.CHANNEL_OUT_STEREO;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            channelConfig = android.media.AudioFormat.CHANNEL_OUT_STEREO;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> bufferSizeInBytes = AudioTrack.getMinBufferSize(sampleRateInHz, channelConfig, audioFormat);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        AudioTrack audioTrack = <span class="keyword">new</span> AudioTrack(</span><br><span class="line">                AudioManager.STREAM_MUSIC,</span><br><span class="line">                sampleRateInHz, channelConfig,</span><br><span class="line">                audioFormat,</span><br><span class="line">                bufferSizeInBytes, AudioTrack.MODE_STREAM);</span><br><span class="line">        <span class="comment">//播放</span></span><br><span class="line">        <span class="comment">//audioTrack.play();</span></span><br><span class="line">        <span class="comment">//写入PCM</span></span><br><span class="line">        <span class="comment">//audioTrack.write(audioData, offsetInBytes, sizeInBytes);</span></span><br><span class="line">        <span class="keyword">return</span> audioTrack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>具体Native代码实现如下</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;jni.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="comment">//C/C++混编 extern: 指示编译器按照C语言进行编译</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;libyuv.h&gt;</span></span><br><span class="line"><span class="comment">//编码</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;libavcodec/avcodec.h&gt;</span></span><br><span class="line"><span class="comment">//封装格式处理</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;libavformat/avformat.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;libavfilter/avfilter.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;libswscale/swscale.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;android/log.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;android/native_window_jni.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;android/native_window.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> libyuv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//重采样</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;libswresample/swresample.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOGI(FORMAT, ...) __android_log_print(ANDROID_LOG_INFO,"jason",FORMAT,##__VA_ARGS__);</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,"jason",FORMAT,##__VA_ARGS__);</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  MAX_AUDIO_FRAME_SIZE 48000 * 4</span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_MainActivity_avcodecinfo</span><span class="params">(JNIEnv *env, jobject instance)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span></span></span><br><span class="line">    <span class="keyword">char</span> info[<span class="number">40000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    av_register_all();</span><br><span class="line">    AVCodec *<span class="keyword">c_t</span>emp = av_codec_next(NULL);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">c_t</span>emp != NULL)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">c_t</span>emp-&gt;decode != NULL)&#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(info, <span class="string">"%sdecode:"</span>, info);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(info, <span class="string">"%sencode:"</span>, info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">c_t</span>emp-&gt;type)&#123;</span><br><span class="line">            <span class="keyword">case</span> AVMEDIA_TYPE_VIDEO:</span><br><span class="line">                <span class="built_in">sprintf</span>(info, <span class="string">"%s(video):"</span>, info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> AVMEDIA_TYPE_AUDIO:</span><br><span class="line">                <span class="built_in">sprintf</span>(info, <span class="string">"%s(audio):"</span>, info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">sprintf</span>(info, <span class="string">"%s(other):"</span>, info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sprintf</span>(info, <span class="string">"%s[%10s]\n"</span>, info, <span class="keyword">c_t</span>emp-&gt;name);</span><br><span class="line">        <span class="keyword">c_t</span>emp = <span class="keyword">c_t</span>emp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_VideoPlayer_readAndPlaySound</span><span class="params">(JNIEnv *env, jobject jthiz,</span><br><span class="line">                                                        jstring input_, jstring output_)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input_cstr = env-&gt;GetStringUTFChars(input_, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *output_cstr = env-&gt;GetStringUTFChars(output_, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    LOGI(<span class="string">"%s"</span>,<span class="string">"sound"</span>);</span><br><span class="line">    <span class="comment">//注册组件</span></span><br><span class="line">    av_register_all();</span><br><span class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</span><br><span class="line">    <span class="comment">//打开音频文件</span></span><br><span class="line">    <span class="keyword">if</span>(avformat_open_input(&amp;pFormatCtx,input_cstr,NULL,NULL) != <span class="number">0</span>)&#123;</span><br><span class="line">        LOGI(<span class="string">"%s"</span>,<span class="string">"无法打开音频文件"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取输入文件信息</span></span><br><span class="line">    <span class="keyword">if</span>(avformat_find_stream_info(pFormatCtx,NULL) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        LOGI(<span class="string">"%s"</span>,<span class="string">"无法获取输入文件信息"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取音频流索引位置</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, audio_stream_idx = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; pFormatCtx-&gt;nb_streams;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pFormatCtx-&gt;streams[i]-&gt;codec-&gt;<span class="keyword">codec_t</span>ype == AVMEDIA_TYPE_AUDIO)&#123;</span><br><span class="line">            audio_stream_idx = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取解码器</span></span><br><span class="line">    AVCodecContext *codecCtx = pFormatCtx-&gt;streams[audio_stream_idx]-&gt;codec;</span><br><span class="line">    AVCodec *codec = avcodec_find_decoder(codecCtx-&gt;codec_id);</span><br><span class="line">    <span class="keyword">if</span>(codec == NULL)&#123;</span><br><span class="line">        LOGI(<span class="string">"%s"</span>,<span class="string">"无法获取解码器"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打开解码器</span></span><br><span class="line">    <span class="keyword">if</span>(avcodec_open2(codecCtx,codec,NULL) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        LOGI(<span class="string">"%s"</span>,<span class="string">"无法打开解码器"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//压缩数据</span></span><br><span class="line">    AVPacket *packet = (AVPacket *)av_malloc(<span class="keyword">sizeof</span>(AVPacket));</span><br><span class="line">    <span class="comment">//解压缩数据</span></span><br><span class="line">    AVFrame *frame = av_frame_alloc();</span><br><span class="line">    <span class="comment">//frame-&gt;16bit 44100 PCM 统一音频采样格式与采样率</span></span><br><span class="line">    SwrContext *swrCtx = swr_alloc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重采样设置参数-------------start</span></span><br><span class="line">    <span class="comment">//输入的采样格式</span></span><br><span class="line">    <span class="keyword">enum</span> AVSampleFormat in_sample_fmt = codecCtx-&gt;sample_fmt;</span><br><span class="line">    <span class="comment">//输出采样格式16bit PCM</span></span><br><span class="line">    <span class="keyword">enum</span> AVSampleFormat out_sample_fmt = AV_SAMPLE_FMT_S16;</span><br><span class="line">    <span class="comment">//输入采样率</span></span><br><span class="line">    <span class="keyword">int</span> in_sample_rate = codecCtx-&gt;sample_rate;</span><br><span class="line">    <span class="comment">//输出采样率</span></span><br><span class="line">    <span class="keyword">int</span> out_sample_rate = in_sample_rate;</span><br><span class="line">    <span class="comment">//获取输入的声道布局</span></span><br><span class="line">    <span class="comment">//根据声道个数获取默认的声道布局（2个声道，默认立体声stereo）</span></span><br><span class="line">    <span class="comment">//av_get_default_channel_layout(codecCtx-&gt;channels);</span></span><br><span class="line">    <span class="keyword">uint64_t</span> in_ch_layout = codecCtx-&gt;channel_layout;</span><br><span class="line">    <span class="comment">//输出的声道布局（立体声）</span></span><br><span class="line">    <span class="keyword">uint64_t</span> out_ch_layout = AV_CH_LAYOUT_STEREO;</span><br><span class="line"></span><br><span class="line">    swr_alloc_set_opts(swrCtx,</span><br><span class="line">                       out_ch_layout,out_sample_fmt,out_sample_rate,</span><br><span class="line">                       in_ch_layout,in_sample_fmt,in_sample_rate,</span><br><span class="line">                       <span class="number">0</span>, NULL);</span><br><span class="line">    swr_init(swrCtx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出的声道个数</span></span><br><span class="line">    <span class="keyword">int</span> out_channel_nb = av_get_channel_layout_nb_channels(out_ch_layout);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重采样设置参数-------------end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//JNI begin------------------</span></span><br><span class="line">    <span class="comment">//JasonPlayer</span></span><br><span class="line">    jclass player_class = env-&gt;GetObjectClass(jthiz);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AudioTrack对象</span></span><br><span class="line">    jmethodID <span class="keyword">create_audio_t</span>rack_mid = env-&gt;GetMethodID(player_class,<span class="string">"createAudioTrack"</span>,<span class="string">"(II)Landroid/media/AudioTrack;"</span>);</span><br><span class="line">    jobject <span class="keyword">audio_t</span>rack = env-&gt;CallObjectMethod(jthiz,<span class="keyword">create_audio_t</span>rack_mid,out_sample_rate,out_channel_nb);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用AudioTrack.play方法</span></span><br><span class="line">    jclass <span class="keyword">audio_t</span>rack_class = env-&gt;GetObjectClass(<span class="keyword">audio_t</span>rack);</span><br><span class="line">    jmethodID <span class="keyword">audio_t</span>rack_play_mid = env-&gt;GetMethodID(<span class="keyword">audio_t</span>rack_class,<span class="string">"play"</span>,<span class="string">"()V"</span>);</span><br><span class="line">    env-&gt;CallVoidMethod(<span class="keyword">audio_t</span>rack,<span class="keyword">audio_t</span>rack_play_mid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AudioTrack.write</span></span><br><span class="line">    jmethodID <span class="keyword">audio_t</span>rack_write_mid = env-&gt;GetMethodID(<span class="keyword">audio_t</span>rack_class,<span class="string">"write"</span>,<span class="string">"([BII)I"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JNI end------------------</span></span><br><span class="line">    FILE *fp_pcm = fopen(output_cstr,<span class="string">"wb"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//16bit 44100 PCM 数据</span></span><br><span class="line">    <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span> *)av_malloc(MAX_AUDIO_FRAME_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> got_frame = <span class="number">0</span>,index = <span class="number">0</span>, ret;</span><br><span class="line">    <span class="comment">//不断读取压缩数据</span></span><br><span class="line">    <span class="keyword">while</span>(av_read_frame(pFormatCtx,packet) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//解码音频类型的Packet</span></span><br><span class="line">        <span class="keyword">if</span>(packet-&gt;stream_index == audio_stream_idx)&#123;</span><br><span class="line">            <span class="comment">//解码</span></span><br><span class="line">            ret = avcodec_decode_audio4(codecCtx,frame,&amp;got_frame,packet);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                LOGI(<span class="string">"%s"</span>,<span class="string">"解码完成"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//解码一帧成功</span></span><br><span class="line">            <span class="keyword">if</span>(got_frame &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                LOGI(<span class="string">"解码：%d"</span>,index++);</span><br><span class="line">                swr_convert(swrCtx, &amp;out_buffer, MAX_AUDIO_FRAME_SIZE,(<span class="keyword">const</span> <span class="keyword">uint8_t</span> **)frame-&gt;data,frame-&gt;nb_samples);</span><br><span class="line">                <span class="comment">//获取sample的size</span></span><br><span class="line">                <span class="keyword">int</span> out_buffer_size = av_samples_get_buffer_size(NULL, out_channel_nb,</span><br><span class="line">                                                                 frame-&gt;nb_samples, out_sample_fmt, <span class="number">1</span>);</span><br><span class="line">                fwrite(out_buffer,<span class="number">1</span>,out_buffer_size,fp_pcm);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//out_buffer缓冲区数据，转成byte数组</span></span><br><span class="line">                jbyteArray audio_sample_array = env-&gt;NewByteArray(out_buffer_size);</span><br><span class="line">                jbyte* sample_bytep = env-&gt;GetByteArrayElements(audio_sample_array,NULL);</span><br><span class="line">                <span class="comment">//out_buffer的数据复制到sampe_bytep</span></span><br><span class="line">                <span class="built_in">memcpy</span>(sample_bytep,out_buffer,out_buffer_size);</span><br><span class="line">                <span class="comment">//同步</span></span><br><span class="line">                env-&gt;ReleaseByteArrayElements(audio_sample_array,sample_bytep,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//AudioTrack.write PCM数据</span></span><br><span class="line">                env-&gt;CallIntMethod(<span class="keyword">audio_t</span>rack,<span class="keyword">audio_t</span>rack_write_mid,</span><br><span class="line">                                      audio_sample_array,<span class="number">0</span>,out_buffer_size);</span><br><span class="line">                <span class="comment">//释放局部引用</span></span><br><span class="line">                env-&gt;DeleteLocalRef(audio_sample_array);</span><br><span class="line">                usleep(<span class="number">1000</span> * <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        av_free_packet(packet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    av_frame_free(&amp;frame);</span><br><span class="line">    av_free(out_buffer);</span><br><span class="line"></span><br><span class="line">    swr_free(&amp;swrCtx);</span><br><span class="line">    avcodec_close(codecCtx);</span><br><span class="line">    avformat_close_input(&amp;pFormatCtx);</span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(input_, input_cstr);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(output_, output_cstr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_VideoPlayer_playSoud</span><span class="params">(JNIEnv *env, jobject instance, jstring input_)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input = env-&gt;GetStringUTFChars(input_, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span></span></span><br><span class="line">    <span class="comment">//1.注册所有组件</span></span><br><span class="line">    av_register_all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装格式上下文，统领全局的结构体，保存了音视频文件封装格式的相关信息</span></span><br><span class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.打开音频文件</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx, input, NULL, NULL) != <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法打开音频文件"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取音频文件信息</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法获取音频文件信息"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取音频流的索引位置</span></span><br><span class="line">    <span class="comment">//遍历所有类型的流（音频流、视频流、字幕流），找到音频流</span></span><br><span class="line">    <span class="keyword">int</span> audio_stream_idx = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//number of streams</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</span><br><span class="line">        <span class="comment">//流的类型</span></span><br><span class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;<span class="keyword">codec_t</span>ype == AVMEDIA_TYPE_AUDIO) &#123;</span><br><span class="line">            audio_stream_idx = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (audio_stream_idx == -<span class="number">1</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到音频流\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取音频流中的编解码上下文</span></span><br><span class="line">    AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[audio_stream_idx]-&gt;codec;</span><br><span class="line">    <span class="comment">//4.根据编解码上下文中的编码id查找对应的解码</span></span><br><span class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">    <span class="comment">//（迅雷看看，找不到解码器，临时下载一个解码器）</span></span><br><span class="line">    <span class="keyword">if</span> (pCodec == NULL) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到解码器\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.打开解码器</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"解码器无法打开\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出音频信息</span></span><br><span class="line">    LOGI(<span class="string">"音频的文件格式：%s"</span>, pFormatCtx-&gt;iformat-&gt;name);</span><br><span class="line">    LOGI(<span class="string">"音频时长：%lld"</span>, (pFormatCtx-&gt;duration) / <span class="number">1000000</span>);</span><br><span class="line">    LOGI(<span class="string">"音频的宽高：%d,%d"</span>, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class="line">    LOGI(<span class="string">"解码器的名称：%s"</span>, pCodec-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//压缩数据</span></span><br><span class="line">    AVPacket *packet = (AVPacket *)av_malloc(<span class="keyword">sizeof</span>(AVPacket));</span><br><span class="line">    <span class="comment">//解压缩数据</span></span><br><span class="line">    AVFrame *frame = av_frame_alloc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//frame-&gt;16bit  44100 PCM 统一音频采样格式与采样率</span></span><br><span class="line"></span><br><span class="line">    SwrContext *swrContext = swr_alloc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重采样设置参数</span></span><br><span class="line">    <span class="comment">//输入的采样格式</span></span><br><span class="line">    <span class="keyword">enum</span> AVSampleFormat  in_sample_fmt = pCodecCtx-&gt;sample_fmt;</span><br><span class="line">    <span class="comment">//输出的采样格式</span></span><br><span class="line">    <span class="keyword">enum</span> AVSampleFormat out_sample_fmt = AV_SAMPLE_FMT_S16;</span><br><span class="line">    <span class="comment">//输入采样率</span></span><br><span class="line">    <span class="keyword">int</span> in_sample_rate = pCodecCtx-&gt;sample_rate;</span><br><span class="line">    <span class="comment">//输出采样率</span></span><br><span class="line">    <span class="keyword">int</span> out_sample_rate = in_sample_rate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取输入的声道布局 参加AudioFormat.java  286行</span></span><br><span class="line">    <span class="comment">//根据声道个数获取默认的声道布局(2个声道,默认立体声CHANNEL_OUT_STEREO)</span></span><br><span class="line">    <span class="comment">//CHANNEL_OUT_5POINT1 为5.1环绕声</span></span><br><span class="line">    <span class="comment">//av_get_default_channel_layout(pCodecCtx-&gt;channels);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int64_t</span>  in_ch_layout = pCodecCtx-&gt;channel_layout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出的声道布局</span></span><br><span class="line">    <span class="keyword">int64_t</span> out_ch_layout = AV_CH_LAYOUT_STEREO;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出声道个数</span></span><br><span class="line">    <span class="keyword">int</span> out_channel_nb = av_get_channel_layout_nb_channels(out_ch_layout);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> log_offset = <span class="number">0</span>; <span class="comment">// 不偏移</span></span><br><span class="line"></span><br><span class="line">    swr_alloc_set_opts(swrContext,</span><br><span class="line">                       out_ch_layout, out_sample_fmt, out_sample_rate,</span><br><span class="line">                       in_ch_layout, in_sample_fmt, in_sample_rate,</span><br><span class="line">                       log_offset, NULL);</span><br><span class="line"></span><br><span class="line">    swr_init(swrContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//VideoPlayer</span></span><br><span class="line">    jclass player_class = env-&gt;GetObjectClass(instance);</span><br><span class="line">    <span class="comment">//AudioTrack对象</span></span><br><span class="line">    <span class="comment">//cd  cd /Users/vobile/AndroidStudioProjects/FFmpegDemo/app/build/intermediates/classes/debug/com/vobile/ffmpegdemo/</span></span><br><span class="line">    <span class="comment">//javap -s VideoPlayer.class</span></span><br><span class="line">    jmethodID <span class="keyword">create_audio_t</span>rack_mid = env-&gt;GetMethodID(player_class,<span class="string">"createAudioTrack"</span>,<span class="string">"(II)Landroid/media/AudioTrack;"</span>);</span><br><span class="line">    jobject <span class="keyword">audio_t</span>rack = env-&gt;CallObjectMethod(instance,<span class="keyword">create_audio_t</span>rack_mid,out_sample_rate,out_channel_nb);</span><br><span class="line">    <span class="comment">//调用AudioTrack.play()方法</span></span><br><span class="line">    jclass <span class="keyword">audio_t</span>rack_class = env-&gt;GetObjectClass(<span class="keyword">audio_t</span>rack);</span><br><span class="line">    jmethodID <span class="keyword">audio_t</span>rack_play_mid = env-&gt;GetMethodID(<span class="keyword">audio_t</span>rack_class,<span class="string">"play"</span>,<span class="string">"()V"</span>);</span><br><span class="line">    env-&gt;CallVoidMethod(<span class="keyword">audio_t</span>rack,<span class="keyword">audio_t</span>rack_play_mid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AudioTrack.write</span></span><br><span class="line">    jmethodID <span class="keyword">audio_t</span>rack_write_mid = env-&gt;GetMethodID(<span class="keyword">audio_t</span>rack_class,<span class="string">"write"</span>,<span class="string">"([BII)I"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存了16bit  44100 PCM 采样数据</span></span><br><span class="line">    <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span> *)av_malloc(MAX_AUDIO_FRAME_SIZE); <span class="comment">//unsigned char</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> got_frame = <span class="number">0</span>, frame_count = <span class="number">0</span>, ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不断读取压缩数据</span></span><br><span class="line">    <span class="keyword">while</span>(av_read_frame(pFormatCtx,packet) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//解码音频类型的Packet</span></span><br><span class="line">        <span class="keyword">if</span>(packet-&gt;stream_index == audio_stream_idx)&#123;</span><br><span class="line">            <span class="comment">//解码</span></span><br><span class="line">            ret = avcodec_decode_audio4(pCodecCtx, frame,&amp;got_frame,packet);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                LOGE(<span class="string">"%s"</span>, <span class="string">"解码错误"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//解码一帧成功</span></span><br><span class="line">            <span class="keyword">if</span> (got_frame &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                LOGI(<span class="string">"解码: %d"</span>,frame_count++);</span><br><span class="line">                swr_convert(swrContext, &amp;out_buffer, MAX_AUDIO_FRAME_SIZE,</span><br><span class="line">                            (<span class="keyword">const</span> <span class="keyword">uint8_t</span> **) frame-&gt;data, frame-&gt;nb_samples);</span><br><span class="line">                <span class="comment">//获取sample的大小</span></span><br><span class="line">                <span class="keyword">int</span> out_buffer_size = av_samples_get_buffer_size(NULL,out_channel_nb,frame-&gt;nb_samples,out_sample_fmt,<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//AudioTrack.writePCM数据</span></span><br><span class="line">                <span class="comment">//out_buffer缓冲区数据,转成byte数组</span></span><br><span class="line">                jbyteArray  audio_sample_array = env-&gt;NewByteArray(out_buffer_size);</span><br><span class="line">                jbyte* sample_bytep = env-&gt;GetByteArrayElements(audio_sample_array,NULL);</span><br><span class="line">                <span class="comment">//out_buffer的数据复制到sample_bytep</span></span><br><span class="line">                <span class="built_in">memcpy</span>(sample_bytep,out_buffer,out_buffer_size);</span><br><span class="line">                <span class="comment">//同步</span></span><br><span class="line">                env-&gt;ReleaseByteArrayElements(audio_sample_array,sample_bytep,<span class="number">0</span>);</span><br><span class="line">                env-&gt;CallIntMethod(<span class="keyword">audio_t</span>rack,<span class="keyword">audio_t</span>rack_write_mid,</span><br><span class="line">                                   audio_sample_array,<span class="number">0</span>,out_buffer_size);</span><br><span class="line">                <span class="comment">//释放局部引用</span></span><br><span class="line">                env-&gt;DeleteLocalRef(audio_sample_array);</span><br><span class="line">                usleep(<span class="number">1000</span> * <span class="number">16</span>);<span class="comment">//16毫秒</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        av_free_packet(packet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    av_frame_free(&amp;frame);</span><br><span class="line">    av_free(out_buffer);</span><br><span class="line"></span><br><span class="line">    swr_free(&amp;swrContext);</span><br><span class="line">    avcodec_close(pCodecCtx);</span><br><span class="line">    avformat_close_input(&amp;pFormatCtx);</span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(input_, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_VideoPlayer_sound</span><span class="params">(JNIEnv *env, jobject instance, jstring input_,</span><br><span class="line">                                             jstring output_)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input = env-&gt;GetStringUTFChars(input_, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *output = env-&gt;GetStringUTFChars(output_, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span></span></span><br><span class="line">    <span class="comment">//1.注册所有组件</span></span><br><span class="line">    av_register_all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装格式上下文，统领全局的结构体，保存了音视频文件封装格式的相关信息</span></span><br><span class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.打开音频文件</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx, input, NULL, NULL) != <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法打开音频文件"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取音频文件信息</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法获输入文件信息"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取音频流的索引位置</span></span><br><span class="line">    <span class="comment">//遍历所有类型的流（音频流、视频流、字幕流），找到音频流</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, audio_stream_idx = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//number of streams</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</span><br><span class="line">        <span class="comment">//流的类型</span></span><br><span class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;<span class="keyword">codec_t</span>ype == AVMEDIA_TYPE_AUDIO) &#123;</span><br><span class="line">            audio_stream_idx = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (audio_stream_idx == -<span class="number">1</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到音频流\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取音频流中的编解码上下文</span></span><br><span class="line">    AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[audio_stream_idx]-&gt;codec;</span><br><span class="line">    <span class="comment">//4.根据编解码上下文中的编码id查找对应的解码</span></span><br><span class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">    <span class="comment">//（迅雷看看，找不到解码器，临时下载一个解码器）</span></span><br><span class="line">    <span class="keyword">if</span> (pCodec == NULL) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到解码器\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.打开解码器</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法打开解码器\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出音频信息</span></span><br><span class="line">    LOGI(<span class="string">"音频的文件格式：%s"</span>, pFormatCtx-&gt;iformat-&gt;name);</span><br><span class="line">    LOGI(<span class="string">"音频时长：%lld"</span>, (pFormatCtx-&gt;duration) / <span class="number">1000000</span>);</span><br><span class="line">    LOGI(<span class="string">"音频的宽高：%d,%d"</span>, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class="line">    LOGI(<span class="string">"解码器的名称：%s"</span>, pCodec-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//压缩数据</span></span><br><span class="line">    AVPacket *packet = (AVPacket *)av_malloc(<span class="keyword">sizeof</span>(AVPacket));</span><br><span class="line">    <span class="comment">//解压缩数据</span></span><br><span class="line">    AVFrame *frame = av_frame_alloc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//frame-&gt;16bit  44100 PCM 统一音频采样格式与采样率</span></span><br><span class="line"></span><br><span class="line">    SwrContext *swrContext = swr_alloc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重采样设置参数</span></span><br><span class="line">    <span class="comment">//输入的采样格式</span></span><br><span class="line">    <span class="keyword">enum</span> AVSampleFormat  in_sample_fmt = pCodecCtx-&gt;sample_fmt;</span><br><span class="line">    <span class="comment">//输出的采样格式16bit PCM</span></span><br><span class="line">    <span class="keyword">enum</span> AVSampleFormat out_sample_fmt = AV_SAMPLE_FMT_S16;</span><br><span class="line">    <span class="comment">//输入采样率</span></span><br><span class="line">    <span class="keyword">int</span> in_sample_rate = pCodecCtx-&gt;sample_rate;</span><br><span class="line">    <span class="comment">//输出采样率</span></span><br><span class="line">    <span class="keyword">int</span> out_sample_rate = in_sample_rate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取输入的声道布局 参加AudioFormat.java  286行</span></span><br><span class="line">    <span class="comment">//根据声道个数获取默认的声道布局(2个声道,默认立体声CHANNEL_OUT_STEREO)</span></span><br><span class="line">    <span class="comment">//CHANNEL_OUT_5POINT1 为5.1环绕声</span></span><br><span class="line">    <span class="comment">//av_get_default_channel_layout(pCodecCtx-&gt;channels);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int64_t</span>  in_ch_layout = pCodecCtx-&gt;channel_layout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出的声道布局</span></span><br><span class="line">    <span class="keyword">int64_t</span> out_ch_layout = AV_CH_LAYOUT_STEREO;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出的声道个数</span></span><br><span class="line">    <span class="keyword">int</span> out_channel_nb = av_get_channel_layout_nb_channels(out_ch_layout);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> log_offset = <span class="number">0</span>; <span class="comment">// 不偏移</span></span><br><span class="line"></span><br><span class="line">    swr_alloc_set_opts(swrContext,</span><br><span class="line">                       out_ch_layout, out_sample_fmt, out_sample_rate,</span><br><span class="line">                       in_ch_layout, in_sample_fmt, in_sample_rate,</span><br><span class="line">                       log_offset, NULL);</span><br><span class="line">    swr_init(swrContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存了16bit  44100 PCM 采样数据</span></span><br><span class="line">    <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span> *)av_malloc(MAX_AUDIO_FRAME_SIZE); <span class="comment">//unsigned char</span></span><br><span class="line"></span><br><span class="line">    FILE *fp_pcm = fopen(output, <span class="string">"wb"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> got_frame = <span class="number">0</span>, frame_count = <span class="number">0</span>, ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不断读取压缩数据</span></span><br><span class="line">    <span class="keyword">while</span>(av_read_frame(pFormatCtx,packet) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//解码音频类型的Packet</span></span><br><span class="line">        <span class="keyword">if</span>(packet-&gt;stream_index == audio_stream_idx)&#123;</span><br><span class="line">            <span class="comment">//解码</span></span><br><span class="line">            ret = avcodec_decode_audio4(pCodecCtx, frame,&amp;got_frame,packet);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                LOGE(<span class="string">"%s"</span>, <span class="string">"解码错误"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//解码一帧成功</span></span><br><span class="line">            <span class="keyword">if</span> (got_frame &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                LOGI(<span class="string">"解码: %d"</span>,frame_count++);</span><br><span class="line">                swr_convert(swrContext, &amp;out_buffer, MAX_AUDIO_FRAME_SIZE,</span><br><span class="line">                            (<span class="keyword">const</span> <span class="keyword">uint8_t</span> **) frame-&gt;data, frame-&gt;nb_samples);</span><br><span class="line">                <span class="comment">//获取sample的大小</span></span><br><span class="line">                <span class="keyword">int</span> out_buffer_size = av_samples_get_buffer_size(NULL,out_channel_nb,frame-&gt;nb_samples,out_sample_fmt,<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//uint8_t *out_buffer---unsigned char--1</span></span><br><span class="line">                fwrite(out_buffer,<span class="number">1</span>,out_buffer_size,fp_pcm);</span><br><span class="line">            &#125;</span><br><span class="line">            av_free_packet(packet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGI(<span class="string">"解码完成"</span>);</span><br><span class="line">    fclose(fp_pcm);</span><br><span class="line">    av_frame_free(&amp;frame);</span><br><span class="line">    av_free(out_buffer);</span><br><span class="line">    swr_free(&amp;swrContext);</span><br><span class="line">    avcodec_close(pCodecCtx);</span><br><span class="line">    avformat_close_input(&amp;pFormatCtx);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(input_, input);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(output_, output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_VideoPlayer_render</span><span class="params">(JNIEnv *env, jobject instance, jstring input_,</span><br><span class="line">                                              jobject surface)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需要转码的视频文件(输入的视频文件)</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input_cstr = env-&gt;GetStringUTFChars(input_, NULL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span></span></span><br><span class="line">    <span class="comment">//1.注册所有组件</span></span><br><span class="line">    av_register_all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装格式上下文，统领全局的结构体，保存了视频文件封装格式的相关信息</span></span><br><span class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.打开输入视频文件</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx, input_cstr, NULL, NULL) != <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法打开输入视频文件"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取视频文件信息</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法获取视频文件信息"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取视频流的索引位置</span></span><br><span class="line">    <span class="comment">//遍历所有类型的流（音频流、视频流、字幕流），找到视频流</span></span><br><span class="line">    <span class="keyword">int</span> v_stream_idx = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//number of streams</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</span><br><span class="line">        <span class="comment">//流的类型</span></span><br><span class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;<span class="keyword">codec_t</span>ype == AVMEDIA_TYPE_VIDEO) &#123;</span><br><span class="line">            v_stream_idx = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v_stream_idx == -<span class="number">1</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到视频流\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有知道视频的编码方式，才能够根据编码方式去找到解码器</span></span><br><span class="line">    <span class="comment">//获取视频流中的编解码上下文</span></span><br><span class="line">    AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[v_stream_idx]-&gt;codec;</span><br><span class="line">    <span class="comment">//4.根据编解码上下文中的编码id查找对应的解码</span></span><br><span class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">    <span class="comment">//（迅雷看看，找不到解码器，临时下载一个解码器）</span></span><br><span class="line">    <span class="keyword">if</span> (pCodec == NULL) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到解码器\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.打开解码器</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"解码器无法打开\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出视频信息</span></span><br><span class="line">    LOGI(<span class="string">"视频的文件格式：%s"</span>, pFormatCtx-&gt;iformat-&gt;name);</span><br><span class="line">    LOGI(<span class="string">"视频时长：%lld"</span>, (pFormatCtx-&gt;duration) / <span class="number">1000000</span>);</span><br><span class="line">    LOGI(<span class="string">"视频的宽高：%d,%d"</span>, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class="line">    LOGI(<span class="string">"解码器的名称：%s"</span>, pCodec-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备读取</span></span><br><span class="line">    <span class="comment">//AVPacket用于存储一帧一帧的压缩数据（H264）</span></span><br><span class="line">    <span class="comment">//缓冲区，开辟空间</span></span><br><span class="line">    <span class="comment">//AVPacket *packet; //编码数据</span></span><br><span class="line">    <span class="comment">//av_init_packet(packet);</span></span><br><span class="line">    AVPacket *packet = (AVPacket *) av_malloc(<span class="keyword">sizeof</span>(AVPacket));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AVFrame用于存储解码后的像素数据(YUV)</span></span><br><span class="line">    <span class="comment">//内存分配</span></span><br><span class="line">    AVFrame *yuv_frame = av_frame_alloc();</span><br><span class="line"></span><br><span class="line">    AVFrame *rgb_frame = av_frame_alloc();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//native绘制</span></span><br><span class="line">    <span class="comment">//窗体</span></span><br><span class="line">    ANativeWindow*  nativeWindow = ANativeWindow_fromSurface(env, surface);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制时的缓冲区</span></span><br><span class="line">    ANativeWindow_Buffer outBuffer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> got_picture, ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> frame_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.一帧一帧的读取压缩数据</span></span><br><span class="line">    <span class="keyword">while</span> (av_read_frame(pFormatCtx, packet) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//只要视频压缩数据（根据流的索引位置判断）</span></span><br><span class="line">        <span class="keyword">if</span> (packet-&gt;stream_index == v_stream_idx) &#123;</span><br><span class="line">            <span class="comment">//7.解码一帧视频压缩数据，得到视频像素数据</span></span><br><span class="line">            <span class="comment">//解码 AVPacket-&gt;AVFrame</span></span><br><span class="line">            ret = avcodec_decode_video2(pCodecCtx, yuv_frame, &amp;got_picture, packet);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                LOGE(<span class="string">"%s"</span>, <span class="string">"解码错误"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//为0说明解码完成，非0正在解码</span></span><br><span class="line">            <span class="keyword">if</span> (got_picture) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//lock</span></span><br><span class="line">                <span class="comment">//设置缓冲区的属性(宽、高、像素格式)  这里应该和SurfaceView上指定的format一致</span></span><br><span class="line">                ANativeWindow_setBuffersGeometry(nativeWindow,</span><br><span class="line">                                                         pCodecCtx-&gt;width, pCodecCtx-&gt;height, WINDOW_FORMAT_RGBA_8888);</span><br><span class="line">                ANativeWindow_lock(nativeWindow,&amp;outBuffer,NULL);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//YUV-&gt;RGBA_8888</span></span><br><span class="line">                <span class="comment">//pCodecCtx-&gt;pix_fmt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//设置rgb_frame的属性(像素格式、宽高)和缓冲区</span></span><br><span class="line">                avpicture_fill((AVPicture *)rgb_frame, (<span class="keyword">uint8_t</span> *)outBuffer.bits, AV_PIX_FMT_RGBA,pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//fill buffer   data[0] 是Y 的数据, linesize[0]是Y的一行的大小</span></span><br><span class="line">                <span class="comment">//rgb_frame的缓冲区与outBuffer.bits是同一块内存</span></span><br><span class="line">                I420ToARGB(yuv_frame-&gt;data[<span class="number">0</span>],yuv_frame-&gt;linesize[<span class="number">0</span>],</span><br><span class="line">                           yuv_frame-&gt;data[<span class="number">2</span>],yuv_frame-&gt;linesize[<span class="number">2</span>],</span><br><span class="line">                           yuv_frame-&gt;data[<span class="number">1</span>],yuv_frame-&gt;linesize[<span class="number">1</span>],</span><br><span class="line">                           rgb_frame-&gt;data[<span class="number">0</span>], rgb_frame-&gt;linesize[<span class="number">0</span>],</span><br><span class="line">                           pCodecCtx-&gt;width,pCodecCtx-&gt;height</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//unlock</span></span><br><span class="line">                ANativeWindow_unlockAndPost(nativeWindow);</span><br><span class="line"></span><br><span class="line">                frame_count++;</span><br><span class="line">                LOGI(<span class="string">"解码第%d帧"</span>, frame_count);</span><br><span class="line"></span><br><span class="line">                usleep(<span class="number">1000</span> * <span class="number">16</span>);<span class="comment">//16毫秒</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        av_free_packet(packet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    ANativeWindow_release(nativeWindow);</span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(input_, input_cstr);</span><br><span class="line"></span><br><span class="line">    av_frame_free(&amp;yuv_frame);</span><br><span class="line"></span><br><span class="line">    avcodec_close(pCodecCtx);</span><br><span class="line"></span><br><span class="line">    avformat_free_context(pFormatCtx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_MainActivity_decode</span><span class="params">(JNIEnv *env, jclass type, jstring input_,</span><br><span class="line">                                               jstring output_)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需要转码的视频文件(输入的视频文件)</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input_cstr = env-&gt;GetStringUTFChars(input_, NULL);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *output_cstr = env-&gt;GetStringUTFChars(output_, NULL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span></span></span><br><span class="line">    <span class="comment">//1.注册所有组件</span></span><br><span class="line">    av_register_all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装格式上下文，统领全局的结构体，保存了视频文件封装格式的相关信息</span></span><br><span class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.打开输入视频文件</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx, input_cstr, NULL, NULL) != <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法打开输入视频文件"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取视频文件信息</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法获取视频文件信息"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取视频流的索引位置</span></span><br><span class="line">    <span class="comment">//遍历所有类型的流（音频流、视频流、字幕流），找到视频流</span></span><br><span class="line">    <span class="keyword">int</span> v_stream_idx = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//number of streams</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</span><br><span class="line">        <span class="comment">//流的类型</span></span><br><span class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;<span class="keyword">codec_t</span>ype == AVMEDIA_TYPE_VIDEO) &#123;</span><br><span class="line">            v_stream_idx = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v_stream_idx == -<span class="number">1</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到视频流\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有知道视频的编码方式，才能够根据编码方式去找到解码器</span></span><br><span class="line">    <span class="comment">//获取视频流中的编解码上下文</span></span><br><span class="line">    AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[v_stream_idx]-&gt;codec;</span><br><span class="line">    <span class="comment">//4.根据编解码上下文中的编码id查找对应的解码</span></span><br><span class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">    <span class="comment">//（迅雷看看，找不到解码器，临时下载一个解码器）</span></span><br><span class="line">    <span class="keyword">if</span> (pCodec == NULL) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到解码器\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.打开解码器</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"解码器无法打开\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出视频信息</span></span><br><span class="line">    LOGI(<span class="string">"视频的文件格式：%s"</span>, pFormatCtx-&gt;iformat-&gt;name);</span><br><span class="line">    LOGI(<span class="string">"视频时长：%lld"</span>, (pFormatCtx-&gt;duration) / <span class="number">1000000</span>);</span><br><span class="line">    LOGI(<span class="string">"视频的宽高：%d,%d"</span>, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class="line">    LOGI(<span class="string">"解码器的名称：%s"</span>, pCodec-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备读取</span></span><br><span class="line">    <span class="comment">//AVPacket用于存储一帧一帧的压缩数据（H264）</span></span><br><span class="line">    <span class="comment">//缓冲区，开辟空间</span></span><br><span class="line">    <span class="comment">//AVPacket *packet; //编码数据</span></span><br><span class="line">    <span class="comment">//av_init_packet(packet);</span></span><br><span class="line">    AVPacket *packet = (AVPacket *) av_malloc(<span class="keyword">sizeof</span>(AVPacket));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AVFrame用于存储解码后的像素数据(YUV)</span></span><br><span class="line">    <span class="comment">//内存分配</span></span><br><span class="line">    AVFrame *pFrame = av_frame_alloc();</span><br><span class="line">    <span class="comment">//YUV420 像素数据(解码数据)</span></span><br><span class="line">    AVFrame *pFrameYUV = av_frame_alloc();</span><br><span class="line">    <span class="comment">//只有指定了AVFrame的像素格式、画面大小才能真正分配内存</span></span><br><span class="line">    <span class="comment">//缓冲区分配内存</span></span><br><span class="line">    <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span> *) av_malloc(</span><br><span class="line">            avpicture_get_size(AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, pCodecCtx-&gt;height));</span><br><span class="line">    <span class="comment">//初始化缓冲区</span></span><br><span class="line">    avpicture_fill((AVPicture *) pFrameYUV, out_buffer, AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width,</span><br><span class="line">                   pCodecCtx-&gt;height);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于转码（缩放）的参数，转之前的宽高，转之后的宽高，格式等</span></span><br><span class="line">    <span class="keyword">struct</span> SwsContext *sws_ctx = sws_getContext(pCodecCtx-&gt;width, pCodecCtx-&gt;height,</span><br><span class="line">                                                pCodecCtx-&gt;pix_fmt,</span><br><span class="line">                                                pCodecCtx-&gt;width, pCodecCtx-&gt;height,</span><br><span class="line">                                                AV_PIX_FMT_YUV420P,</span><br><span class="line">                                                SWS_BICUBIC, NULL, NULL, NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> got_picture, ret;</span><br><span class="line"></span><br><span class="line">    FILE *fp_yuv = fopen(output_cstr, <span class="string">"wb+"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> frame_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.一帧一帧的读取压缩数据</span></span><br><span class="line">    <span class="keyword">while</span> (av_read_frame(pFormatCtx, packet) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//只要视频压缩数据（根据流的索引位置判断）</span></span><br><span class="line">        <span class="keyword">if</span> (packet-&gt;stream_index == v_stream_idx) &#123;</span><br><span class="line">            <span class="comment">//7.解码一帧视频压缩数据，得到视频像素数据</span></span><br><span class="line">            ret = avcodec_decode_video2(pCodecCtx, pFrame, &amp;got_picture, packet);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                LOGE(<span class="string">"%s"</span>, <span class="string">"解码错误"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//为0说明解码完成，非0正在解码</span></span><br><span class="line">            <span class="keyword">if</span> (got_picture) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//AVFrame转为像素格式YUV420，宽高</span></span><br><span class="line">                <span class="comment">//2 6输入、输出数据</span></span><br><span class="line">                <span class="comment">//3 7输入、输出画面一行的数据的大小 AVFrame 转换是一行一行转换的</span></span><br><span class="line">                <span class="comment">//4 输入数据第一列要转码的位置 从0开始</span></span><br><span class="line">                <span class="comment">//5 输入画面的高度</span></span><br><span class="line">                sws_scale(sws_ctx, (<span class="keyword">const</span> <span class="keyword">uint8_t</span> **)pFrame-&gt;data, pFrame-&gt;linesize, <span class="number">0</span>, pCodecCtx-&gt;height,</span><br><span class="line">                          pFrameYUV-&gt;data, pFrameYUV-&gt;linesize);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//输出到YUV文件</span></span><br><span class="line">                <span class="comment">//AVFrame像素帧写入文件</span></span><br><span class="line">                <span class="comment">//data解码后的图像像素数据（音频采样数据）</span></span><br><span class="line">                <span class="comment">//Y 亮度 UV 色度（压缩了） 人对亮度更加敏感</span></span><br><span class="line">                <span class="comment">//U V 个数是Y的1/4</span></span><br><span class="line">                <span class="keyword">int</span> y_size = pCodecCtx-&gt;width * pCodecCtx-&gt;height;</span><br><span class="line">                fwrite(pFrameYUV-&gt;data[<span class="number">0</span>], <span class="number">1</span>, y_size, fp_yuv);</span><br><span class="line">                fwrite(pFrameYUV-&gt;data[<span class="number">1</span>], <span class="number">1</span>, y_size / <span class="number">4</span>, fp_yuv);</span><br><span class="line">                fwrite(pFrameYUV-&gt;data[<span class="number">2</span>], <span class="number">1</span>, y_size / <span class="number">4</span>, fp_yuv);</span><br><span class="line"></span><br><span class="line">                frame_count++;</span><br><span class="line">                LOGI(<span class="string">"解码第%d帧"</span>, frame_count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        av_free_packet(packet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp_yuv);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(input_, input_cstr);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(output_, output_cstr);</span><br><span class="line"></span><br><span class="line">    av_frame_free(&amp;pFrame);</span><br><span class="line"></span><br><span class="line">    avcodec_close(pCodecCtx);</span><br><span class="line"></span><br><span class="line">    avformat_free_context(pFormatCtx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line"><span class="function">jstring</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_MainActivity_stringFromJNI</span><span class="params">(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject <span class="comment">/* this */</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>备注: 播放音频时务必使用真机,模拟机不支持AudioTrack播放pcm格式音频</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="FFmpeg_和_libyuv的基本使用">FFmpeg 和 libyuv的基本使用</h3><h4 id="万能视频播放器">万能视频播放器</h4><p>实现的基本过程:</p>
<p>将任意格式的视频文件统一解码成YUV格式,然后将解码后的帧数据绘制到本地ANativeWindow里的Surface上. 这里的Surface由SurfaceView提供</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[FFmpeg和libyuv的基本使用(四)]]></title>
    <link href="http://yoursite.com/2017/08/04/android_ffmpeg_3/"/>
    <id>http://yoursite.com/2017/08/04/android_ffmpeg_3/</id>
    <published>2017-08-04T13:23:18.000Z</published>
    <updated>2017-08-04T13:25:04.000Z</updated>
    <content type="html"><![CDATA[<h3 id="新建并配置工程">新建并配置工程</h3><p>下面使用Android Studio 2.2.3来进行实例工程的开发</p>
<ul>
<li><p>新建FFmpegDemo 工程</p>
</li>
<li><p>将之前生成的FFmpeg头文件、FFmpeg动态库、libyuv头文件、libyuv动态库拷贝到libs目录下</p>
</li>
</ul>
<a id="more"></a>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/67A9C81A-FCC9-4DFA-8A0A-DFD8E2C15D75.png" alt=""></p>
<p>头文件如下图:</p>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/65E470C3-D8AC-44CF-90C1-06D80EEBCF97.png" alt=""></p>
<ul>
<li>整个CMakeLists文件内容如下:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sets the minimum version of CMake required to build the native</span></span><br><span class="line"><span class="comment"># library. You should either keep the default value or only pass a</span></span><br><span class="line"><span class="comment"># value of 3.4.0 or lower.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CMakeLists.txt用于配置jni项目属性，主要用于声明CMake版本 so库名称 C/Cpp文件路径等信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cmake版本声明</span></span><br><span class="line">cmake_minimum_required(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creates and names a library, sets it as either STATIC</span></span><br><span class="line"><span class="comment"># or SHARED, and provides the relative paths to its source code.</span></span><br><span class="line"><span class="comment"># You can define multiple libraries, and CMake builds it for you.</span></span><br><span class="line"><span class="comment"># Gradle automatically packages shared libraries with your APK.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加native-lib动态共享库</span></span><br><span class="line"><span class="comment"># 配置库信息,库的名字,动态库或静态库,依赖的源文件</span></span><br><span class="line"><span class="comment"># STATIC: 静态库,是目标文件的归档文件,在链接其它目标的时候使用。</span></span><br><span class="line"><span class="comment"># SHARED: 动态库,会被动态链接,在运行时被加载。</span></span><br><span class="line"><span class="comment"># MODULE: 模块库,是不会被链接到其它目标中的插件,但是可能会在运行时使用</span></span><br><span class="line"><span class="comment"># dlopen: -系列的函数动态链接。</span></span><br><span class="line">add_library( <span class="comment"># Sets the name of the library.</span></span><br><span class="line">             native-lib</span><br><span class="line"></span><br><span class="line">             <span class="comment"># Sets the library as a shared library.</span></span><br><span class="line">             SHARED</span><br><span class="line"></span><br><span class="line">             <span class="comment"># Provides a relative path to your source file(s).</span></span><br><span class="line">             <span class="comment"># Associated headers in the same location as their source</span></span><br><span class="line">             <span class="comment"># file are automatically included.</span></span><br><span class="line">             src/main/cpp/native-lib.cpp )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Searches for a specified prebuilt library and stores the path as a</span></span><br><span class="line"><span class="comment"># variable. Because system libraries are included in the search path by</span></span><br><span class="line"><span class="comment"># default, you only need to specify the name of the public NDK library</span></span><br><span class="line"><span class="comment"># you want to add. CMake verifies that the library exists before</span></span><br><span class="line"><span class="comment"># completing its build.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载NDK上的library  C++日志</span></span><br><span class="line"><span class="comment"># 查找链接库  在指定目录下搜索一个库,保存在变量log-lib中,如果没有指定路径,则使用默认系统路径</span></span><br><span class="line">find_library( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">              <span class="built_in">log</span>-lib</span><br><span class="line">              <span class="comment"># Specifies the name of the NDK library that</span></span><br><span class="line">              <span class="comment"># you want CMake to locate.</span></span><br><span class="line">              <span class="built_in">log</span> )</span><br><span class="line"></span><br><span class="line">find_library( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">              jnigraphics-lib</span><br><span class="line">              <span class="comment"># Specifies the name of the NDK library that</span></span><br><span class="line">              <span class="comment"># you want CMake to locate.</span></span><br><span class="line">              jnigraphics )</span><br><span class="line"></span><br><span class="line">find_library( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">              android-lib</span><br><span class="line">              <span class="comment"># Specifies the name of the NDK library that</span></span><br><span class="line">              <span class="comment"># you want CMake to locate.</span></span><br><span class="line">              android )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置cmakelist的目标路径</span></span><br><span class="line"><span class="built_in">set</span>(distribution_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加so文件动态共享库</span></span><br><span class="line"><span class="comment"># SHARED: 动态库,会被动态链接,在运行时被加载。</span></span><br><span class="line"><span class="comment"># IMPORTED : 不需要编译,由外部导入</span></span><br><span class="line">add_library( avutil-<span class="number">55</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># PROPERTIES IMPORTED_LOCATION: 需要从本地导入并配置导入文件的路径</span></span><br><span class="line"><span class="comment"># 设置动态库的路径 $&#123;CMAKE_SOURCE_DIR&#125;/libs/$&#123;ANDROID_ABI&#125;/libavutil-55.so</span></span><br><span class="line"><span class="comment"># $&#123;ANDROID_ABI&#125;表示so文件的ABI类型的路径</span></span><br><span class="line"><span class="built_in">set</span>_target_properties( avutil-<span class="number">55</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavutil-<span class="number">55</span>.so )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_library( swresample-<span class="number">2</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>_target_properties( swresample-<span class="number">2</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libswresample-<span class="number">2</span>.so )</span><br><span class="line">add_library( avcodec-<span class="number">57</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED )</span><br><span class="line"><span class="built_in">set</span>_target_properties( avcodec-<span class="number">57</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavcodec-<span class="number">57</span>.so )</span><br><span class="line">add_library( avfilter-<span class="number">6</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED)</span><br><span class="line"><span class="built_in">set</span>_target_properties( avfilter-<span class="number">6</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavfilter-<span class="number">6</span>.so )</span><br><span class="line">add_library( swscale-<span class="number">4</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED)</span><br><span class="line"><span class="built_in">set</span>_target_properties( swscale-<span class="number">4</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libswscale-<span class="number">4</span>.so )</span><br><span class="line"></span><br><span class="line">add_library( avformat-<span class="number">57</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED)</span><br><span class="line"><span class="built_in">set</span>_target_properties( avformat-<span class="number">57</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavformat-<span class="number">57</span>.so )</span><br><span class="line"></span><br><span class="line">add_library( avdevice-<span class="number">57</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED)</span><br><span class="line"><span class="built_in">set</span>_target_properties( avdevice-<span class="number">57</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavdevice-<span class="number">57</span>.so )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_library( postproc-<span class="number">54</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED)</span><br><span class="line"><span class="built_in">set</span>_target_properties( postproc-<span class="number">54</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libpostproc-<span class="number">54</span>.so )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_library( yuv</span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED)</span><br><span class="line"><span class="built_in">set</span>_target_properties( yuv</span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libyuv.so )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">"<span class="variable">$&#123;CMAKE_CXX_FLAGS&#125;</span> -std=gnu++11"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置头文件路径</span></span><br><span class="line">include_directories(libs/include/ffmpeg libs/include/yuv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># include_directories(libs/include/yuv)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies libraries CMake should link to your target library. You</span></span><br><span class="line"><span class="comment"># can link multiple libraries, such as libraries you define in the</span></span><br><span class="line"><span class="comment"># build script, prebuilt third-party libraries, or system libraries.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成链接动态库</span></span><br><span class="line"><span class="comment"># 添加链接库,相同于指定-l参数</span></span><br><span class="line"><span class="comment"># 将需要的库文件进行链接</span></span><br><span class="line">target_link_libraries( <span class="comment"># Specifies the target library.</span></span><br><span class="line">                       native-lib</span><br><span class="line">                       avutil-<span class="number">55</span></span><br><span class="line">                       swresample-<span class="number">2</span></span><br><span class="line">                       avcodec-<span class="number">57</span></span><br><span class="line">                       avfilter-<span class="number">6</span></span><br><span class="line">                       swscale-<span class="number">4</span></span><br><span class="line">                       avformat-<span class="number">57</span></span><br><span class="line">                       avdevice-<span class="number">57</span></span><br><span class="line">                       postproc-<span class="number">54</span></span><br><span class="line">                       yuv</span><br><span class="line"></span><br><span class="line">                       <span class="comment"># Links the target library to the log library</span></span><br><span class="line">                       <span class="comment"># included in the NDK.</span></span><br><span class="line">                       <span class="variable">$&#123;log-lib&#125;</span></span><br><span class="line">                       <span class="variable">$&#123;jnigraphics-lib&#125;</span></span><br><span class="line">                       <span class="variable">$&#123;android-lib&#125;</span> )</span><br></pre></td></tr></table></figure>
<ul>
<li>app Module 下 build.gradle文件内容如下:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    buildToolsVersion <span class="string">"25.0.2"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.vobile.ffmpegdemo"</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        <span class="built_in">test</span>InstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">        externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags <span class="string">"-frtti -fexceptions"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ndk &#123;</span><br><span class="line">            abiFilters <span class="string">'armeabi-v7a'</span>, <span class="string">"x86"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">source</span>Sets &#123;</span><br><span class="line"></span><br><span class="line">        main &#123;</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line"></span><br><span class="line">        debug &#123;</span><br><span class="line">            jniDebuggable <span class="literal">true</span></span><br><span class="line">            jniDebuggable = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            path <span class="string">"CMakeLists.txt"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span><br><span class="line">    androidTestCompile(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span><br><span class="line">        exclude group: <span class="string">'com.android.support'</span>, module: <span class="string">'support-annotations'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    compile <span class="string">'com.android.support:appcompat-v7:25.3.1'</span></span><br><span class="line">    <span class="built_in">test</span>Compile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="新建并配置工程">新建并配置工程</h3><p>下面使用Android Studio 2.2.3来进行实例工程的开发</p>
<ul>
<li><p>新建FFmpegDemo 工程</p>
</li>
<li><p>将之前生成的FFmpeg头文件、FFmpeg动态库、libyuv头文件、libyuv动态库拷贝到libs目录下</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[FFmpeg和libyuv的基本使用(三)]]></title>
    <link href="http://yoursite.com/2017/08/04/android_ffmpeg_2/"/>
    <id>http://yoursite.com/2017/08/04/android_ffmpeg_2/</id>
    <published>2017-08-04T13:20:30.000Z</published>
    <updated>2017-08-04T13:22:46.000Z</updated>
    <content type="html"><![CDATA[<h3 id="配置libyuv编译脚本">配置libyuv编译脚本</h3><p>如果需要将YUV格式转RGBA像素格式,建议使用另外一个开源库<code>libyuv</code>,接下来教大家编译并生成<code>libyuv.so</code>库</p>
<ul>
<li><p>下载<a href="https://chromium.googlesource.com/libyuv/libyuv/" target="_blank" rel="external">libyuv</a>源代码</p>
</li>
<li><p>使用git clone下来 <code>git clone https://chromium.googlesource.com/libyuv/libyuv</code></p>
</li>
<li><p><code>cd libyuv</code> 进入libyuv源码目录,新建jni目录<code>mkdir jni</code>将源码拷贝到jni目录下</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li>修改Android.mk文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is the Android makefile for libyuv for both platform and NDK.</span></span><br><span class="line">LOCAL_PATH:= $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_CPP_EXTENSION := .cc</span><br><span class="line"></span><br><span class="line">LOCAL_SRC_FILES := \</span><br><span class="line">    <span class="built_in">source</span>/compare.cc           \</span><br><span class="line">    <span class="built_in">source</span>/compare_common.cc    \</span><br><span class="line">    <span class="built_in">source</span>/convert.cc           \</span><br><span class="line">    <span class="built_in">source</span>/convert_argb.cc      \</span><br><span class="line">    <span class="built_in">source</span>/convert_from.cc      \</span><br><span class="line">    <span class="built_in">source</span>/convert_from_argb.cc \</span><br><span class="line">    <span class="built_in">source</span>/convert_to_argb.cc   \</span><br><span class="line">    <span class="built_in">source</span>/convert_to_i420.cc   \</span><br><span class="line">    <span class="built_in">source</span>/cpu_id.cc            \</span><br><span class="line">    <span class="built_in">source</span>/planar_functions.cc  \</span><br><span class="line">    <span class="built_in">source</span>/rotate.cc            \</span><br><span class="line">    <span class="built_in">source</span>/rotate_any.cc        \</span><br><span class="line">    <span class="built_in">source</span>/rotate_argb.cc       \</span><br><span class="line">    <span class="built_in">source</span>/rotate_common.cc     \</span><br><span class="line">    <span class="built_in">source</span>/row_any.cc           \</span><br><span class="line">    <span class="built_in">source</span>/row_common.cc        \</span><br><span class="line">    <span class="built_in">source</span>/scale.cc             \</span><br><span class="line">    <span class="built_in">source</span>/scale_any.cc         \</span><br><span class="line">    <span class="built_in">source</span>/scale_argb.cc        \</span><br><span class="line">    <span class="built_in">source</span>/scale_common.cc      \</span><br><span class="line">    <span class="built_in">source</span>/video_common.cc</span><br><span class="line"></span><br><span class="line">ifeq ($(TARGET_ARCH_ABI),armeabi-v7a)</span><br><span class="line">    LOCAL_CFLAGS += -DLIBYUV_NEON</span><br><span class="line">    LOCAL_SRC_FILES += \</span><br><span class="line">        <span class="built_in">source</span>/compare_neon.cc.neon    \</span><br><span class="line">        <span class="built_in">source</span>/rotate_neon.cc.neon     \</span><br><span class="line">        <span class="built_in">source</span>/row_neon.cc.neon        \</span><br><span class="line">        <span class="built_in">source</span>/scale_neon.cc.neon</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">ifeq ($(TARGET_ARCH_ABI),arm64-v8a)</span><br><span class="line">    LOCAL_CFLAGS += -DLIBYUV_NEON</span><br><span class="line">    LOCAL_SRC_FILES += \</span><br><span class="line">        <span class="built_in">source</span>/compare_neon64.cc    \</span><br><span class="line">        <span class="built_in">source</span>/rotate_neon64.cc     \</span><br><span class="line">        <span class="built_in">source</span>/row_neon64.cc        \</span><br><span class="line">        <span class="built_in">source</span>/scale_neon64.cc </span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">ifeq ($(TARGET_ARCH_ABI),$(filter $(TARGET_ARCH_ABI), x86 x86_64))</span><br><span class="line">    LOCAL_SRC_FILES += \</span><br><span class="line">        <span class="built_in">source</span>/compare_gcc.cc       \</span><br><span class="line">        <span class="built_in">source</span>/rotate_gcc.cc        \</span><br><span class="line">        <span class="built_in">source</span>/row_gcc.cc           \</span><br><span class="line">        <span class="built_in">source</span>/scale_gcc.cc</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include</span><br><span class="line">LOCAL_C_INCLUDES += $(LOCAL_PATH)/include</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := libyuv</span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line"></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>
<ul>
<li>修改Application.mk文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">APP_ABI := armeabi-v7a arm64-v8a x86 x86_64</span><br><span class="line">APP_PLATFORM := android-<span class="number">9</span></span><br><span class="line">APP_CPPFLAGS += -fno-rtti</span><br></pre></td></tr></table></figure>
<h3 id="编译libyuv动态库">编译libyuv动态库</h3><ul>
<li>使用<code>ndk-build</code>命令进行编译,每次执行<code>ndk-build</code>之前都需要<code>ndk-build clean</code>一遍才行,不然不会将新的改动编译进去。</li>
</ul>
<p>执行 <code>ndk-build NDK_PROJECT_PATH=/Users/weifeng/Downloads/libyuv NDK_APPLICATION_MK=/Users/weifeng/Downloads/libyuv/jni/Application.mk</code> 命令生成动态库</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="配置libyuv编译脚本">配置libyuv编译脚本</h3><p>如果需要将YUV格式转RGBA像素格式,建议使用另外一个开源库<code>libyuv</code>,接下来教大家编译并生成<code>libyuv.so</code>库</p>
<ul>
<li><p>下载<a href="https://chromium.googlesource.com/libyuv/libyuv/">libyuv</a>源代码</p>
</li>
<li><p>使用git clone下来 <code>git clone https://chromium.googlesource.com/libyuv/libyuv</code></p>
</li>
<li><p><code>cd libyuv</code> 进入libyuv源码目录,新建jni目录<code>mkdir jni</code>将源码拷贝到jni目录下</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[FFmpeg和libyuv的基本使用(二)]]></title>
    <link href="http://yoursite.com/2017/08/04/android_ffmpeg_1/"/>
    <id>http://yoursite.com/2017/08/04/android_ffmpeg_1/</id>
    <published>2017-08-04T13:15:36.000Z</published>
    <updated>2017-08-04T13:20:17.000Z</updated>
    <content type="html"><![CDATA[<h3 id="配置FFmpeg编译脚本">配置FFmpeg编译脚本</h3><ul>
<li><p>进入FFmpeg-master源码目录</p>
</li>
<li><p><code>touch config.sh</code> 添加如下内容</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NDK=/Users/weifeng/Library/Android/sdk/ndk-bundle</span><br><span class="line">SYSROOT=<span class="variable">$NDK</span>/platforms/android-<span class="number">22</span>/arch-x86_64</span><br><span class="line">TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/x86_64-<span class="number">4.9</span>/prebuilt/darwin-x86_64</span><br><span class="line">CPU=x86_64</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><code>touch build_android.sh</code> 添加如下内容</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line">. config.sh</span><br><span class="line"></span><br><span class="line">PREFIX=$(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">ADDI_CFLAGS=<span class="string">""</span></span><br><span class="line"><span class="keyword">function</span> build_android</span><br><span class="line">&#123;</span><br><span class="line">./configure \</span><br><span class="line">    --prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line">    --enable-shared \</span><br><span class="line">    --disable-static \</span><br><span class="line">    --disable-doc \</span><br><span class="line">    --disable-ffmpeg \</span><br><span class="line">    --disable-ffplay \</span><br><span class="line">    --disable-ffprobe \</span><br><span class="line">    --disable-ffserver \</span><br><span class="line">    --disable-doc \</span><br><span class="line">    --disable-symver \</span><br><span class="line">    --disable-x86asm \</span><br><span class="line">    --enable-gpl \</span><br><span class="line">    --cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/x86_64-linux-android- \</span><br><span class="line">    --target-os=linux \</span><br><span class="line">    --arch=x86_64 \</span><br><span class="line">    --enable-cross-compile \</span><br><span class="line">    --sysroot=<span class="variable">$SYSROOT</span> \</span><br><span class="line">    --extra-cflags=<span class="string">"-Os -fpic <span class="variable">$ADDI_CFLAGS</span>"</span> \</span><br><span class="line">    --extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</span><br><span class="line">    <span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span></span><br><span class="line">make clean</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">&#125;</span><br><span class="line">build_android</span><br></pre></td></tr></table></figure>
<ul>
<li>修改<code>configure</code>文件中<code># build settings</code>下内容</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build settings</span></span><br><span class="line">SHFLAGS=<span class="string">'-shared -Wl,-soname,$$(@F)'</span></span><br><span class="line">LIBPREF=<span class="string">"lib"</span></span><br><span class="line">LIBSUF=<span class="string">".a"</span></span><br><span class="line">FULLNAME=<span class="string">'$(NAME)$(BUILDSUF)'</span></span><br><span class="line">LIBNAME=<span class="string">'$(LIBPREF)$(FULLNAME)$(LIBSUF)'</span></span><br><span class="line">SLIBPREF=<span class="string">"lib"</span></span><br><span class="line">SLIBSUF=<span class="string">".so"</span></span><br><span class="line">SLIBNAME=<span class="string">'$(SLIBPREF)$(FULLNAME)$(SLIBSUF)'</span></span><br><span class="line">SLIBNAME_WITH_VERSION=<span class="string">'$(SLIBNAME).$(LIBVERSION)'</span></span><br><span class="line">SLIBNAME_WITH_MAJOR=<span class="string">'$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'</span>  </span><br><span class="line">LIB_INSTALL_EXTRA_CMD=<span class="string">'$$(RANLIB)"$(LIBDIR)/$(LIBNAME)"'</span>  </span><br><span class="line">SLIB_INSTALL_NAME=<span class="string">'$(SLIBNAME_WITH_MAJOR)'</span>  </span><br><span class="line">SLIB_INSTALL_LINKS=<span class="string">'$(SLIBNAME)'</span></span><br><span class="line">VERSION_SCRIPT_POSTPROCESS_CMD=<span class="string">"cat"</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>为<code>build_android.sh</code>和<code>config.sh</code>添加执行权限  <code>chmod u+x build_android.sh</code> 、 <code>chmod u+x config.sh</code></p>
</li>
<li><p>执行<code>./build_android.sh</code> 编译并生成动态库</p>
</li>
</ul>
<p>如果要生成arm平台下的动态库,则要修改<code>config.sh</code>和<code>build_android.sh</code>内容如下:</p>
<p><code>config.sh</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NDK=/Users/weifeng/Library/Android/sdk/ndk-bundle</span><br><span class="line">SYSROOT=<span class="variable">$NDK</span>/platforms/android-<span class="number">21</span>/arch-arm</span><br><span class="line">TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/arm-linux-androideabi-<span class="number">4.9</span>/prebuilt/darwin-x86_64</span><br><span class="line">CPU=armv7<span class="operator">-a</span></span><br></pre></td></tr></table></figure>
<p><code>build_android.sh</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line">. config.sh</span><br><span class="line"></span><br><span class="line">PREFIX=$(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">ADDI_CFLAGS=<span class="string">"-marm"</span></span><br><span class="line"><span class="keyword">function</span> build_android</span><br><span class="line">&#123;</span><br><span class="line">./configure \</span><br><span class="line">    --prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line">    --enable-shared \</span><br><span class="line">    --disable-static \</span><br><span class="line">    --disable-doc \</span><br><span class="line">    --disable-ffmpeg \</span><br><span class="line">    --disable-ffplay \</span><br><span class="line">    --disable-ffprobe \</span><br><span class="line">    --disable-ffserver \</span><br><span class="line">    --disable-doc \</span><br><span class="line">    --disable-symver \</span><br><span class="line">    --enable-gpl \</span><br><span class="line">    --cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi- \</span><br><span class="line">    --target-os=linux \</span><br><span class="line">    --arch=arm \</span><br><span class="line">    --enable-cross-compile \</span><br><span class="line">    --sysroot=<span class="variable">$SYSROOT</span> \</span><br><span class="line">    --extra-cflags=<span class="string">"-Os -fpic <span class="variable">$ADDI_CFLAGS</span>"</span> \</span><br><span class="line">    --extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</span><br><span class="line">    <span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span></span><br><span class="line">make clean</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">&#125;</span><br><span class="line">build_android</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="配置FFmpeg编译脚本">配置FFmpeg编译脚本</h3><ul>
<li><p>进入FFmpeg-master源码目录</p>
</li>
<li><p><code>touch config.sh</code> 添加如下内容</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NDK=/Users/weifeng/Library/Android/sdk/ndk-bundle</span><br><span class="line">SYSROOT=<span class="variable">$NDK</span>/platforms/android-<span class="number">22</span>/arch-x86_64</span><br><span class="line">TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/x86_64-<span class="number">4.9</span>/prebuilt/darwin-x86_64</span><br><span class="line">CPU=x86_64</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[FFmpeg和libyuv的基本使用(一)]]></title>
    <link href="http://yoursite.com/2017/08/04/android_ffmpeg_0/"/>
    <id>http://yoursite.com/2017/08/04/android_ffmpeg_0/</id>
    <published>2017-08-04T12:15:36.000Z</published>
    <updated>2017-08-04T14:13:25.000Z</updated>
    <content type="html"><![CDATA[<h3 id="FFmpeg库简介">FFmpeg库简介</h3><h4 id="FFmpeg一共包含8个库:">FFmpeg一共包含8个库:</h4><ul>
<li><p>avodec: 编解码 (最重要的库)</p>
</li>
<li><p>avformat: 封装格式处理</p>
</li>
<li><p>avfilter: 滤镜特效处理</p>
</li>
<li><p>avdevice: 各种设备的输入输出</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>avutil: 工具库(大部分都需要这个库的支持)</p>
</li>
<li><p>postproc: 后加工</p>
</li>
<li><p>swresample: 音频采样数据格式转换</p>
</li>
<li><p>swscale: 视频像素数据格式转换</p>
</li>
</ul>
<h4 id="FFmpeg解码的流程图">FFmpeg解码的流程图</h4><p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/Snip20170728_3.png" alt=""></p>
<h4 id="FFmpeg解码函数简介">FFmpeg解码函数简介</h4><ul>
<li><p>av_register_all(): 注册所有组件</p>
</li>
<li><p>avformat_open_input(): 打开输入视频文件</p>
</li>
<li><p>avformat_find_stream_info(): 获取视频文件信息</p>
</li>
<li><p>avcodec_find_decoder(): 查找解码器</p>
</li>
<li><p>avcodec_open2(): 打开解码器</p>
</li>
<li><p>av_read_frame(): 从输入文件读取一帧压缩数据</p>
</li>
<li><p>avcodec_decode_vide2(): 解码一帧压缩数据</p>
</li>
<li><p>avcodec_close(): 关闭解码器</p>
</li>
<li><p>avformat_close_input(): 关闭输入视频文件 </p>
</li>
</ul>
<h4 id="FFmpeg解码的数据结构">FFmpeg解码的数据结构</h4><p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/Snip20170728_4.png" alt=""></p>
<h4 id="FFmpeg数据结构简介">FFmpeg数据结构简介</h4><ul>
<li><p>AVFormatContext</p>
<ul>
<li>封装格式上下文结构体,也是统领全局的结构体,保存了视频文件封装格式相关信息</li>
</ul>
</li>
<li><p>AVInputFormat</p>
<ul>
<li>每种封装格式(例如FLV,KVM,MP4,AVI)对应一个该结构体</li>
</ul>
</li>
<li><p>AVStream</p>
<ul>
<li>视频文件中每个视频(音频)流对应一个该结构体.(是一个数组,数量是不确定的,一般第0个都是视频流,第1个都是音频流)</li>
</ul>
</li>
<li><p>AVCodecContext</p>
<ul>
<li>编解码器上下文结构体,保存了视频(音频)编解码相关信息.(被更新了,现在使用AVCodecParameters,但是很多api并没有更新所以我们依旧使用AVCodecContext)</li>
</ul>
</li>
<li><p>AVCodec</p>
<ul>
<li>每种视频(音频)编解码器(例如H.264解码器)对应一个该结构体.(指明了编码器是什么类型的)</li>
</ul>
</li>
<li><p>AVPacket</p>
<ul>
<li>存储一帧压缩编码数据</li>
</ul>
</li>
<li><p>AVFrame</p>
<ul>
<li>存储一帧解码后像素(采样)数据</li>
</ul>
</li>
</ul>
<h4 id="FFmpeg数据结构的内容">FFmpeg数据结构的内容</h4><ul>
<li><p>AVFormatContext</p>
<ul>
<li>iformat: 输入视频的AVInputFormat</li>
<li>nb_streams: 输入视频的AVStream 个数</li>
<li>streams: 输入视频的AVStream []数组</li>
<li>duration: 输入视频的时长 (以微妙为单位)</li>
<li>bit_rate: 输入视频的码率</li>
</ul>
</li>
<li><p>AVInputFormat</p>
<ul>
<li>name: 封装格式名称</li>
<li>long_name: 封装格式的长名称</li>
<li>extensions: 封装格式的扩展名</li>
<li>id: 封装格式ID</li>
<li>一些封装格式处理的接口函数</li>
</ul>
</li>
<li><p>AVStream</p>
<ul>
<li>id: 序号</li>
<li>codec: 该流对应的AVCodecContext</li>
<li>time_base: 该流的时基</li>
<li>r_frame_rate: 该流的帧率</li>
</ul>
</li>
<li><p>AVCodecContext</p>
<ul>
<li>codec: 编解码器的AVCodec</li>
<li>width, height: 图形的宽高 (只针对视频)</li>
<li>pix_fmt: 像素格式 (只针对视频)</li>
<li>sample_rare: 采样率 (只针对音频)</li>
<li>channels: 声道数 (只针对音频)</li>
<li>sample_fmt: 采样格式 (只针对音频)</li>
</ul>
</li>
<li><p>AVCodec</p>
<ul>
<li>name: 编解码器名称</li>
<li>long_name: 编解码器长名称</li>
<li>type: 编解码器类型</li>
<li>id: 编解码器ID</li>
<li>一些编解码的接口函数</li>
</ul>
</li>
<li><p>AVPacket</p>
<ul>
<li>pts: 显示时间戳</li>
<li>dts: 解码时间戳</li>
<li>data: 压缩编码数据</li>
<li>size: 压缩编码数据大小</li>
<li>stream_index: 所属的AVStream</li>
</ul>
</li>
<li><p>AVFrame</p>
<ul>
<li>data: 编码后的图像像素数据 (音频采样数据)</li>
<li>linesize: 对视频来说是图像中一行像素的大小;对音频来说是整个音频帧的大小</li>
<li>width, height: 图像的宽高 (只针对视频)</li>
<li>key_frame: 是否为关键帧 (只针对视频)</li>
<li>pict_type: 帧类型 (只针对视频) 例如I, P, B</li>
</ul>
</li>
</ul>
<h4 id="示例程序">示例程序</h4><ul>
<li>位置: <code>FFmpeg-master/doc/examples</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="FFmpeg库简介">FFmpeg库简介</h3><h4 id="FFmpeg一共包含8个库:">FFmpeg一共包含8个库:</h4><ul>
<li><p>avodec: 编解码 (最重要的库)</p>
</li>
<li><p>avformat: 封装格式处理</p>
</li>
<li><p>avfilter: 滤镜特效处理</p>
</li>
<li><p>avdevice: 各种设备的输入输出</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio配置自动生成类的头文件和查看类中方法签名]]></title>
    <link href="http://yoursite.com/2017/08/04/as_javap_javah/"/>
    <id>http://yoursite.com/2017/08/04/as_javap_javah/</id>
    <published>2017-08-04T06:33:37.000Z</published>
    <updated>2017-08-04T13:12:20.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Android_Studio配置自动生成类的头文件以及查看类中方法签名">Android Studio配置自动生成类的头文件以及查看类中方法签名</h3><ul>
<li><p>Android Studio-&gt;Preferences-&gt;Tools-&gt;External Tools</p>
</li>
<li><p>查看项目中类方法签名配置如下</p>
</li>
</ul>
<a id="more"></a>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/Snip20170804_2.png" alt=""></p>
<ul>
<li>查看系统源码中类中方法签名</li>
</ul>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/Snip20170804_android_javap.png" alt=""></p>
<ul>
<li>生成头文件</li>
</ul>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/Snip20170804_javah.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Android_Studio配置自动生成类的头文件以及查看类中方法签名">Android Studio配置自动生成类的头文件以及查看类中方法签名</h3><ul>
<li><p>Android Studio-&gt;Preferences-&gt;Tools-&gt;External Tools</p>
</li>
<li><p>查看项目中类方法签名配置如下</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim使用]]></title>
    <link href="http://yoursite.com/2017/07/26/vim/"/>
    <id>http://yoursite.com/2017/07/26/vim/</id>
    <published>2017-07-26T13:44:23.000Z</published>
    <updated>2017-08-04T06:24:48.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Vim的基本使用">Vim的基本使用</h3><ul>
<li><p>进入编辑模式: <code>i</code></p>
</li>
<li><p>进入命令模式 <code>Esc</code></p>
</li>
<li><p>保存退出 <code>shift zz</code> 或者 <code>Esc退出编辑模式,shift : wq</code></p>
</li>
<li><p>强制退出 <code>shift : q!</code></p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>撤回 <code>u</code> </p>
</li>
<li><p>在命令模式下 <code>x</code> 删除, <code>dd</code> 删除一行</p>
</li>
<li><p>在命令模式下 <code>0</code> 跳到行首</p>
</li>
<li><p>在命令模式下 <code>shift g</code> 跳到文尾</p>
</li>
<li><p>在命令模式下 <code>gg</code> 跳到文首</p>
</li>
<li><p>在命令模式下 <code>w</code> 光标跳到下个字的开头</p>
</li>
<li><p>在命令模式下 <code>e</code> 光标跳到下个字的结尾</p>
</li>
<li><p>在命令模式下 <code>b</code> 光标回到上个字的开头</p>
</li>
</ul>
<h3 id="Vim配置">Vim配置</h3><ul>
<li><p><code>cp /usr/share/vim/vimrc ~/.vimrc</code></p>
</li>
<li><p><code>cd  ~/.vimrc</code></p>
</li>
</ul>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/A159B6EB-9B20-4EB2-A56A-A52FAD84BE32.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Vim的基本使用">Vim的基本使用</h3><ul>
<li><p>进入编辑模式: <code>i</code></p>
</li>
<li><p>进入命令模式 <code>Esc</code></p>
</li>
<li><p>保存退出 <code>shift zz</code> 或者 <code>Esc退出编辑模式,shift : wq</code></p>
</li>
<li><p>强制退出 <code>shift : q!</code></p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用fmod实现QQ变声功能]]></title>
    <link href="http://yoursite.com/2017/07/24/ndk_fmod/"/>
    <id>http://yoursite.com/2017/07/24/ndk_fmod/</id>
    <published>2017-07-24T14:35:06.000Z</published>
    <updated>2017-08-04T15:07:33.000Z</updated>
    <content type="html"><![CDATA[<h3 id="fmod初步使用">fmod初步使用</h3><ul>
<li><p>新建Android工程qq_voicer_change</p>
</li>
<li><p>进入项目根目录新建libs目录,并将fmod example工程中fmod.jar拷贝进去</p>
</li>
<li><p>进入项目根目录新建jni目录,并将fmod example工程中inc整个目录拷贝进去</p>
</li>
<li><p>拷贝fmod example工程中play_sound.cpp、common.h、common.cpp、common_platform.cpp、common_platform.h文件到jni目录</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>拷贝fmod example工程中 MainActivity.java</p>
</li>
<li><p>添加权限 RECORD_AUDIO、WRITE_EXTERNAL_STORAGE</p>
</li>
<li><p>修改System.loadLibrary(“fmodL”)、System.loadLibrary(“fmod”)、System.loadLibrary(“qq_voicer”)</p>
</li>
<li><p>右键项目属性选择”Add Android Native Support” 将项目转为C/C++工程</p>
</li>
<li><p>修改jni目录下的Android.mk文件 LOCAL_MODULE := qq_voicer   LOCAL_SRC_FILES := play_sound.cpp  common_platform.cpp</p>
</li>
<li><p>删掉jni目录下自动生成的qq_voicer_change.cpp文件</p>
</li>
<li><p>build project</p>
</li>
<li><p>修改play_sound.cpp中 <code>#include &quot;fmod.hpp&quot;</code> 为 <code>#include &quot;inc/fmod.hpp&quot;</code>  C++中如果一个文件中既有函数的声明又有函数的实现取名为hpp(.h 与 .cpp的结合)</p>
</li>
<li><p>修改common.h中 <code>#include &quot;fmod.h&quot;</code> 为 <code>#include &quot;inc/fmod.h&quot;</code> </p>
</li>
<li><p>修改common.cpp中 <code>#include &quot;fmod_errors.h&quot;</code> 为 <code>#include &quot;inc/fmod_errors.h&quot;</code> </p>
</li>
<li><p>将libfmod.so和libfmodL.so拷贝到jni目录下 做为预编译的库(编译common_pltform.cpp和play_sound.cpp需要用到其它的函数 这些函数在.so库中,所以这些.so库就成了预编译的库)</p>
</li>
<li><p>修改Android.mk文件</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE := fmod</span><br><span class="line">LOCAL_SRC_FILES := libfmod.so</span><br><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE := fmodL</span><br><span class="line">LOCAL_SRC_FILES := libfmodL.so</span><br><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE    := qq_voicer</span><br><span class="line">LOCAL_SRC_FILES := play_sound.cpp common.cpp common_platform.cpp</span><br><span class="line">LOCAL_SHARED_LIBRARIES := fmod fmodL</span><br><span class="line">LOCAL_LDLIBS := -llog <span class="comment">//添加android log功能</span></span><br><span class="line">LOCAL_CPP_FEATURES := exceptions <span class="comment">//C++支持异常处理 </span></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>
<ul>
<li>修改jni目录下的Application.mk文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">##支持C++异常处理，标准莫板块</span><br><span class="line">APP_STL := gnustl_static</span><br></pre></td></tr></table></figure>
<p>测试<code>effects.cpp</code>功能</p>
<ul>
<li><p>拷贝effects.cpp文件到jni目录,将Android.mk文件中的<code>LOCAL_SRC_FILES := play_sound.cpp</code>改为 <code>LOCAL_SRC_FILES := effects.cpp</code></p>
</li>
<li><p>修改<code>effects.cpp</code>中的<code>#include &quot;fmod.hpp&quot;</code>为<code>#include &quot;inc/fmod.hpp&quot;</code></p>
</li>
</ul>
<p>自定义音效</p>
<ul>
<li>新建QQActivity.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle saveInstanceState)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(saveInstanceState);</span><br><span class="line">        FMOD.init();</span><br><span class="line">        </span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fix</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        String path = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + <span class="string">"test.wav"</span>;</span><br><span class="line">        EffectUtils.fix(path, EffectUtils.MODE_NORMAL);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        FMOD.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>新建EffectUtils.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EffectUtils</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//音效的类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_NORMAL = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_LUOLI = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_DASHU = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_JINGSONG = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_GAOGUAI = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_KONGLING = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//音效处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fix</span><span class="params">(String path, <span class="keyword">int</span> type)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"fmodL"</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">"fmod"</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">"qq_voicer"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>生成EffectUtils对应的头文件并拷贝到jni目录下</p>
</li>
<li><p>jni目录下新建effect_fix.cpp, 将Android.mk文件中的<code>LOCAL_SRC_FILES := effects.cpp</code>改为 <code>LOCAL_SRC_FILES := effect_fix.cpp</code></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "inc/fmod.hpp"</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "org_fmod_example_EffectUtils.h"</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;android/log.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOGI(FORMAT,...) __android_log_print(ANDROID_LOG_INFO,"vobile",FORMAT,##__VA_ARGS__);</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOGE(FORMAT,...) __android_log_print(ANDROID_LOG_ERROR,"vobile",FORMAT,##__VA_ARGS__);</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MODE_NORMAL 0</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MODE_LUOLI 1</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MODE_DASHU 2</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MODE_JINGSONG 3</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MODE_GAOGUAI 4</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> int MODE_KONGLING 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> FMOD;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_org_fmod_example_EffectUtils_fix</span><span class="params">(JNIEnv *env,jclass jcls,jstring path_jstr,jint type)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    System *system;</span><br><span class="line">    Sound *sound;</span><br><span class="line">    Channel *channel;</span><br><span class="line">    DSP *dsp;<span class="comment">//DSP digital signal process</span></span><br><span class="line">    <span class="keyword">bool</span> playing;</span><br><span class="line">    <span class="keyword">float</span> frequency = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//创建System对象并初始化</span></span><br><span class="line">        System_Create(&amp;system);</span><br><span class="line">        system-&gt;init(<span class="number">32</span>, FMOD_INIT_NORMAL, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* path_cstr = env-&gt;GetStringUTFChars(path_jstr,NULL);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//创建声音</span></span><br><span class="line">        system-&gt;createSound(path_cstr, FMOD_DEFAULT, NULL, &amp;sound);</span><br><span class="line">        <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">            <span class="keyword">case</span> MODE_NORMAL:</span><br><span class="line">                <span class="comment">//原生播放</span></span><br><span class="line">                system-&gt;playSound(sound, <span class="number">0</span>, <span class="keyword">false</span>, &amp;channel)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MODE_LUOLI:<span class="comment">//萝莉 提高音频</span></span><br><span class="line">                <span class="comment">//DSP digital signal process</span></span><br><span class="line">                <span class="comment">//dsp -&gt; 音效 创建fmod中预定义好的音效</span></span><br><span class="line">                <span class="comment">//FMOD_DSP_TYPE_PITCHSHIFT 提升或者降低音调的一种音效</span></span><br><span class="line">                system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT,&amp;dsp);</span><br><span class="line">                <span class="comment">//设置音调的参数 </span></span><br><span class="line">                dsp-&gt;setParameterFloat(FMOD_DSP_PITCHSHIFT_PITCH,<span class="number">2.0</span>);</span><br><span class="line">                </span><br><span class="line">                system-&gt;playSound(sound, <span class="number">0</span>, <span class="keyword">false</span>, &amp;channel)<span class="comment">//这里不会真正播放,只有调用了system-&gt;update()之后才开始播放</span></span><br><span class="line">                <span class="comment">//添加到channel</span></span><br><span class="line">                channel-&gt;addDSP(<span class="number">0</span>,dsp);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MODE_DASHU:<span class="comment">//大叔 降低音频</span></span><br><span class="line">                system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT,&amp;dsp);</span><br><span class="line">    </span><br><span class="line">                dsp-&gt;setParameterFloat(FMOD_DSP_PITCHSHIFT_PITCH,<span class="number">0.8</span>);</span><br><span class="line">                </span><br><span class="line">                system-&gt;playSound(sound, <span class="number">0</span>, <span class="keyword">false</span>, &amp;channel)</span><br><span class="line">                </span><br><span class="line">                channel-&gt;addDSP(<span class="number">0</span>,dsp);</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MODE_JINGSONG:<span class="comment">//惊悚</span></span><br><span class="line">                system-&gt;createDSPByType(FMOD_DSP_TYPE_TREMOLO,&amp;dsp);</span><br><span class="line">                dsp-&gt;setParameterFloat(FMOD_DSP_TYPE_SKEW,<span class="number">0.5</span>);</span><br><span class="line">                system-&gt;playSound(sound, <span class="number">0</span>, <span class="keyword">false</span>, &amp;channel)</span><br><span class="line">                </span><br><span class="line">                channel-&gt;addDSP(<span class="number">0</span>,dsp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MODE_GAOGUAI:<span class="comment">//搞怪 频率  提高说话的速度 </span></span><br><span class="line">                system-&gt;playSound(sound, <span class="number">0</span>, <span class="keyword">false</span>, &amp;channel)</span><br><span class="line">                </span><br><span class="line">                channel-&gt;getFrequency(&amp;frequency);</span><br><span class="line">                </span><br><span class="line">                frequency = frequency * <span class="number">1.6</span></span><br><span class="line">                </span><br><span class="line">                channel-&gt;setFrequency(frequency);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MODE_KONGLING:<span class="comment">//空灵</span></span><br><span class="line">                system-&gt;createDSPByType(FMOD_DSP_TYPE_ECHO,&amp;dsp);</span><br><span class="line">                </span><br><span class="line">                dsp-&gt;setParameterFloat(FMOD_DSP_ECHO_DELAY,<span class="number">300</span>);</span><br><span class="line">                dsp-&gt;setParameterFloat(FMOD_DSP_ECHO_FEEDBACK,<span class="number">20</span>);</span><br><span class="line">                </span><br><span class="line">                system-&gt;playSound(sound, <span class="number">0</span>, <span class="keyword">false</span>, &amp;channel)</span><br><span class="line">                </span><br><span class="line">                channel-&gt;addDSP(<span class="number">0</span>,dsp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(...)&#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>,<span class="string">"发生异常"</span>);</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system-&gt;update();<span class="comment">//update之后才真正播放</span></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="comment">//单位是微秒</span></span><br><span class="line">    <span class="comment">//Common_Sleep(5* 1000 * 1000);//需要#include &lt;unistd.h&gt;</span></span><br><span class="line">    <span class="comment">//usleep(5* 1000 * 1000);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//每秒钟判断一下是否播放</span></span><br><span class="line">    <span class="keyword">while</span>(playing)&#123;</span><br><span class="line">        channel-&gt;isPlaying(&amp;playing);</span><br><span class="line">        usleep(<span class="number">1</span>* <span class="number">1000</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">    end:</span><br><span class="line">        env-&gt;ReleaseStringUTFChars(path_jstr,path_cstr);</span><br><span class="line">        sound-&gt;release();</span><br><span class="line">        system-&gt;close();</span><br><span class="line">        system-&gt;release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="fmod初步使用">fmod初步使用</h3><ul>
<li><p>新建Android工程qq_voicer_change</p>
</li>
<li><p>进入项目根目录新建libs目录,并将fmod example工程中fmod.jar拷贝进去</p>
</li>
<li><p>进入项目根目录新建jni目录,并将fmod example工程中inc整个目录拷贝进去</p>
</li>
<li><p>拷贝fmod example工程中play_sound.cpp、common.h、common.cpp、common_platform.cpp、common_platform.h文件到jni目录</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[NDK开发之增量更新]]></title>
    <link href="http://yoursite.com/2017/06/27/android_diff_patch/"/>
    <id>http://yoursite.com/2017/06/27/android_diff_patch/</id>
    <published>2017-06-27T14:23:41.000Z</published>
    <updated>2017-08-04T06:26:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="NDK开发之增量更新-差分包">NDK开发之增量更新-差分包</h2><p>需要使用到的开源项目</p>
<ul>
<li><p><a href="http://7xk9ih.com1.z0.glb.clouddn.com/bsdiff-4.3.tar.gz" target="_blank" rel="external">BsDiff</a> (依赖于 <a href="http://7xk9ih.com1.z0.glb.clouddn.com/bzip2-1.0.6.tar.gz" target="_blank" rel="external">Bzip2</a>)</p>
</li>
<li><p><a href="http://7xk9ih.com1.z0.glb.clouddn.com/bzip2-1.0.6.tar.gz" target="_blank" rel="external">Bzip2</a></p>
</li>
</ul>
<h3 id="Windows下服务端差分">Windows下服务端差分</h3><p>在Microsoft VS中导入 <a href="http://7xk9ih.com1.z0.glb.clouddn.com/bsdiff4.3-win32-src.zip" target="_blank" rel="external">bsdiff4.3-win32-src.zip</a> 源代码(不用拷贝bspatch.c文件)</p>
<ul>
<li><p>使用<a href="http://7xk9ih.com1.z0.glb.clouddn.com/bsdiff4.3-win32-src.zip" target="_blank" rel="external">bsdiff4.3-win32-src.zip</a>代码,生成dll动态库,用于得到差分包</p>
</li>
<li><p>将<a href="http://7xk9ih.com1.z0.glb.clouddn.com/bsdiff4.3-win32-src.zip" target="_blank" rel="external">bsdiff4.3-win32-src.zip</a>下载解压后导入Microsoft VS中,删除bspatch.cpp</p>
</li>
</ul>
<a id="more"></a>
<h4 id="会出现如下错误">会出现如下错误</h4><ul>
<li><p>用了不安全的函数</p>
</li>
<li><p>用了过时的函数</p>
</li>
<li><p>SDL检查</p>
</li>
</ul>
<h4 id="针对以上问题Microsoft_VS中解决方案">针对以上问题Microsoft VS中解决方案</h4><ul>
<li><p>项目右键 属性页 <code>配置属性</code>-&gt;<code>C/C++</code>-&gt;<code>命令行</code>-&gt;<code>-D _CRT_SECURE_NO_WARNINGS -D _CRT_NONSTDC_NO_DEPRECATE</code></p>
</li>
<li><p>修改安全检查: 项目右键 属性页 <code>配置属性</code>-&gt;<code>C/C++</code>-&gt;<code>常规</code>-&gt;<code>SDL检查 选中 否(/sdl-)</code></p>
</li>
</ul>
<h4 id="生成dll动态库">生成dll动态库</h4><ul>
<li><p>项目右键 属性页 <code>配置属性</code>-&gt;<code>常规</code>-&gt;<code>配置类型 选择 动态库(.dll)</code></p>
</li>
<li><p>顶部第二行工具栏 选择Debug选框 <code>配置管理器</code> 中 <code>活动解决方案平台</code> 选择 <code>新建</code> 在弹出的<code>新建解决方案平台</code> 选框中 键入或选择新平台(P): <code>选择x64</code> 从此处复制设置(S): <code>选择Win32</code></p>
</li>
</ul>
<h4 id="仔细阅读源代码,修改bsdiff-cpp原文件">仔细阅读源代码,修改<code>bsdiff.cpp</code>原文件</h4><ul>
<li><code>bsdiff.cpp</code>中的<code>main函数</code>改成 <code>bsdiff_main</code></li>
</ul>
<h4 id="具体操作步骤">具体操作步骤</h4><ul>
<li><p>新建Java Web工程: 工程名为<code>wf_app_update_server</code></p>
</li>
<li><p><code>src</code>下新建<code>BsDiff.java</code>文件,具体代码见下</p>
</li>
<li><p>进入<code>项目src目录</code>: <code>cd /Users/weifeng/Downloads/DiffTest/wf_app_update_server/src</code></p>
</li>
<li><p>生成头文件: <code>javah com.wf.bsdiff.BsDiff</code></p>
</li>
<li><p>将头文件导入到Microsoft VS中: 右侧点击<code>解决方案资源管理器</code> 项目 -&gt; 头文件-&gt; 添加现有项<code>com_wf_bsdiff_BsDiff.h</code> 和 <code>jni.h 以及 jni_md.h</code></p>
</li>
<li><p><code>bsdiff.cpp</code>文件中引入<code>#include &quot;com_wf_bsdiff_BsDiff.h&quot;</code>头文件</p>
</li>
<li><p><code>bsdiff.cpp</code>文件中<code>main</code>函数为bsdiff_main</p>
</li>
<li><p>在<code>bsdiff.cpp</code>文件中实现<code>diff</code>方法</p>
</li>
<li><p>使用Microsoft VS编译生成<code>bsdiff.dll</code>动态库文件拷贝到项目根目录下</p>
</li>
<li><p><code>src</code>下新建<code>BsDiffTest.java</code>文件用来测试并生成差分包,具体代码见下</p>
</li>
</ul>
<h4 id="根据C/C++代码,编写Java层代码,然后生成头文件">根据C/C++代码,编写Java层代码,然后生成头文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BsDiff</span> </span>&#123;</span><br><span class="line">    <span class="comment">//差分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">diff</span><span class="params">(String oldfile, String newfile, String patchfile)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.LoadLibrary(<span class="string">"bsdiff"</span>);<span class="comment">//此处为加载VS生成的bsdiff.dll动态库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BsDiffTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//得到差分包</span></span><br><span class="line">        BsDiff.diff(ConstantsWin.OLD_APK_PATH, ConstantsWin.NEW_APK_PATH, ConstantsWin.PATCH_PATH);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantsWin</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路径不能包含中文</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String OLD_APK_PATH = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NEW_APK_PATH = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATCH_PATH = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写JNI函数,供Java层调用(注意统一编码)</span></span><br><span class="line"><span class="comment">//bsdiff.cpp 实现diff函数</span></span><br><span class="line"><span class="comment">//JNI调用</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_wf_bsdiff_BsDiff_diff</span><span class="params">(JNIEnv *env, jclass jcls, jstring oldfile_jstr, jstring newfile_jstr, jstring patchfile_jstr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> argc = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">char</span>* oldfile = (<span class="keyword">char</span>*)env-&gt;GetStringUTFChars(oldfile_jstr, NULL);</span><br><span class="line">    <span class="keyword">char</span>* newfile = (<span class="keyword">char</span>*)env-&gt;GetStringUTFChars(newfile_jstr, NULL);</span><br><span class="line">    <span class="keyword">char</span>* patchfile = (<span class="keyword">char</span>*)env-&gt;GetStringUTFChars(patchfile_jstr, NULL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//参数(第一个参数无效)</span></span><br><span class="line">    <span class="keyword">char</span> *argv[<span class="number">4</span>];</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">"bsdiff"</span>;</span><br><span class="line">    argv[<span class="number">1</span>] = oldfile;</span><br><span class="line">    argv[<span class="number">2</span>] = newfile;</span><br><span class="line">    argv[<span class="number">3</span>] = patchfile;</span><br><span class="line">    </span><br><span class="line">    bsdiff_main(argc, argv);</span><br><span class="line">    </span><br><span class="line">    env-&gt;ReleaseStringUTFChars(oldfile_jstr, oldfile);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(newfile_jstr, newfile);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(patchfile_jstr, patchfile);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Linux下服务端差分">Linux下服务端差分</h3><ul>
<li><p>新建文件夹bsdiff-linux</p>
</li>
<li><p>copy <code>bzip2-1.0.6</code>文件夹下代码以及<code>bsdiff-4.3</code>文件夹下的<code>bsdiff.c</code>到新建的bsdiff-linux文件夹中</p>
</li>
<li><p>修改<code>bsdiff.c</code>中的<code>main</code>函数为<code>bsdiff_main</code></p>
</li>
<li><p>copy <code>com_wf_bsdiff_BsDiff.h</code> 和 <code>jni.h</code>(需要区分平台,这里需要拷贝Linux下的JDK中的jni.h或者 拷贝 <code>/Users/vobile/Library/Android/sdk/ndk-bundle/platforms/android-24/arch-arm/usr/include/jni.h</code>)头文件到新建的bsdiff-linux文件夹中</p>
</li>
<li><p>在<code>bsdiff.c</code>导入<code>com_wf_bsdiff_BsDiff.h</code>头文件</p>
</li>
<li><p>修改<code>bsdiff.c</code>中的头文件<code>#include &lt;bzlib.h&gt;</code>为<code>#include &quot;bzlib.h&quot;</code></p>
</li>
<li><p>实现bsdiff方法</p>
</li>
<li><p>修改<code>bzip2.c</code>中的main函数为<code>bzip_mian</code></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_wf_bsdiff_BsDiff_diff</span><span class="params">(JNIEnv *env, jclass jcls, jstring oldfile_jstr, jstring newfile_jstr, jstring patchfile_jstr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> argc = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">char</span>* oldfile = (<span class="keyword">char</span>*)(*env)-&gt;GetStringUTFChars(env, oldfile_jstr, NULL);</span><br><span class="line">    <span class="keyword">char</span>* newfile = (<span class="keyword">char</span>*)(*env)-&gt;GetStringUTFChars(env, newfile_jstr, NULL);</span><br><span class="line">    <span class="keyword">char</span>* patchfile = (<span class="keyword">char</span>*)(*env)-&gt;GetStringUTFChars(env, patchfile_jstr, NULL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//参数(第一个参数无效)</span></span><br><span class="line">    <span class="keyword">char</span> *argv[<span class="number">4</span>];</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">"bsdiff"</span>;</span><br><span class="line">    argv[<span class="number">1</span>] = oldfile;</span><br><span class="line">    argv[<span class="number">2</span>] = newfile;</span><br><span class="line">    argv[<span class="number">3</span>] = patchfile;</span><br><span class="line">    </span><br><span class="line">    bsdiff_main(argc, argv);</span><br><span class="line">    </span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(oldfile_jstr, oldfile);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(newfile_jstr, newfile);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(patchfile_jstr, patchfile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>将bsdiff-linux代码上传到Linux服务器并<code>cd</code>到bsdiff-linux下</p>
</li>
<li><p>生成供JNI调用的动态库 执行<code>gcc -fPIC -shared blocksort.c decompress.c bsdiff.c randtable.c bzip2.c huffman.c compress.c bzlib.c crctable.c -o bsdiff.so</code></p>
</li>
<li><p>最后将编译生成的<code>bsdiff.so</code>拷贝到 Java Web工程 根目录下</p>
</li>
</ul>
<h3 id="客户端合并">客户端合并</h3><h4 id="具体操作步骤-1">具体操作步骤</h4><ul>
<li><p>新建Android工程,项目名wf_app_update,实现patch文件下载 </p>
</li>
<li><p>新建jni文件夹</p>
</li>
<li><p>拷贝<code>bsdiff-4.3</code>源码下的<code>bspatch.c</code>以及<code>bzip2-1.0.6</code>源码到jni文件夹下</p>
</li>
<li><p>项目右键<code>Add Android Native Support</code></p>
</li>
<li><p>打开Eclipse首选项属性设置-&gt;C/C++ General-&gt;Path and Symbols-&gt;Includes-&gt;add…添加以下路径</p>
<ul>
<li><code>/Users/weifeng/work/android-sdk-macosx/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/lib/gcc/arm-linux-androideabi/4.9.x/include</code></li>
<li><code>/Users/weifeng/work/android-sdk-macosx/ndk-bundle/toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/lib/gcc/arm-linux-androideabi/4.9.x/include-fixed</code></li>
<li><code>/Users/weifeng/work/android-sdk-macosx/ndk-bundle/platforms/android-18/arch-arm/usr/include</code></li>
</ul>
</li>
<li><p>修改jni目录下的Android.mk文件</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH = $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE    := bspatch</span><br><span class="line">LOCAL_SRC_FILES := bspatch.c</span><br><span class="line"></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>
<ul>
<li><p>新建Java类: BsPatch.java</p>
</li>
<li><p>进入项目src目录: <code>cd /Users/weifeng/Downloads/DiffTest/wf_app_update/src</code></p>
</li>
<li><p>生成头文件: <code>javah com.wf.appupdate.utils.BsPatch</code></p>
</li>
<li><p>将生成的<code>com_wf_appupdate_utils_BsPatch.h</code>剪切到jni目录下</p>
</li>
<li><p>在jni文件夹下的bspatch.c文件中引入<code>#include &quot;com_wf_appupdate_utils_BsPatch.h&quot;</code>头文件</p>
</li>
<li><p>在jni文件夹下的bspatch.c文件中实现patch函数</p>
</li>
<li><p>在jni文件夹下的bspatch.c文件中main函数为bspatch_main</p>
</li>
<li><p>修改jni文件夹下的bspatch.c中<code>#include &lt;bzlib.h&gt;</code> 为 <code>#include &quot;bzip2/bzlib.h&quot;</code></p>
</li>
<li><p>jni文件夹下bspatch.c引入如下头文件</p>
</li>
</ul>
<p><code>#include &quot;bzip2/crctable.c&quot;</code></p>
<p><code>#include &quot;bzip2/compress.c&quot;</code></p>
<p><code>#include &quot;bzip2/decompress.c&quot;</code></p>
<p><code>#include &quot;bzip2/randtable.c&quot;</code></p>
<p><code>#include &quot;bzip2/blocksort.c&quot;</code></p>
<p><code>#include &quot;bzip2/huffman.c&quot;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BsPatch</span> </span>&#123;</span><br><span class="line">    <span class="comment">//合并</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">patch</span><span class="params">(String oldfile, String newfile, String patchfile)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.LoadLibrary(<span class="string">"bspatch"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//合并差分包</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_wf_appupdate_utils_BsPatch_patch</span><span class="params">(JNIEnv *env, jclass jcls, jstring oldfile_jstr, jstring newfile_jstr, jstring patchfile_jstr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> argc = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">char</span>* oldfile = (<span class="keyword">char</span>*)(*env)-&gt;GetStringUTFChars(env, oldfile_jstr, NULL);</span><br><span class="line">    <span class="keyword">char</span>* newfile = (<span class="keyword">char</span>*)(*env)-&gt;GetStringUTFChars(env, newfile_jstr, NULL);</span><br><span class="line">    <span class="keyword">char</span>* patchfile = (<span class="keyword">char</span>*)(*env)-&gt;GetStringUTFChars(env, patchfile_jstr, NULL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//参数(第一个参数无效)</span></span><br><span class="line">    <span class="keyword">char</span> *argv[<span class="number">4</span>];</span><br><span class="line">    argv[<span class="number">0</span>] = <span class="string">"bspatch"</span>;</span><br><span class="line">    argv[<span class="number">1</span>] = oldfile;</span><br><span class="line">    argv[<span class="number">2</span>] = newfile;</span><br><span class="line">    argv[<span class="number">3</span>] = patchfile;</span><br><span class="line">    </span><br><span class="line">    bspatch_main(argc, argv);</span><br><span class="line">    </span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(oldfile_jstr, oldfile);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(newfile_jstr, newfile);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(patchfile_jstr, patchfile);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ApkUtils.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApkUtils</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isInstalled</span><span class="params">(Context context, String packageName)</span> </span>&#123;</span><br><span class="line">        PackageManager pm = context.getPackageManager();</span><br><span class="line">        <span class="keyword">boolean</span> installed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            pm.getPackageInfo(packageName, PackageManager.GET_ACTIVITIES);</span><br><span class="line">            installed = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> installed;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 获取已安装Apk文件的源Apk文件</span><br><span class="line">     * 如：/data/app/my.apk</span><br><span class="line">     * </span><br><span class="line">     * <span class="doctag">@param</span> context</span><br><span class="line">     * <span class="doctag">@param</span> packageName</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSourceApkPath</span><span class="params">(Context context, String packageName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(packageName))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ApplicationInfo appInfo = context.getPackageManager()</span><br><span class="line">                    .getApplicationInfo(packageName, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> appInfo.sourceDir;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 安装Apk</span><br><span class="line">     * </span><br><span class="line">     * <span class="doctag">@param</span> context</span><br><span class="line">     * <span class="doctag">@param</span> apkPath</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">installApk</span><span class="params">(Context context, String apkPath)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">        intent.setDataAndType(Uri.parse(<span class="string">"file://"</span> + apkPath),</span><br><span class="line">                <span class="string">"application/vnd.android.package-archive"</span>);</span><br><span class="line"> </span><br><span class="line">        context.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DownloadUtils.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadUtils</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 下载差分包</span><br><span class="line">     * <span class="doctag">@param</span> url</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     * <span class="doctag">@throws</span> Exception</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> File <span class="title">download</span><span class="params">(String url)</span></span>&#123;</span><br><span class="line">        File file = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file = <span class="keyword">new</span> File(Environment.getExternalStorageDirectory(),Constants.PATCH_FILE);</span><br><span class="line">            <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">                file.delete();</span><br><span class="line">            &#125;</span><br><span class="line">            HttpURLConnection conn = (HttpURLConnection) <span class="keyword">new</span> URL(url).openConnection();</span><br><span class="line">            conn.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">            is = conn.getInputStream();</span><br><span class="line">            os = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                os.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> file;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Constants.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Constants</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATCH_FILE = <span class="string">"apk.patch"</span>;</span><br><span class="line">    <span class="comment">//public static final String URL_PATCH_DOWNLOAD = "http://172.19.167.1:8080/wf_app_update_server/"+PATCH_FILE;</span></span><br><span class="line">    <span class="comment">//linux remote</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_PATCH_DOWNLOAD = <span class="string">"http://www.mobilecode.cn/"</span>+PATCH_FILE;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PACKAGE_NAME = <span class="string">"com.wf.appupdate"</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SD_CARD = Environment.getExternalStorageDirectory() + File.separator;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//新版本apk的目录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NEW_APK_PATH = SD_CARD+<span class="string">"wf_apk_new.apk"</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String PATCH_FILE_PATH = SD_CARD+PATCH_FILE;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MainActivity.java</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">new</span> ApkUpdateTask().execute();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ApkUpdateTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">Void</span>, <span class="title">Void</span>, <span class="title">Boolean</span>&gt;</span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//1.下载差分包</span></span><br><span class="line">                Log.d(<span class="string">"wf"</span>, <span class="string">"开始下载"</span>);</span><br><span class="line">                File patchFile = DownloadUtils.download(Constants.URL_PATCH_DOWNLOAD);</span><br><span class="line">                 </span><br><span class="line">                <span class="comment">//获取当前应用的apk文件/data/app/app</span></span><br><span class="line">                String oldfile = ApkUtils.getSourceApkPath(MainActivity.<span class="keyword">this</span>, getPackageName());</span><br><span class="line">                <span class="comment">//2.合并得到最新版本的APK文件</span></span><br><span class="line">                String newfile = Constants.NEW_APK_PATH;</span><br><span class="line">                String patchfile = patchFile.getAbsolutePath();</span><br><span class="line">                BsPatch.patch(oldfile, newfile, patchfile);</span><br><span class="line">                 </span><br><span class="line">                Log.d(<span class="string">"wf"</span>, <span class="string">"oldfile:"</span>+oldfile);</span><br><span class="line">                Log.d(<span class="string">"wf"</span>, <span class="string">"newfile:"</span>+newfile);</span><br><span class="line">                Log.d(<span class="string">"wf"</span>, <span class="string">"patchfile:"</span>+patchfile);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Boolean result)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onPostExecute(result);</span><br><span class="line">            <span class="comment">//3.安装</span></span><br><span class="line">            <span class="keyword">if</span>(result)&#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"您正在进行无流量更新"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                ApkUtils.installApk(MainActivity.<span class="keyword">this</span>, Constants.NEW_APK_PATH);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="NDK开发之增量更新-差分包">NDK开发之增量更新-差分包</h2><p>需要使用到的开源项目</p>
<ul>
<li><p><a href="http://7xk9ih.com1.z0.glb.clouddn.com/bsdiff-4.3.tar.gz">BsDiff</a> (依赖于 <a href="http://7xk9ih.com1.z0.glb.clouddn.com/bzip2-1.0.6.tar.gz">Bzip2</a>)</p>
</li>
<li><p><a href="http://7xk9ih.com1.z0.glb.clouddn.com/bzip2-1.0.6.tar.gz">Bzip2</a></p>
</li>
</ul>
<h3 id="Windows下服务端差分">Windows下服务端差分</h3><p>在Microsoft VS中导入 <a href="http://7xk9ih.com1.z0.glb.clouddn.com/bsdiff4.3-win32-src.zip">bsdiff4.3-win32-src.zip</a> 源代码(不用拷贝bspatch.c文件)</p>
<ul>
<li><p>使用<a href="http://7xk9ih.com1.z0.glb.clouddn.com/bsdiff4.3-win32-src.zip">bsdiff4.3-win32-src.zip</a>代码,生成dll动态库,用于得到差分包</p>
</li>
<li><p>将<a href="http://7xk9ih.com1.z0.glb.clouddn.com/bsdiff4.3-win32-src.zip">bsdiff4.3-win32-src.zip</a>下载解压后导入Microsoft VS中,删除bspatch.cpp</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[C语言基础]]></title>
    <link href="http://yoursite.com/2017/06/26/c_01/"/>
    <id>http://yoursite.com/2017/06/26/c_01/</id>
    <published>2017-06-26T14:23:41.000Z</published>
    <updated>2017-07-18T09:29:20.000Z</updated>
    <content type="html"><![CDATA[<h3 id="指针类型">指针类型</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">//指针为什么要有类型？</span></span><br><span class="line"><span class="comment">//指针有类型,地址没有类型</span></span><br><span class="line"><span class="comment">//地址只是开始的位置,类型读取到什么位置结束</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">89</span>;</span><br><span class="line">	<span class="comment">//int 类型的指针</span></span><br><span class="line">	<span class="keyword">int</span> *p = &amp;i;</span><br><span class="line">	<span class="keyword">double</span> j = <span class="number">78.9</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//赋值为double类型变量的地址</span></span><br><span class="line">	p = &amp;j;</span><br><span class="line">	<span class="comment">//double 类型长度为8字节</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"double size:%d\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x,%lf\n"</span>,p,*p);<span class="comment">//想通过4字节去读取8字节变量的值,是不行的</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//不断读取用户输入防止程序自动退出 或者使用 system("pause");</span></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="C_语言资源大全中文版"><a href="https://github.com/jobbole/awesome-c-cn#beginner" target="_blank" rel="external">C 语言资源大全中文版</a></h4><h3 id="NULL空指针">NULL空指针</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">9</span>;</span><br><span class="line">	<span class="keyword">int</span> *p = NULL;</span><br><span class="line">	<span class="comment">//p = &amp;i;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//空指针的默认值为0</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,p);</span><br><span class="line">	<span class="comment">//访问内存地址0x000000操作系统不允许</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,*p);</span><br><span class="line">	<span class="comment">//p = 100; //操作系统不允许访问</span></span><br><span class="line">	<span class="comment">//不断读取用户输入防止程序自动退出</span></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多级指针(二级指针)">多级指针(二级指针)</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">//指针保存的是变量的地址,保存的这个变量还可以是一个指针变量</span></span><br><span class="line"><span class="comment">//动态内存分配给二级指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">50</span>;</span><br><span class="line">	<span class="comment">//p1上保存了a的地址</span></span><br><span class="line">	<span class="keyword">int</span> *p1 = &amp;a;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//p2上保存了p1的地址</span></span><br><span class="line">	<span class="keyword">int</span> **p2 = &amp;p1;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//int ***p3 = &amp;p2;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"p1:%#x,p2:%#x\n"</span>,p1,p2);</span><br><span class="line">	**p2 = <span class="number">90</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a);<span class="comment">//90</span></span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="指针的运算">指针的运算</h3><ul>
<li>指针的运算,一般在数组遍历时才有意义,基于数组在内存中线性排列的方式</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//数组在内存中连续存储</span></span><br><span class="line">	<span class="keyword">int</span> ids[] = &#123;<span class="number">78</span>,<span class="number">90</span>,<span class="number">23</span>,<span class="number">65</span>,<span class="number">19</span>&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//数组变量名:ids就是数组的首地址</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,ids);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,&amp;ids);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,&amp;ids[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量</span></span><br><span class="line">	<span class="keyword">int</span> *p = ids;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,*p);<span class="comment">//78</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针的加法</span></span><br><span class="line">	p++;<span class="comment">//p++ 向前移动sizeof(数据类型)个字节</span></span><br><span class="line">	<span class="comment">//p = p + 2;</span></span><br><span class="line">	<span class="comment">//p--;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,*p);<span class="comment">//90</span></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="通过指针给数组赋值">通过指针给数组赋值</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> uids[<span class="number">5</span>];</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//高级写法</span></span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">		uids[i] = i;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//早期版本的写法</span></span><br><span class="line">	<span class="keyword">int</span> *p = uids;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; p &lt; uids + <span class="number">5</span>; p++)&#123;</span><br><span class="line">		*p = i;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"p:%d\n"</span>,*p);<span class="comment">//最后输出0~4</span></span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="函数指针">函数指针</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">//弹窗 </span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;Windows.h&gt; </span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;math.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;time.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msg</span><span class="params">(<span class="keyword">char</span>* msg, <span class="keyword">char</span>* title)</span> </span>&#123;<span class="comment">//字符串用字符指针来表示</span></span><br><span class="line">	MessageBox(<span class="number">0</span>,msg,title,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,msg);<span class="comment">//msg 函数在内存上的地址</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,&amp;msg);<span class="comment">//msg 函数在内存上的地址</span></span><br><span class="line">	<span class="comment">//函数指针</span></span><br><span class="line">    <span class="comment">//int 是函数的返回值,  *fun_p 是函数的指针别名,  (char* msg, char* title) 是函数的参数列表,  msg 是函数名</span></span><br><span class="line">	<span class="keyword">int</span>(*fun_p)(<span class="keyword">char</span>* msg, <span class="keyword">char</span>* title) = msg;</span><br><span class="line">	fun_p(<span class="string">"消息内容"</span>,<span class="string">"标题"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//加法</span></span><br><span class="line">	msg1(add, <span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//减法</span></span><br><span class="line">	msg1(div, <span class="number">50</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> ids[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//初始化随机数发生器,设置种子,种子不一样,产生的随机数才不一样</span></span><br><span class="line">	<span class="comment">//当前时间作为种子  当前距1970年1月1号0时0分的秒数</span></span><br><span class="line">	srand((<span class="keyword">unsigned</span>)time(NULL));</span><br><span class="line">	<span class="keyword">for</span>(; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		ids[i] = rand() % <span class="number">100</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ids[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span>* p = getMinPoniter(ids, <span class="keyword">sizeof</span>(ids) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x,%d\n"</span>,p,*p);</span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//案例: 用随机数生成一个数组,写一个函数查找最小的值,并返回最小数的地址,在主函数中打印出来</span></span><br><span class="line"><span class="keyword">int</span>* getMinPoniter(<span class="keyword">int</span> ids[], <span class="keyword">int</span> len)&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span>* p = &amp;ids[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span>(; i &lt; len; i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(ids[i] &lt; *p)&#123;</span><br><span class="line">			p = &amp;ids[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef int(*func_p)(int a, int b)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//msg1 函数需要传递一个函数指针参数</span></span><br><span class="line"><span class="comment">//类似于Java中的回调函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msg1</span><span class="params">(<span class="keyword">int</span>(*func_p)</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span>, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"执行一段代码...\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"执行另外一个函数...\n"</span>);</span><br><span class="line">	<span class="keyword">int</span> r = func_p(m, n); <span class="comment">//也可以说相当于执行一个回调函数 , 而不需要像Java一样需要一个匿名内部类</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"执行结果: %d\n"</span>,r);</span><br><span class="line">	<span class="comment">//MessageBox(0,"消息","标题",0);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="动态内存分配">动态内存分配</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;Windows.h&gt; </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//堆内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//40M</span></span><br><span class="line">	<span class="comment">//stack overflow错误,栈溢出</span></span><br><span class="line">	<span class="comment">//静态内存分配</span></span><br><span class="line">	<span class="comment">//int a[1024 * 1024 * 10];</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//C语言内存分配:</span></span><br><span class="line">	<span class="comment">//1.栈区(Stack)  Windows下,栈内存分配2M(确定的常数),超出了限制,提示stack overflow错误</span></span><br><span class="line">	<span class="comment">//2.堆区(Heap) 程序员手动分配和释放,堆区可以分配操作系统80%的内存</span></span><br><span class="line">	<span class="comment">//3.全局区或静态区</span></span><br><span class="line">	<span class="comment">//4.字符常量区</span></span><br><span class="line">	<span class="comment">//5.程序代码区</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//在堆内存上,分配40M的内存</span></span><br><span class="line">	<span class="comment">//malloc参数是字节,返回值为void *的任意类型的指针</span></span><br><span class="line">	<span class="keyword">int</span> *p = <span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	<span class="comment">//在堆内存上,分配80M的内存</span></span><br><span class="line">	p = <span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">2</span>);</span><br><span class="line">	<span class="comment">//释放</span></span><br><span class="line">	<span class="comment">//内存泄露(p重新赋值之后,再free,并没有真正释放内存)</span></span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//每隔一秒分配40M内存</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		heapFun();</span><br><span class="line">		stackFun();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//创建一个数组,动态指定数组的大小(在程序运行过程中,可以随意的开辟指定大小的内存,以供使用,就相当于Java中的集合)</span></span><br><span class="line">	<span class="comment">//静态内存分配,分配内存大小是固定的,问题: 1.很容易超出栈内存的最大值 2.往往防止内存不够用会开辟更多的内存,容易浪费内存</span></span><br><span class="line">	<span class="comment">//动态内存分配,在程序运行过程中,动态指定需要使用的内存大小,手动释放,释放之后这些内存还可以重新使用</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//静态内存分配创建数组,数组的大小是固定的</span></span><br><span class="line">	<span class="comment">//int i = 10;</span></span><br><span class="line">	<span class="comment">//int a[i]; //编译失败</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"输入数组的长度:"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//开辟内存,大小len*4字节</span></span><br><span class="line">	<span class="keyword">int</span> *n = <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	<span class="comment">//n是数组的首地址,n就是数组的名称</span></span><br><span class="line">	<span class="comment">//给数组元素赋值(使用这一块刚刚开辟出来的内存区域)</span></span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; i &lt; len; i++)&#123;</span><br><span class="line">		n[i] = rand() % <span class="number">100</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d,%#x\n"</span>,n[i],&amp;n[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//重新分配内存</span></span><br><span class="line">	<span class="keyword">int</span> addLen;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"输入数组增加的长度:"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;addLen);</span><br><span class="line">	<span class="comment">//内存不够用,扩大刚刚分配的内存空间</span></span><br><span class="line">	<span class="comment">//参数 1.原来内存的指针, 参数 2.内存扩大之后的总大小</span></span><br><span class="line">	<span class="keyword">int</span> *p2 = realloc(n, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (len + addLen));</span><br><span class="line">	<span class="keyword">int</span> *p3 = <span class="built_in">calloc</span>(len,<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(p2 == NULL)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"重新分配内存失败!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//重新分配内存的两种情况:</span></span><br><span class="line">	<span class="comment">//缩小,缩小的那一部分数据会丢失</span></span><br><span class="line">	<span class="comment">//扩大,(连续的)</span></span><br><span class="line">	<span class="comment">//1.如果当前内存段后面有需要的内存空间,直接扩展这段内存空间, realloc返回原指针</span></span><br><span class="line">	<span class="comment">//2.如果当前内存段后面的空闲字节不够,那么就使用堆中的第一个能够满足这一要求的内存块,将目前的数据复制到新的位置并将原来的数据块释放掉,返回新的内存地址</span></span><br><span class="line">	<span class="comment">//3.如果申请失败,返回NULL,原来的指针仍然有效</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//重新赋值</span></span><br><span class="line">	i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"-------------------\n"</span>);</span><br><span class="line">	<span class="keyword">for</span>(; i &lt; len + addLen; i++)&#123;</span><br><span class="line">		p2[i] = rand() % <span class="number">200</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//手动释放内存</span></span><br><span class="line">	<span class="keyword">if</span>(n != NULL)&#123;</span><br><span class="line">		<span class="built_in">free</span>(n);</span><br><span class="line">		n = NULL;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(p2 != NULL)&#123;</span><br><span class="line">		<span class="built_in">free</span>(p2);<span class="comment">//1.不能多次释放</span></span><br><span class="line">		p2 = NULL;<span class="comment">//2.释放完之后,给指针置NULL,标志释放完成  3.内存泄露(p2重新赋值之后,再free,并没有真正释放内存)</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p1 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> *p2 = realloc(p1, <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(p2); <span class="comment">//只需要free p2</span></span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//栈内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stackFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">1024</span>];</span><br><span class="line">	<span class="comment">//栈内存自动释放(函数执行完了之后自动释放)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapFun</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//40M内存</span></span><br><span class="line">	<span class="keyword">int</span> *p = <span class="built_in">malloc</span>(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"></span><br><span class="line">	<span class="comment">//释放</span></span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(p !=NULL)&#123;</span><br><span class="line">		p = NULL;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="字符串">字符串</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;Windows.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用字符数组存储字符串</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//char str[] = &#123;'c','h','i','n','a','\0'&#125;; //'\0'代表结束</span></span><br><span class="line">	<span class="comment">//char str[6] = &#123;'c','h','i','n','a'&#125;; //多出来的一个默认就是'\0'</span></span><br><span class="line">	<span class="keyword">char</span> str[<span class="number">10</span>] = <span class="string">"china"</span>;</span><br><span class="line">	<span class="comment">//可以修改</span></span><br><span class="line">	str[<span class="number">0</span>] = <span class="string">'s'</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,str);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,str);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符指针</span></span><br><span class="line">	<span class="comment">//类似数组一样内存连续排列</span></span><br><span class="line">	<span class="keyword">char</span> *str1 = <span class="string">"how are you?"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//错误,不能修改</span></span><br><span class="line">	str1[<span class="number">0</span>] = <span class="string">'w'</span></span><br><span class="line">	str1 +=<span class="number">1</span>;</span><br><span class="line">	<span class="comment">//错误,不能修改</span></span><br><span class="line">	*str1 = <span class="string">'y'</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,str1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,str1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//使用指针加法,截取字符串</span></span><br><span class="line">	str1 += <span class="number">3</span>;</span><br><span class="line">	<span class="keyword">while</span>(*str1)&#123;<span class="comment">//取不到值就是为0</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%c"</span>,*str1);</span><br><span class="line">		str1++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//strcat字符串拼接函数</span></span><br><span class="line">	<span class="comment">//在线API文档</span></span><br><span class="line">	<span class="comment">//http://www.kuqin.com/clib/string/strcpy.html</span></span><br><span class="line">	<span class="keyword">char</span> dest[<span class="number">50</span>];<span class="comment">//静态内存分配</span></span><br><span class="line">	<span class="keyword">char</span> *a = <span class="string">"china"</span>;</span><br><span class="line">	<span class="keyword">char</span> *b = <span class="string">" is powerful!"</span>;</span><br><span class="line">	<span class="built_in">strcpy</span>(dest, a);</span><br><span class="line">	<span class="built_in">strcat</span>(dest, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s\n"</span>, dest);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//strchr在一个串中查找给定字符的第一个匹配之处</span></span><br><span class="line">	<span class="keyword">char</span> *str2 = <span class="string">"I want go to USA"</span>;</span><br><span class="line">	<span class="comment">//U元素的指针</span></span><br><span class="line">	<span class="comment">//str2+3</span></span><br><span class="line">	<span class="keyword">char</span> *p = strchar(str2, <span class="string">'w'</span>);</span><br><span class="line">	<span class="keyword">if</span>(p)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"索引位置:%d\n"</span>, p - str2); <span class="comment">//输出2   p的地址减去str2的首地址</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"没有找到"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//strstr 从字符串haysyack中寻找needle第一次出现的位置</span></span><br><span class="line">	<span class="keyword">char</span> *haystack = <span class="string">"I want go to USA"</span>;</span><br><span class="line">	<span class="keyword">char</span> *needle = <span class="string">"to"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//U元素的指针</span></span><br><span class="line">	<span class="keyword">char</span> *p = <span class="built_in">strstr</span>(haystack, needle);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(p)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"索引位置:%d\n"</span>, p - haystack); <span class="comment">//10</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"没有找到"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="结构体">结构体</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;Windows.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体是一种构造数据类型</span></span><br><span class="line"><span class="comment">//把不同的数据类型整合起来成为一个自定义的数据类型</span></span><br><span class="line"><span class="keyword">struct</span> Man&#123;</span><br><span class="line">	<span class="comment">//成员</span></span><br><span class="line">	<span class="keyword">char</span>* name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">char</span> s[<span class="number">20</span>];</span><br><span class="line">	<span class="comment">//int(*func)();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//初始化结构体的变量</span></span><br><span class="line">	<span class="comment">//1.声明的时候同时赋值</span></span><br><span class="line">	<span class="comment">//struct Man m1 = &#123;"Jack", 21&#125;;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2.</span></span><br><span class="line">	<span class="keyword">struct</span> Man m1;</span><br><span class="line">	m1.age = <span class="number">23</span>;</span><br><span class="line">	m1.name = <span class="string">"Rose"</span>;</span><br><span class="line">	<span class="comment">//m1.s = "rose"; //错误,可使用下面的方式赋值</span></span><br><span class="line">	<span class="built_in">strcpy</span>(m1.s, <span class="string">"rose"</span>);</span><br><span class="line">	<span class="built_in">sprintf</span>(m1.name, <span class="string">"Jason"</span>); <span class="comment">//格式化输出</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//类似JavaScript字面量赋值,只能在变量声明时赋值</span></span><br><span class="line">	<span class="comment">//m1 = &#123;&#125;;//错误</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">struct</span> Man m2 = m1;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s,%d\n"</span>,m1.name,m1.age);</span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体的几种写法</span></span><br><span class="line"><span class="keyword">struct</span> Man&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125; m1, m2 = &#123;<span class="string">"Jack"</span>, <span class="number">20</span>&#125;;  <span class="comment">//m1代表结构体变量的名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef int Age; //取别名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">strcpy</span>(m1.name, <span class="string">"Jack"</span>);</span><br><span class="line">	m1.age = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s,%d\n"</span>,m2.name,m2.age);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//Age a = 8;</span></span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名结构体</span></span><br><span class="line"><span class="comment">//控制结构体变量的个数(限量版结构体),相当于单例</span></span><br><span class="line"><span class="keyword">struct</span>&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> age;	</span><br><span class="line">&#125;m1,m2;  <span class="comment">//可以根据结构体来创建变量,如果取了别名 匿名与否都一样没区别</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体的嵌套</span></span><br><span class="line"><span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Student&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">struct</span> Teacher t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//字面量的方式</span></span><br><span class="line">	<span class="keyword">struct</span> Student s1 = &#123;<span class="string">"Jack"</span>, <span class="number">21</span>, &#123;<span class="string">"Jason"</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">struct</span> Student s1;</span><br><span class="line">	s1.age = <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">strcpy</span>(s1.t.name, <span class="string">"Jason"</span>);</span><br><span class="line"></span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体嵌套二</span></span><br><span class="line"><span class="keyword">struct</span> Student&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">		<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	&#125; t;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">struct</span> Student s1;</span><br><span class="line">	<span class="built_in">strcpy</span>(s1.t.name, <span class="string">"Jason"</span>);</span><br><span class="line">	<span class="comment">//struct Teacher t;</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体与指针</span></span><br><span class="line"><span class="keyword">struct</span> Man&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">struct</span> Man m1 = &#123;<span class="string">"Jack"</span>, <span class="number">30</span>&#125;;</span><br><span class="line">	<span class="comment">//结构体指针</span></span><br><span class="line">	<span class="keyword">struct</span> Man *p = &amp;m1;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s,%d\n"</span>,m1.name, m1.age);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s,%d\n"</span>,(*p).name, (*p).age);</span><br><span class="line">	<span class="comment">//p是指针, "-&gt;" (箭头)是"(*p)"简写形式 </span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s,%d\n"</span>,p-&gt;name, p-&gt;age);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//(*env)-&gt;  "(*env)"是一个二级指针</span></span><br><span class="line"></span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针与结构体数组</span></span><br><span class="line"><span class="keyword">struct</span> Man&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">struct</span> Man mans[] = &#123; &#123;<span class="string">"Jack"</span>, <span class="number">20</span>&#125;,&#123;<span class="string">"Rose"</span>, <span class="number">19</span>&#125; &#125;;</span><br><span class="line">	<span class="comment">//遍历数组</span></span><br><span class="line">	<span class="keyword">struct</span> Man *p = mans;</span><br><span class="line">	<span class="keyword">for</span>(; p &lt; mans + <span class="number">2</span>; p++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s,%d\n"</span>,p-&gt;name, p-&gt;age);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(; i &lt; <span class="number">2</span>; i++)&#123; <span class="comment">//或者写成 i &lt; sizeof(mans) / sizeof(struct Man)</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s,%d\n"</span>,mans[i].name, mans[i].age);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体的大小(字节对齐)</span></span><br><span class="line"><span class="keyword">struct</span> Man&#123;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	<span class="keyword">double</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//结构体变量的大小,必须是最宽基本数据类型的整数倍</span></span><br><span class="line">	<span class="comment">//提示读取消息</span></span><br><span class="line">	<span class="keyword">struct</span> Man m1 = &#123;<span class="number">2</span>, <span class="number">89.0</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%#x,%d\n"</span>,m1, <span class="keyword">sizeof</span>(m1)); <span class="comment">// sizeof(m1) 输出16, 原本应该是12,因为结构体变量的大小(12)要满足被最大的成员变量大小(double是8)整除,所以是16。</span></span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Man&#123;</span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体与动态内存分配</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">struct</span> Man *m_p = (<span class="keyword">struct</span> Man*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Man) * <span class="number">10</span>);</span><br><span class="line">	<span class="keyword">struct</span> Man *p = m_p;</span><br><span class="line">	<span class="comment">//赋值</span></span><br><span class="line">	p-&gt;name = <span class="string">"Jack"</span>;</span><br><span class="line">	p-&gt;age = <span class="number">20</span>;</span><br><span class="line">	p++;</span><br><span class="line">	p-&gt;name = <span class="string">"Rose"</span>;</span><br><span class="line">	p-&gt;age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">struct</span> Man *loop_p = m_p;</span><br><span class="line">	<span class="keyword">for</span>(; loop_p &lt; mans + <span class="number">2</span>; loop_p++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s,%d\n"</span>,p-&gt;name, p-&gt;age);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(m_p);</span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//typedef 类型取别名</span></span><br><span class="line"><span class="comment">//1.在不同的情况下使用不同的别名,不同的名称代表在干不同的事情</span></span><br><span class="line"><span class="comment">//#if defined(__cplusplus)</span></span><br><span class="line"><span class="comment">//typedef _JNIEnv JNIEnv;</span></span><br><span class="line"><span class="comment">//typedef _JavaVM JavaVM;</span></span><br><span class="line"><span class="comment">//typedef int jint //int 类型取别名 为jint</span></span><br><span class="line"><span class="comment">//2.书写简洁</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>* Ap;<span class="comment">//Ap是int类型指针的别名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Age;/Age是<span class="keyword">int</span>类型的别名</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Man&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Man JavaMan;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Man* JM;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体取别名</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Woman&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">int</span> age;	</span><br><span class="line">&#125; W, *WP; <span class="comment">//W 是Woman结构体的别名, WP是Woman结构体指针的别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//简写</span></span><br><span class="line"><span class="comment">//typedef struct Woman W;</span></span><br><span class="line"><span class="comment">//typedef struct Woman* WP;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Age i = <span class="number">50</span>;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">5</span>;</span><br><span class="line">	Ap p = &amp;j;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量</span></span><br><span class="line">	W w1 = &#123;<span class="string">"Rose"</span>, <span class="number">20</span>&#125;;</span><br><span class="line">	<span class="comment">//结构体指针</span></span><br><span class="line">	WP wp1 = &amp;w1;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s,%d\n"</span>,w1.name, w1.age);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s,%d\n"</span>,wp1-&gt;name, wp1-&gt;age);</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体函数指针成员</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Girl&#123;</span><br><span class="line">	<span class="keyword">char</span> *name;</span><br><span class="line">	<span class="keyword">int</span> age;	</span><br><span class="line">	<span class="comment">//函数指针</span></span><br><span class="line">	<span class="keyword">void</span>(*sayHi)(<span class="keyword">char</span>*);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//Girl结构体类似于Java中的类,name和age类似于属性,sayHi类似于方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(<span class="keyword">char</span> *text)</span></span>&#123;</span><br><span class="line">	MessageBox(<span class="number">0</span>,text,<span class="string">"title"</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">struct</span> Girl g1;</span><br><span class="line">	g1.name = <span class="string">"Lucy"</span>;</span><br><span class="line">	g1.age = <span class="number">18</span>;</span><br><span class="line">	g1.sayHi = sayHi;</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> Girl&#123;</span><br><span class="line">	<span class="keyword">char</span> *name;</span><br><span class="line">	<span class="keyword">int</span> age;	</span><br><span class="line">	<span class="comment">//函数指针</span></span><br><span class="line">	<span class="keyword">void</span>(*sayHi)(<span class="keyword">char</span>*);</span><br><span class="line">&#125; Girl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Girl结构体指针取别名GirlP</span></span><br><span class="line"><span class="keyword">typedef</span> Girl* GirlP;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rename</span><span class="params">(GirlP gp1)</span></span>&#123;</span><br><span class="line">	gp1-&gt;name = <span class="string">"Lily"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Girl g1 = &#123;<span class="string">"Lucy"</span>, <span class="number">18</span>, sayHi&#125;;</span><br><span class="line">	g1.sayHi(<span class="string">"Hello"</span>);</span><br><span class="line"></span><br><span class="line">	GirlP gp1= &amp;g1;</span><br><span class="line">	gp1-&gt;sayHi(<span class="string">"Byebye!"</span>);</span><br><span class="line">	<span class="comment">//传递指针,改名</span></span><br><span class="line">	rename(gp1);</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Song&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">char</span> *singer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">struct</span> Song s1;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符串数组赋值,只能在声明时</span></span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">10</span>] = <span class="string">"Happy"</span>;</span><br><span class="line">	<span class="comment">//a = "";  //不能重新赋值</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//可以修改内容</span></span><br><span class="line">	a[<span class="number">0</span>] = <span class="string">"F"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//重新赋值</span></span><br><span class="line">	<span class="built_in">strcpy</span>(a, <span class="string">"Sad"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符指针,可以多次赋值不同字符串</span></span><br><span class="line">	<span class="keyword">char</span> *b = <span class="string">"Friend"</span>;</span><br><span class="line">	b = <span class="string">"Family"</span>;</span><br><span class="line">	b++;</span><br><span class="line">	<span class="comment">//*b = 'H';  //不能修改字符内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> Song&#123;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">	<span class="keyword">char</span> *singer;</span><br><span class="line">&#125; S, *SP;</span><br><span class="line"><span class="comment">//S 结构体变量,SP结构体变量的指针</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;	</span><br><span class="line">	<span class="comment">//结构体变量的成员赋值</span></span><br><span class="line">	<span class="built_in">strcpy</span>(S.name,<span class="string">"Baby"</span>);</span><br><span class="line">	S.singer = <span class="string">"Justin Biber"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//SP指针赋值</span></span><br><span class="line">	SP = &amp;S;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%s,%s\n"</span>,SP-&gt;name,SP-&gt;singer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="联合体(共用体)">联合体(共用体)</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不同类型的变量共同占用一段内存(相互覆盖),联合变量任何时刻只有一个成员存在,节省内存</span></span><br><span class="line"><span class="comment">//联合体变量的大小=最大的成员所占的字节数</span></span><br><span class="line"><span class="comment">//联合体中可以有多种数据类型 -- 有点类似于Java中的泛型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> MyValue&#123;</span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	<span class="keyword">int</span> y;</span><br><span class="line">	<span class="keyword">double</span> z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">union</span> MyValue d1;</span><br><span class="line">	d1.x = <span class="number">90</span>;</span><br><span class="line">	d1.y = <span class="number">100</span>; <span class="comment">//最后一次赋值的有效</span></span><br><span class="line">	<span class="comment">//d1.z = 23.8;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d,%d,%lf\n"</span>,d1.x,d1.y,d1.z);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="枚举">枚举</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//固定的数据</span></span><br><span class="line"><span class="comment">//限定值,保证取值的安全性</span></span><br><span class="line"><span class="keyword">enum</span> Day&#123;</span><br><span class="line">	Monday, <span class="comment">//默认是 Monday = 0;</span></span><br><span class="line">	Tuesday,<span class="comment">//默认是 Tuesday = 1;</span></span><br><span class="line">	Wednesday,<span class="comment">//默认是 Wednesday = 2;</span></span><br><span class="line">	Thursday,</span><br><span class="line">	Friday,</span><br><span class="line">	Saturday,</span><br><span class="line">	Sunday</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="comment">//枚举的值,必须是括号中的值</span></span><br><span class="line">	<span class="keyword">enum</span> Day d = Monday;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x,%d\n"</span>,&amp;d,d);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">enum</span> Day *p = &amp;d;</span><br><span class="line">	<span class="keyword">for</span>(;i &lt; <span class="number">7</span>; i++)&#123;<span class="comment">//枚举成员所在内存是连续的才能这样输出</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%#x,%d\n"</span>,p,*p);</span><br><span class="line">		p++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="IO">IO</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文本文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mian</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> path[] = <span class="string">"/Users/weifeng/Downloads/test.txt"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//或者</span></span><br><span class="line">	<span class="comment">//char *path = "/Users/weifeng/Downloads/test.txt";</span></span><br><span class="line"></span><br><span class="line">	FILE *fp = fopen(path,<span class="string">"r"</span>);</span><br><span class="line">	<span class="keyword">if</span>(fp == NULL)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"文件打开失败..."</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//读取</span></span><br><span class="line">	<span class="keyword">char</span> buff[<span class="number">50</span>];<span class="comment">//缓冲</span></span><br><span class="line">	<span class="keyword">while</span>(fgets(buff,<span class="number">50</span>,fp))&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%s\n"</span>,buff);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//关闭</span></span><br><span class="line">	fclose(fp);</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//写入文本文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *path = <span class="string">"/Users/weifeng/Downloads/test.txt"</span>;</span><br><span class="line">	<span class="comment">//打开</span></span><br><span class="line">	FILE *fp = fopen(path,<span class="string">"w"</span>);</span><br><span class="line">	<span class="keyword">char</span> *text = <span class="string">"Test C File Write\n..."</span></span><br><span class="line">	<span class="built_in">fputs</span>(text,fp);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//关闭</span></span><br><span class="line">	fclose(fp);</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//计算机的文件存储在物理上都是二进制</span></span><br><span class="line"><span class="comment">//文本文件和二进制之分,其实是一个逻辑之分</span></span><br><span class="line"><span class="comment">//C语言读写文本文件与二进制文件的差别仅仅体现在回车换行符上</span></span><br><span class="line"><span class="comment">//写文件时,每遇到一个'\n',会将其转换成'\r\n'(回车换行)</span></span><br><span class="line"><span class="comment">//读文本时,每遇到一个'\r\n',会将其转换成'\n'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文件的复制</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *read_path = <span class="string">"/Users/weifeng/Downloads/QQ.dmg"</span>;</span><br><span class="line">	<span class="keyword">char</span> *write_path = <span class="string">"/Users/weifeng/Downloads/QQ_NEW.dmg"</span>;</span><br><span class="line">	<span class="comment">//读的文件 b字符表示操作二进制文件binary</span></span><br><span class="line">	FILE *read_fp = fopen(read_path,<span class="string">"rb"</span>);</span><br><span class="line">	<span class="comment">//写的文件</span></span><br><span class="line">	FILE *write_fp = fopen(write_path,<span class="string">"wb"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//复制</span></span><br><span class="line">	<span class="keyword">int</span> buff[<span class="number">50</span>];</span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//每次读到的数据长度</span></span><br><span class="line">	<span class="keyword">while</span>((len = fread(buff,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),<span class="number">50</span>,read_fp)) != <span class="number">0</span>)&#123; <span class="comment">//一次读50 * 4个字节</span></span><br><span class="line">		<span class="comment">//将读到的内容写入新的文件</span></span><br><span class="line">		fwrite(buff,<span class="keyword">sizeof</span>(<span class="keyword">int</span>),len,write_fp);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件的大小</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *read_path = <span class="string">"/Users/weifeng/Downloads/QQ.dmg"</span>;</span><br><span class="line">	FILE *fp = fopen(read_path,<span class="string">"rb"</span>);</span><br><span class="line">	<span class="comment">//int fseek( FILE *stream, long offset, int origin );</span></span><br><span class="line">	fseek(fp,<span class="number">0</span>,SEEK_END);<span class="comment">//重新定位流上的文件指针,0代表偏移量</span></span><br><span class="line">	<span class="comment">//返回当前的文件指针,相对于文件开头的位移量</span></span><br><span class="line">	<span class="keyword">long</span> filesize = ftell(fp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,filesize);</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//文本文件加解密</span></span><br><span class="line"><span class="comment">//异或:同为0,不同为1</span></span><br><span class="line"><span class="comment">//加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">crpypt</span><span class="params">(<span class="keyword">char</span> normal_path[],<span class="keyword">char</span> crypt_path[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    FILE *normal_fp = fopen(normal_path, <span class="string">"r"</span>);</span><br><span class="line">    FILE *crypt_fp = fopen(crypt_path, <span class="string">"w"</span>);</span><br><span class="line">    <span class="comment">//一次读取一个字符</span></span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">while</span>((ch = fgetc(normal_fp)) != EOF)&#123;</span><br><span class="line">        <span class="comment">//写入(异或运算)</span></span><br><span class="line">        fputc(ch ^ <span class="number">9</span>,crypt_fp);<span class="comment">//例如 8^9-&gt;1000 ^ 1001 = 0001</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    fclose(normal_fp);</span><br><span class="line">    fclose(crypt_fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrpypt</span><span class="params">(<span class="keyword">char</span> crypt_path[],<span class="keyword">char</span> decrypt_path[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    FILE *normal_fp = fopen(crypt_path, <span class="string">"r"</span>);</span><br><span class="line">    FILE *crypt_fp = fopen(decrypt_path, <span class="string">"w"</span>);</span><br><span class="line">    <span class="comment">//一次读取一个字符</span></span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">while</span>((ch = fgetc(normal_fp)) != EOF)&#123;</span><br><span class="line">        <span class="comment">//写入(异或运算)</span></span><br><span class="line">        fputc(ch ^ <span class="number">9</span>,crypt_fp); <span class="comment">//0001 ^ 1001 = 1000</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    fclose(normal_fp);</span><br><span class="line">    fclose(crypt_fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *normal_path = <span class="string">"/Users/weifeng/Downloads/test.txt"</span>;</span><br><span class="line">    <span class="keyword">char</span> *crypt_path = <span class="string">"/Users/weifeng/Downloads/test_crypt.txt"</span>;</span><br><span class="line">    <span class="keyword">char</span> *decrypt_path = <span class="string">"/Users/weifeng/Downloads/test_decrypt.txt"</span>;</span><br><span class="line">    <span class="comment">//加密</span></span><br><span class="line">    crpypt(normal_path, crypt_path);</span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line">    decrpypt(crypt_path, decrypt_path);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//加密</span></span><br><span class="line">    crpypt(normal_path, crypt_path,<span class="string">"ilovely"</span>);</span><br><span class="line">    <span class="comment">//解密</span></span><br><span class="line">    decrpypt(crypt_path, decrypt_path,<span class="string">"ilovely"</span>);</span><br><span class="line">    </span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二进制文件加解密</span></span><br><span class="line"><span class="comment">//读取二进制文件中的数据时,一个一个字符读取</span></span><br><span class="line"><span class="comment">//密码:ilovely</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">crpypt</span><span class="params">(<span class="keyword">char</span> normal_path[],<span class="keyword">char</span> crypt_path[],<span class="keyword">char</span> password[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    FILE *normal_fp = fopen(normal_path, <span class="string">"rb"</span>);</span><br><span class="line">    FILE *crypt_fp = fopen(crypt_path, <span class="string">"wb"</span>);</span><br><span class="line">    <span class="comment">//一次读取一个字符</span></span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">//循环使用密码中的字母进行异或运算</span></span><br><span class="line">    <span class="keyword">int</span> pwd_len = <span class="built_in">strlen</span>(password);</span><br><span class="line">    <span class="keyword">while</span>((ch = fgetc(normal_fp)) != EOF)&#123;</span><br><span class="line">        <span class="comment">//写入(异或运算)</span></span><br><span class="line">        fputc(ch ^ password[i % pwd_len],crypt_fp);<span class="comment">//例如 8^9-&gt;1000 ^ 1001 = 0001</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    fclose(normal_fp);</span><br><span class="line">    fclose(crypt_fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//解密函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrpypt</span><span class="params">(<span class="keyword">char</span> crypt_path[],<span class="keyword">char</span> decrypt_path[],<span class="keyword">char</span> password[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    FILE *normal_fp = fopen(crypt_path, <span class="string">"rb"</span>);</span><br><span class="line">    FILE *crypt_fp = fopen(decrypt_path, <span class="string">"wb"</span>);</span><br><span class="line">    <span class="comment">//一次读取一个字符</span></span><br><span class="line">    <span class="keyword">int</span> ch;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((ch = fgetc(normal_fp)) != EOF)&#123;</span><br><span class="line">        <span class="comment">//写入(异或运算)</span></span><br><span class="line">        fputc(ch ^ password[i % pwd_len],crypt_fp); <span class="comment">//0001 ^ 1001 = 1000</span></span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    fclose(normal_fp);</span><br><span class="line">    fclose(crypt_fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="C语言执行的流程">C语言执行的流程</h4><ul>
<li>预编译(预处理):为编译做准备工作,完成代码文本的替换工作</li>
<li>编译:形成的目标代码(.obj)</li>
<li>连接:将目标代码与C函数库连接合并,形成最终的可执行文件</li>
<li>执行</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">my.<span class="function">txt</span><br><span class="line"></span><br><span class="line"><span class="title">printf</span><span class="params">("%s\n","I am a little boy!")</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//头文件告诉编译器有这样一个函数,连接器负责找到这个函数的实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="preprocessor">#<span class="keyword">include</span> "my.txt"</span></span><br><span class="line">    </span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//宏定义、宏替换、预编译指令</span></span><br><span class="line">define指令</span><br><span class="line"><span class="number">1.</span>定义标识</span><br><span class="line"><span class="preprocessor">#ifdef __cplusplus 表示支持C++语法</span></span><br><span class="line">防止文件的重复引入</span><br><span class="line"><span class="number">2.</span>定义常数</span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MAX 100</span></span><br><span class="line"><span class="number">3.</span>定义<span class="string">"宏函数"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">com_jni_read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"read\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">com_jni_write</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"write\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//NAME是参数</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> jni(NAME) com_jni_##NAME();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//日志输出</span></span><br><span class="line"><span class="comment">//__VA_ARGS__  可变参数</span></span><br><span class="line"><span class="comment">//## 加2个#代表参数</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOG(FORMAT,...) printf(##FORMAT,__VA_ARGS__);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//日志会有级别</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOG_I(FORMAT,...) printf("INFO:"); printf(##FORMAT,__VA_ARGS__);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//升级版</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOG(LEVEL,FORMAT,...) printf(LEVEL); printf(##FORMAT,__VA_ARGS__);</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOG_I(FORMAT,...) LOG("INFO:",FORMAT,__VA_ARGS__);</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOG_W(FORMAT,...) LOG("WARNING:",FORMAT,__VA_ARGS__);</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOG_E(FORMAT,...) LOG("ERROR:",FORMAT,__VA_ARGS__);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">90</span>;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; MAX)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"比MAX小..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//宏函数</span></span><br><span class="line">    jni(read);<span class="comment">//替换:com_jni_read();</span></span><br><span class="line">    jni(write);</span><br><span class="line">    </span><br><span class="line">    LOG(<span class="string">"%s%d"</span>,<span class="string">"大小:"</span>,<span class="number">89</span>);</span><br><span class="line">    LOG_I(<span class="string">"%s%d"</span>,<span class="string">"大小:"</span>,<span class="number">89</span>);</span><br><span class="line">    <span class="comment">//替换成printf("INFO:"); printf("%s%d","大小:",89);</span></span><br><span class="line">    </span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.h</span><br><span class="line"><span class="comment">//如果没有定义AH,定义AH</span></span><br><span class="line"><span class="preprocessor">#ifndef AH</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> AH</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "B.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printfA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">B.h</span><br><span class="line"><span class="comment">//如果没有定义BH,定义BH</span></span><br><span class="line"><span class="preprocessor">#ifndef BH</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> BH</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "A.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printfB</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A.h</span><br><span class="line"><span class="comment">//上面是老版本编译器是需要那边处理的,新版本可以如下处理,防止嵌套引入</span></span><br><span class="line"><span class="comment">//该头文件只被包含一次,让编译器自动处理循环包含问题</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "B.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printfA</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">B.h</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "A.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printfB</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="JNI(Java_Native_Interface)">JNI(Java Native Interface)</h4><p>Java调用C/C++,或者C/C++调用Java的一套API</p>
<ul>
<li>编写native方法</li>
<li>使用javah命令,生成.h头文件</li>
<li>复制.h头文件到CPP工程中</li>
<li>复制jni.h和jni_md.h文件到CPP工程中</li>
<li>实现.h头文件中声明的函数</li>
<li>生成dll文件</li>
<li>配置dll文件所在目录到环境变量,或者将.dll文件拷贝到项目根目录下//Windows下dll,Linux下用.so</li>
<li>重启Eclipse</li>
</ul>
<p>C的函数名称: Java<em>完整包名</em>完整类名_函数名</p>
<p>静态库和动态库的区别<br>.a   静态库: 生成的文件最后都会包含在.exe文件里面<br>.dll 动态库: 共享代码的方式,可以拷贝.dll文件到其它地方使用,多个程序可以共享. 打包的.exe文件里面不包括.dll文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.jni;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JniTest</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String key = <span class="string">"jason"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Human man = <span class="keyword">new</span> Man();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">9</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> String <span class="title">getStringFromC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getString2FromC</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//访问属性,返回修改之后的属性内容</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">accessField</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">accessStaticField</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">accessMethod</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">accessStaticMethod</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> Date <span class="title">accessConstructor</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">accessNonvirtualMethod</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">chineseChars</span><span class="params">(String in)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">giveArray</span><span class="params">(<span class="keyword">int</span> []array)</span></span>;<span class="comment">//排序</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">int</span>[] getArray(<span class="keyword">int</span> len);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">localRef</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">createGlobalRef</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getGlobalRef</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">deleteGlobalRef</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">cached</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initIds</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//产生指定范围的随机数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRandomInt</span><span class="params">(<span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Random().nextInt(max);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//产生UUID</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUUID</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        String text = getStringFromC();</span><br><span class="line">        System.out.println(text);</span><br><span class="line">        JniTest t = <span class="keyword">new</span> JniTest();</span><br><span class="line">        System.out.println(t.accessField());</span><br><span class="line">        t.human.sayHi();</span><br><span class="line">        t.human.sayHi2();</span><br><span class="line">        t.chineseChars(<span class="string">"测试"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            t.exception(); <span class="comment">//无法捕获到Native发生的异常,需要改成catch(Throwable t)或者使用catch(Error t)才能捕获到错误,此处不是异常因此捕获不到</span></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"发生异常:"</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            t.exception(); </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"发生异常:"</span>+e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//不断的调用cached方法</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            t.cached();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加动态库</span></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"jni_study"</span>);</span><br><span class="line">        initIds();<span class="comment">//初始化全部变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Human"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Man"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi2</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//01.c</span></span><br><span class="line">#include <span class="string">"com_test_jni_JniTest.h"</span></span><br><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数实现</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_test_jni_JniTest_getStringFromC</span><span class="params">(JNIEnv *env, jclass jcls)</span></span>&#123;</span><br><span class="line">    <span class="comment">//打开QQ</span></span><br><span class="line">    <span class="comment">//WinExec("C:\\Program Files (x86)\\Tencent\\QQ\\Bin\\QQScLauncher.exe", 0);</span></span><br><span class="line">    <span class="comment">//在C中</span></span><br><span class="line">    <span class="comment">//JNIEnv 结构体指针,代表Java运行环境,调用Java中的代码</span></span><br><span class="line">    <span class="comment">//env是二级指针</span></span><br><span class="line">    <span class="comment">//将C的字符串转为Java字符串</span></span><br><span class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env,<span class="string">"C String"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//每个native函数,都至少有两个参数(JNIEnv*,jclass或者jobject)</span></span><br><span class="line">    <span class="comment">//当native方法为静态方法时: jclass 代表native方法所属类的class对象(JniTest.class)</span></span><br><span class="line">    <span class="comment">//当native方法为非静态方法时: jobject 代表native方法所属的对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在C++中</span></span><br><span class="line">    <span class="comment">//JNIEnv 在C++中就是一个结构体的别名</span></span><br><span class="line">    <span class="comment">//env在C++中是一个结构体的一级指针</span></span><br><span class="line">    <span class="comment">//return evn-&gt;NewStringUTF("C String");</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_test_jni_JniTest_getString2FromC</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*env)-&gt;NewStringUTF(env,<span class="string">"C String2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.访问非静态属性</span></span><br><span class="line"><span class="comment">//修改属性key</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_test_jni_JniTest_accessField</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    <span class="comment">//jobj是jniTest对象,JniTest.class</span></span><br><span class="line">    jclass cls = (*env)-&gt;GetObjectClass(env, obj);</span><br><span class="line">    <span class="comment">//第三个参数是属性名称,第四个参数是属性签名</span></span><br><span class="line">    jfieldID fid = (*env)-&gt;GetFieldID(env, cls, <span class="string">"key"</span>,<span class="string">"Ljava/lang/String;"</span>);</span><br><span class="line">    <span class="comment">//获取key属性的值Get&lt;Type&gt;Field</span></span><br><span class="line">    jstring jstr = (*env)-&gt;GetObjectField(env, jobj, fid);</span><br><span class="line">    <span class="comment">//jstring转C字符串</span></span><br><span class="line">    <span class="comment">//第三个参数boolean isCopy 是否复制,如果值为JNI_TRUE复制就会新建一个字符串,就不能操作原来的字符串了,此处需要使用JNI_FALSE或者NULL</span></span><br><span class="line">    <span class="comment">//jboolean 指针</span></span><br><span class="line">    jboolean isCopy = NULL;</span><br><span class="line">    <span class="comment">//函数内部复制了,isCopy为JNI_TRUE,没有复制为JNI_FALSE</span></span><br><span class="line">    <span class="comment">//意义: isCopy为JNI_FALSE,c_str和jstr指向的都是同一字符串,不能修改Java字符串</span></span><br><span class="line">    <span class="keyword">char</span> *c_str = (*env)-&gt;GetStringUTFChars(env, jstr, &amp;isCopy);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//拼接得到新的字符串</span></span><br><span class="line">    <span class="keyword">char</span> text[<span class="number">20</span>] = <span class="string">"super "</span>;</span><br><span class="line">    strcat(text,c_str);</span><br><span class="line">    <span class="comment">//C字符串转jstring</span></span><br><span class="line">    jstring new_jstr = (*env)-&gt;NewStringUTF(env, text);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//修改key  Set&lt;Type&gt;Field</span></span><br><span class="line">    (*env)-&gt;SetObjectField(env,jobj,fid,new_jstr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//只要使用了GetStringUTFChars一定要释放</span></span><br><span class="line">    <span class="comment">//释放,JNI中的对象都是由GC去管理的,通知虚拟机去释放</span></span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, jstr, c_str);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> new_jstr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//访问静态属性</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_JniTest_accessStaticField</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    jclass cls = (*env)-&gt;GetObjectClass(env, obj);</span><br><span class="line">    jfieldID fid = (*env)-&gt;GetFieldID(env, cls, <span class="string">"key"</span>,<span class="string">"I;"</span>);</span><br><span class="line">    <span class="comment">//GetStatic&lt;Type&gt;Field</span></span><br><span class="line">    jint count = (*env)-&gt;GetStaticIntField(env, cls, fid);</span><br><span class="line">    count++;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="comment">//SetStatic&lt;Type&gt;Field</span></span><br><span class="line">    (*env)-&gt;setStaticIntField(env, cls, fid, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//访问非静态Java方法</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_JniTest_accessMethod</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    jclass cls = (*env)-&gt;GetObjectClass(env, obj);</span><br><span class="line">    <span class="comment">//javap -s -p 类全名  即可查看该类中成员、属性、方法的类型</span></span><br><span class="line">    jmethodID mid = (*env)-&gt;GetMethodID(env, cls, <span class="string">"getRandomInt"</span>,<span class="string">"(I)I"</span>);</span><br><span class="line">    <span class="comment">//调用方法Call&lt;Type&gt;Method</span></span><br><span class="line">    jint random = (*env)-&gt;CallIntMethod(env, jobj, mid, <span class="number">200</span>);</span><br><span class="line">    printf(<span class="string">"random num:%ld"</span>,random);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问静态方法</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_JniTest_accessStaticMethod</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    jclass cls = (*env)-&gt;GetObjectClass(env, obj);</span><br><span class="line">    jmethodID mid = (*env)-&gt;GetStaticMethodID(env, cls, <span class="string">"getUUID"</span>,<span class="string">"()Ljava/lang/String;"</span>);</span><br><span class="line">    <span class="comment">//CallStatic&lt;Type&gt;Method</span></span><br><span class="line">    jstring uuid = (*env)-&gt;CallStaticObjectMethod(env, cls, mid);</span><br><span class="line">    <span class="comment">//isCopy  JNI_FALSE和NULL代表Java和C操作的是同一个字符串</span></span><br><span class="line">    <span class="keyword">char</span> *uuid_str = (*env)-&gt;GetStringUTFChars(env, uuid, NULL);</span><br><span class="line">    <span class="comment">//拼接</span></span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">100</span>];</span><br><span class="line">    sprintf(filename,<span class="string">"/User/weifeng/Downloads/%s.txt"</span>,uuid_str);</span><br><span class="line">    FILE *fp = fopen(filename,<span class="string">"w"</span>);</span><br><span class="line">    fputs(<span class="string">"i love jason"</span>,fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问构造函数</span></span><br><span class="line"><span class="comment">//使用java.util.Date产生一个当前的时间戳</span></span><br><span class="line"><span class="function">JNIEXPORT jobject JNICALL <span class="title">Java_com_test_jni_JniTest_accessConstructor</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    jclass cls = (*env)-&gt;FindClass(env,<span class="string">"java/util/Date"</span>);</span><br><span class="line">    <span class="comment">//&lt;init&gt;代表构造方法</span></span><br><span class="line">    jmethod constructor_mid = (*env)-&gt;GetMethodID(env, cls, <span class="string">"&lt;init&gt;"</span>,<span class="string">"()V"</span>);</span><br><span class="line">    <span class="comment">//实例化一个Date对象</span></span><br><span class="line">    jobject date_obj = (*env)-&gt;NewObject(env, cls, constructor_mid);</span><br><span class="line">    <span class="comment">//调用getTime方法</span></span><br><span class="line">    jmethodID mid = (*env)-&gt;GetMethodID(env, cls, <span class="string">"getTime"</span>, <span class="string">"()J"</span>);</span><br><span class="line">    jlong time = (*env)-&gt;CallLongMethod(env, date_obj, mid);</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"time:%lld\n"</span>,time);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> date_obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用父类的方法</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_JniTest_accessNonvirtualMethod</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    jclass cls = (*env)-&gt;GetObjectClass(env, obj);</span><br><span class="line">    <span class="comment">//获取man属性(对象)</span></span><br><span class="line">    jfieldID fid = (*env)-&gt;GetFieldId(env, cls, <span class="string">"human"</span>,<span class="string">"Lcom/test/jni/Human;"</span>);</span><br><span class="line">    jobject human_obj = (*env)-&gt;GetObjectField(env, jobj, fid);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//执行sayHi方法</span></span><br><span class="line">    jclass human_cls = (*env)-&gt;FindClass(env, <span class="string">"com/test/jni/Human"</span>);<span class="comment">//注意传父类的名称</span></span><br><span class="line">    jmethodID mid = (*env)-&gt;GetMethodID(env, human_cls, <span class="string">"sayHi"</span>, <span class="string">"()V"</span>);</span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    (*env)-&gt;CallObjectMethod(env, human_obj, mid);</span><br><span class="line">    <span class="comment">//调用父类的方法   CallNonvirtualMethod 调用不覆盖的方法</span></span><br><span class="line">    (*env)-&gt;CallNonvirtualMethod(env, human_obj, human_cls, mid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中文问题</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_test_jni_JniTest_chineseChars</span><span class="params">(JNIEnv *env, jobject jobj, jstring in)</span></span>&#123;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="comment">//char *c_str = (*env)-&gt;GetStringUTFChars(env, in, NULL);</span></span><br><span class="line">    <span class="comment">//printf("%s\n",c_str);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//c-&gt;jstring</span></span><br><span class="line">    <span class="keyword">char</span> *c_str = <span class="string">"测试2"</span>;</span><br><span class="line">    <span class="comment">//char c_str[] = "测试2";</span></span><br><span class="line">    </span><br><span class="line">    jstring jstr = (*env)-&gt;NewStringUTF(env,c_str); <span class="comment">//Java 端调用后会出现乱码</span></span><br><span class="line">    <span class="comment">//执行String(byte bytes[], Stirng charsetName)构造方法需要的条件</span></span><br><span class="line">    <span class="comment">//1.jmethodID</span></span><br><span class="line">    <span class="comment">//2.byte数组</span></span><br><span class="line">    <span class="comment">//3.字符编码</span></span><br><span class="line">    jclass str_cls = (*evn)-&gt;FindClass(env,<span class="string">"java/lang/String"</span>);</span><br><span class="line">    jmethodID constructor_mid = (*env)-&gt;GetMethodID(env, str_cls, <span class="string">"&lt;init&gt;"</span>, <span class="string">"([BLjava/lang/String;)V"</span>);</span><br><span class="line">    <span class="comment">//jByteArray里面是jbyte,而jbyte实际类型是char,一个byte对应一个char</span></span><br><span class="line">    jByteArray bytes = (*env)-&gt;NewByteArray(env, strlen(c_str));</span><br><span class="line">    <span class="comment">//给bytes数组赋值,最后一个参数是字符指针</span></span><br><span class="line">    <span class="comment">//对等于,从c_str这个字符数组,复制到bytes这个字符数组</span></span><br><span class="line">    <span class="comment">//jbyte (对等于)-&gt; char </span></span><br><span class="line">    <span class="comment">//jByteArray (对等于)-&gt; char[]</span></span><br><span class="line">    (*env)-&gt;SetByteArrayRegion(env, bytes, <span class="number">0</span>, strlen(c_str), c_str);</span><br><span class="line">    <span class="comment">//字符编码jstring</span></span><br><span class="line">    jstring charsetName = (*env)-&gt;NewStringUTF(env, <span class="string">"GB2312"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用构造函数,返回编码之后的jstring</span></span><br><span class="line">    <span class="keyword">return</span> (*env)-&gt;NewObject(env, str_cls, constructor_mid, bytes, charsetName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (*a) - (*b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组排序</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_JniTest_giveArray</span><span class="params">(JNIEnv *env, jobject jobj, jintArray arr)</span></span>&#123;</span><br><span class="line">    <span class="comment">//通过jintArray得到jint指针这样就可以得到C中的int数组</span></span><br><span class="line">    <span class="comment">//jintArray -&gt; jint指针 -&gt; c int 数组</span></span><br><span class="line">    jint *elems = (*env)-&gt;GetIntArrayElements(env, arr, NULL);</span><br><span class="line">    printf(<span class="string">"%#x,%#x\n"</span>,&amp;elems, &amp;arr); <span class="comment">//地址值不一样</span></span><br><span class="line">    <span class="comment">//数组的长度</span></span><br><span class="line">    <span class="keyword">int</span> len = (*env)-&gt;GetArrayLength(env, arr);</span><br><span class="line">    <span class="comment">//排序</span></span><br><span class="line">    qsort(elems, len, sizeof(jint), compare);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//同步</span></span><br><span class="line">    <span class="comment">//第四个参数mode</span></span><br><span class="line">    <span class="comment">//0,Java数组进行更新并且是否C/C++数组</span></span><br><span class="line">    <span class="comment">//JNI_ABORT,Java数组不进行更新,但是释放C/C++数组</span></span><br><span class="line">    <span class="comment">//JNI_COMMIT,Java数组进行更新,不释放C/C++数组(函数执行完,数组还是会释放)</span></span><br><span class="line">    (*env)-&gt;ReleaseIntArrayElements(env, arr, elems, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回数组</span></span><br><span class="line"><span class="function">JNIEXPORT jintArray JNICALL <span class="title">Java_com_test_jni_JniTest_getArray</span><span class="params">(JNIEnv *env, jobject jobj, jint len)</span></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个指定大小的数组</span></span><br><span class="line">    jintArray jint_arr = (*env)-&gt;NewIntArray(env, len);</span><br><span class="line">    jint *elems = (*env)-&gt;GetIntArrayElements(env, jint_arr, NULL);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; len; i++)&#123;</span><br><span class="line">        elems[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//同步</span></span><br><span class="line">    (*env)-&gt;ReleaseIntArrayElements(env, jint_arr, elems, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> jint_arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//JNI 引用变量</span></span><br><span class="line"><span class="comment">//引用类型: 局部引用和全局引用</span></span><br><span class="line"><span class="comment">//作用: 在JNI中告知虚拟机何时回收一个JNI变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//局部引用 通过DeleteLocalRef手动释放对象</span></span><br><span class="line"><span class="comment">//1.访问一个很大的Java对象,使用完之后,还要进行复杂的耗时操作</span></span><br><span class="line"><span class="comment">//2.创建了大量的局部引用,占用了太多的内存,而且这些局部引用跟后面的操作没有关联性</span></span><br><span class="line"><span class="comment">//模拟: 循环创建数组</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_JniTest_localRef</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        jclass cls = (*env)-&gt;FindClass(env, <span class="string">"java/util/Date"</span>);</span><br><span class="line">        jmethod constructor_mid = (*env)-&gt;GetMethodID(env, cls, <span class="string">"&lt;init&gt;"</span>,<span class="string">"()V"</span>);</span><br><span class="line">        jobject date_obj = (*env)-&gt;NewObject(env, cls, constructor_mid);</span><br><span class="line">        <span class="comment">//此处省略很多代码...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//不再使用jobject对象了</span></span><br><span class="line">        <span class="comment">//通知垃圾回收器回收这些对象</span></span><br><span class="line">        (*env)-&gt;DeleteLocalRef(env, date_obj);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//此处省略很多代码...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//全局引用</span></span><br><span class="line"><span class="comment">//共享(可以跨多个线程),手动控制内存使用</span></span><br><span class="line">jstring global_str;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_JniTest_createGlobalRef</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    jstring obj = (*env)-&gt;NewStringUTF(env, <span class="string">"jni development is powerful!"</span>);</span><br><span class="line">    global_str = (*env)-&gt;NewGlobalRef(env, obj);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得</span></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_com_test_jni_JniTest_getGlobalRef</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> global_str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_JniTest_deleteGlobalRef</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    (*env)-&gt;DeleteGlobalRef(global_str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弱全局引用</span></span><br><span class="line"><span class="comment">//节省内存,在内存不足时可以释放所引用的对象</span></span><br><span class="line"><span class="comment">//可以引用一个不常用的对象,如果未NULL,临时创建</span></span><br><span class="line"><span class="comment">//创建:NewWeakGlobalRef,销毁:DeleteGlobalWeakRef</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//异常处理</span></span><br><span class="line"><span class="comment">//1.保证Java代码可以运行</span></span><br><span class="line"><span class="comment">//2.补救措施保证C代码继续运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//JNI自己抛出的Throwable异常</span></span><br><span class="line"><span class="comment">//用户通过ThowNew抛出的异常,可以在Java层捕获</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_JniTest_exception</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    jclass cls = (*env)-&gt;GetObjectClass(env, jobj);</span><br><span class="line">    <span class="comment">//没有key2这个属性会抛出异常</span></span><br><span class="line">    jfieldID fid = (*env)-&gt;GetFieldID(env, cls, <span class="string">"key2"</span>, <span class="string">"Ljava/lang/String;"</span>);</span><br><span class="line">    <span class="comment">//检测是否发生Java异常</span></span><br><span class="line">    jthrowable exception = (*env)-&gt;ExceptionOccurred(env);</span><br><span class="line">    <span class="keyword">if</span>(exception != NULL)&#123;</span><br><span class="line">        <span class="comment">//让Java代码可以继续运行 </span></span><br><span class="line">        <span class="comment">//1.在Java端需要使用Throwable 或者 Error才能捕获到错误  </span></span><br><span class="line">        <span class="comment">//或者</span></span><br><span class="line">        <span class="comment">//2.在JNI中使用(*env)-&gt;ExceptionClear(env); 来清除异常</span></span><br><span class="line">        <span class="comment">//清空异常信息</span></span><br><span class="line">        (*env)-&gt;ExceptionClear(env);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//补救措施保证C的代码继续执行</span></span><br><span class="line">        fid = (*env)-&gt;GetFieldID(env, cls, <span class="string">"key"</span>, <span class="string">"Ljava/lang/String;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取属性的值</span></span><br><span class="line">    jstring jstr = (*env)-&gt;GetObjectField(env, jobj, fid);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> *str = (*env)-&gt;GetStringUTFChars(env, jstr, NULL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对比属性值是否合法</span></span><br><span class="line">    <span class="keyword">if</span>(_strcmp(str, <span class="string">"super jason1"</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//人为抛出异常,给Java层处理</span></span><br><span class="line">        jclass newExcCls = (*env)-&gt;FindClass(env, <span class="string">"java/lang/IllegalArgumentException"</span>);</span><br><span class="line">        (*env)-&gt;ThrowNew(env, newExcCls, <span class="string">"key's value is invalid!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//缓存策略</span></span><br><span class="line"><span class="comment">//全局静态变量</span></span><br><span class="line"><span class="comment">//static jfieldID key_id</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_JniTest_cached</span><span class="params">(JNIEnv *env, jobject jobj)</span></span>&#123;</span><br><span class="line">    jclass cls = (*env)-&gt;GetObjectClass(env, jobj);</span><br><span class="line">    <span class="comment">//获取jfieldID只获取一次</span></span><br><span class="line">    <span class="comment">//局部的静态变量,只能在当前作用域里面使用,不能在其他方法中使用,但是其生命周期是整个程序</span></span><br><span class="line">    <span class="keyword">static</span> jfieldID key_id = NULL;</span><br><span class="line">    <span class="keyword">if</span>(key_id == NULL)&#123;</span><br><span class="line">        key_id = = (*env)-&gt;GetFieldID(env, cls, <span class="string">"key"</span>, <span class="string">"Ljava/lang/String;"</span>);</span><br><span class="line">        printf(<span class="string">"---------GetFieldID---------\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化全局变量,动态库加载完成之后,立刻缓存起来</span></span><br><span class="line">jfieldID key_fid;</span><br><span class="line">jmethodID random_mid;</span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_JniTest_initIds</span><span class="params">(JNIEnv *env, jclass jcls)</span></span>&#123;</span><br><span class="line">    <span class="comment">//没有key2这个属性会抛出异常</span></span><br><span class="line">    key_fid = (*env)-&gt;GetFieldID(env, jcls, <span class="string">"key"</span>, <span class="string">"Ljava/lang/String;"</span>);</span><br><span class="line">    random_mid = (*env)-&gt;GetMethodID(env, cls, <span class="string">"getRandomInt"</span>,<span class="string">"(I)I"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Android.mk</span><br><span class="line">LOCAL_PATH = $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE    := ndk_file_path</span><br><span class="line">LOCAL_SRC_FILES := ndk_file_path.c</span><br><span class="line">LOCAL_LDLIBS    := -llog</span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String SD_CARD_PATH;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle saveInstanceState)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(saveInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">    SD_CARD_PATH = Environment.getExternalStorageDirectory.getAbsolutePath();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mDiff</span><span class="params">(View btn)</span></span>&#123;</span><br><span class="line">    String path = SD_CARD_PATH + File.separatorChar + <span class="string">"test.mp4"</span>;</span><br><span class="line">    String path_pattern = SD_CARD_PATH + File.separatorChar + <span class="string">"test_%d.mp4"</span>;</span><br><span class="line">    NDKFileUtils.diff(path, path_pattern, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mPatch</span><span class="params">(View btn)</span></span>&#123;</span><br><span class="line">    String path_pattern = SD_CARD_PATH + File.separatorChar + <span class="string">"test_%d.mp4"</span>;</span><br><span class="line">    String merge_pattern = SD_CARD_PATH + File.separatorChar + <span class="string">"test_%d.mp4"</span>;</span><br><span class="line">    NDKFileUtils.path(path_pattern, <span class="number">3</span>, merge_pattern);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NDKFileUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//拆分</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">diff</span><span class="params">(String path, String path_pattern, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">path</span><span class="params">(String path, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"ndk_file_path"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">#include &lt;jni.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;android/log.h&gt;</span><br><span class="line"></span><br><span class="line">#<span class="function">define <span class="title">LOGI</span><span class="params">(FORMAT,...)</span> <span class="title">__android_log_print</span><span class="params">(ANDROID_LOG_INFO, <span class="string">"jason"</span>, FORMAT, __VA_ARGS__)</span></span>;</span><br><span class="line">#<span class="function">define <span class="title">LOGE</span><span class="params">(FORMAT,...)</span> <span class="title">__android_log_print</span><span class="params">(ANDROID_LOG_ERROR, <span class="string">"jason"</span>, FORMAT, __VA_ARGS__)</span></span>;</span><br><span class="line"><span class="comment">//文件拆分</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_NDKFileUtils_diff</span><span class="params">(JNIEnv *env, jclass jcls, jstring path_jstr, jstring path_pattern_jstr,jint file_num)</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要分割的文件路径</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* path = (*env)-&gt;GetStringUTFChars(env, path_jstr, NULL);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* path_pattern = (*env)-&gt;GetStringUTFChars(env, path_pattern_jstr, NULL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//得到分隔之后的文件的路径</span></span><br><span class="line">    <span class="keyword">char</span> **patches = malloc(sizeof(<span class="keyword">char</span>*) * file_num);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; file_num; i++)&#123;</span><br><span class="line">        patches[i] = malloc(sizeof(<span class="keyword">char</span>) * <span class="number">100</span>);</span><br><span class="line">        <span class="comment">//元素赋值</span></span><br><span class="line">        <span class="comment">//需要分割的文件: /Users/weifeng/Downloads/liuyan.png</span></span><br><span class="line">        <span class="comment">//子文件: /Users/weifeng/Downloads/liuyan_%d.png</span></span><br><span class="line">        <span class="comment">//sprintf(patches[i], path_pattern, (i+1));</span></span><br><span class="line">        <span class="comment">//LOGI("patch path:%s", patches[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不断读取path文件,循环写入file_num文件中</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//整除</span></span><br><span class="line">    <span class="comment">//文件大小: 90,分成9个文件,每个文件10</span></span><br><span class="line">    <span class="comment">//不整除</span></span><br><span class="line">    <span class="comment">//文件大小: 110,分成9个文件</span></span><br><span class="line">    <span class="comment">//前(9-1)个文件为(110/(9-1))=13</span></span><br><span class="line">    <span class="comment">//最后一个文件(110%(9-1))=6</span></span><br><span class="line">    <span class="keyword">int</span> filesize = get_file_size(path);</span><br><span class="line">    FILE *fpr = fopen(path,<span class="string">"rb"</span>);</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//整除</span></span><br><span class="line">    <span class="keyword">if</span>(filesize % file_num == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//每个文件大小</span></span><br><span class="line">        <span class="keyword">int</span> part = filesize / file_num;</span><br><span class="line">        <span class="comment">//逐一写入不同的分割子文件中</span></span><br><span class="line">        <span class="keyword">for</span>(; i &lt; file_num; i++)&#123;</span><br><span class="line">            FILE *fpw = fopen(patches[i], <span class="string">"wb"</span>);</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(; j &lt; part; j++)&#123;</span><br><span class="line">                <span class="comment">//边读边写</span></span><br><span class="line">                fputc(fgetc(fpr), fpw);</span><br><span class="line">            &#125;</span><br><span class="line">            fclose(fpw);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//不整除</span></span><br><span class="line">        <span class="keyword">int</span> part = filesize / (file_num -<span class="number">1</span>);</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//逐一写入不同的分割子文件中</span></span><br><span class="line">        <span class="keyword">for</span>(; i &lt; file_num - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            FILE *fpw = fopen(patches[i], <span class="string">"wb"</span>);</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(; j &lt; part; j++)&#123;</span><br><span class="line">                <span class="comment">//边读边写</span></span><br><span class="line">                fputc(fgetc(fpr), fpw);</span><br><span class="line">            &#125;</span><br><span class="line">            fclose(fpw);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最后一个</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(filesize % (file_num - <span class="number">1</span>) != <span class="number">0</span>)&#123;</span><br><span class="line">            FILE *fpw = fopen(patches[file_num - <span class="number">1</span>], <span class="string">"wb"</span>);</span><br><span class="line">            i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(; i &lt; filesize % (file_num - <span class="number">1</span>); i++)&#123;</span><br><span class="line">                fputc(fgetc(fpr), fpw);</span><br><span class="line">            &#125;</span><br><span class="line">            fclose(fpw); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭被分割的文件</span></span><br><span class="line">    fclose(fpr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; file_num; i++)&#123;</span><br><span class="line">        free(patches[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    free(patches);</span><br><span class="line">    </span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, path_jstr, path);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, path_pattern_jstr, path_pattern);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_file_size</span><span class="params">(<span class="keyword">char</span> *path)</span></span>&#123;</span><br><span class="line">    FILE *fp = fopen(path,<span class="string">"rb"</span>);</span><br><span class="line">    <span class="comment">//int fseek( FILE *stream, long offset, int origin );</span></span><br><span class="line">    fseek(fp,<span class="number">0</span>,SEEK_END);<span class="comment">//重新定位流上的文件指针,0代表偏移量</span></span><br><span class="line">    <span class="comment">//返回当前的文件指针,相对于文件开头的位移量</span></span><br><span class="line">    <span class="keyword">long</span> filesize = ftell(fp);</span><br><span class="line">    <span class="keyword">return</span> filesize</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//文件合并</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_com_test_jni_NDKFileUtils_patch</span><span class="params">(JNIEnv *env, jclass jcls, jstring path_pattern_jstr, jint file_num, jstring merge_path_jstr)</span></span>&#123;</span><br><span class="line">    <span class="comment">//合并之后的文件</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* merge_path = (*env)-&gt;GetStringUTFChars(env, merge_path_jstr, NULL);</span><br><span class="line">    <span class="comment">//分割子文件的pattern</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* path_pattern = (*env)-&gt;GetStringUTFChars(env, path_pattern_jstr, NULL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//得到分隔之后的文件的路径</span></span><br><span class="line">    <span class="keyword">char</span> **patches = malloc(sizeof(<span class="keyword">char</span>*) * file_num);</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; file_num; i++)&#123;</span><br><span class="line">        patches[i] = malloc(sizeof(<span class="keyword">char</span>) * <span class="number">100</span>);</span><br><span class="line">        <span class="comment">//元素赋值</span></span><br><span class="line">        <span class="comment">//需要分割的文件: /Users/weifeng/Downloads/liuyan.png</span></span><br><span class="line">        <span class="comment">//子文件: /Users/weifeng/Downloads/liuyan_%d.png</span></span><br><span class="line">        <span class="comment">//sprintf(patches[i], path_pattern, (i+1));</span></span><br><span class="line">        <span class="comment">//LOGI("patch path:%s", patches[i]);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    FILE * fpw = fopen(merge_path, <span class="string">"wb"</span>);</span><br><span class="line">    <span class="comment">//将所有的分割文件读取一遍,写入一个总的文件中</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; file_num; i++)&#123;</span><br><span class="line">        <span class="comment">//每个子文件的大小</span></span><br><span class="line">        <span class="comment">//此处需要验证patches[i]文件是否存在</span></span><br><span class="line">        <span class="keyword">int</span> filesize = get_file_size(patches[i]);</span><br><span class="line">        FILE *fpr = fopen(patches[i], <span class="string">"rb"</span>);</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; j &lt; filesize; j++)&#123;</span><br><span class="line">            fputc(fgetc(fpr), fpw);</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(fpr);</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(fpw);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; file_num; i++)&#123;</span><br><span class="line">        free(patches[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    free(patches);</span><br><span class="line">    </span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, merge_path_jstr, merge_path);</span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, path_pattern_jstr, path_pattern);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用javah命令生成头文件<code>javah com.test.jni_JniTest</code></li>
</ul>
<ul>
<li>查看Mac上jdk安装路径: <code>/usr/libexec/java_home -V</code></li>
</ul>
<ul>
<li>新建C工程,将生成的<code>com.test.jni_JniTest.h</code>头文件拷贝到C工程中</li>
</ul>
<ul>
<li>拷贝<code>com.test.jni_JniTest.h</code>头文件缺失的<code>jni.h</code> 和 <code>jni_md.h</code>头文件到C工程中</li>
</ul>
<ul>
<li><code>jni.h</code>所在路径:<code>/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/include/jni.h</code></li>
</ul>
<ul>
<li><code>jni_md.h</code>所在路径:<code>/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home/include/darwin/jni_md.h</code></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JNIEnv 是结构的体指针别名</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> JNINativeInterface_* JNIEnv;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="keyword">struct</span> JNINativeInterface_ &#123;</span><br><span class="line">    <span class="keyword">char</span>* (*NewStringUTF)(JNIEnv*,<span class="keyword">char</span>*);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数实现</span></span><br><span class="line"><span class="keyword">char</span>* NewStringUTF(JNIEnv* env, <span class="keyword">char</span>* str)&#123;</span><br><span class="line">    <span class="comment">//在NewStringUTF执行过程中,仍然需要JNIEnv,C++为什么没有传?是因为它能够拿到this</span></span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//实例化结构体</span></span><br><span class="line">    <span class="keyword">struct</span> JNINativeInterface_ struct_env;</span><br><span class="line">    </span><br><span class="line">    struct_env.NewStringUTF = NewStringUTF;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//结构体指针</span></span><br><span class="line">    JNIEnv e = &amp;struct_evn;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//结构体的二级指针</span></span><br><span class="line">    JNIEnv *env = &amp;e;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通过二级指针调用函数</span></span><br><span class="line">    <span class="keyword">char</span>* str = (*env)-&gt;NewStringUTF(env,<span class="string">"abc"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="JNI数据类型">JNI数据类型</h4><p>Java基本数据类型与JNI数据类型的映射关系</p>
<p>Java类型-&gt;JNI类型-&gt;C类型</p>
<ul>
<li>基本数据类型:</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">定义C中的数据类型      Java中的类型     JNI类型</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint8_t</span>     boolean         jboolean</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int8_t</span>      byte            jbyte</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint16_t</span>    <span class="keyword">char</span>            jchar</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int16_t</span>     <span class="keyword">short</span>           jshort</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int32_t</span>     <span class="keyword">int</span>             jint</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int64_t</span>     <span class="keyword">long</span>            jlong</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">float</span>       <span class="keyword">float</span>           jfloat</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span>      <span class="keyword">double</span>          jdouble</span><br><span class="line"><span class="keyword">typedef</span>             <span class="keyword">void</span>            <span class="keyword">void</span></span><br></pre></td></tr></table></figure>
<ul>
<li>引用数据类型(对象):</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Java中的类型         JNI类型</span><br><span class="line">String              jstring</span><br><span class="line">object              jobject</span><br><span class="line">byte[]              jByteArray    <span class="comment">//数组,基本数据类型的数组</span></span><br><span class="line">object[](String[])  jobjectArray  <span class="comment">//对象数组</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="指针类型">指针类型</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">//指针为什么要有类型？</span></span><br><span class="line"><span class="comment">//指针有类型,地址没有类型</span></span><br><span class="line"><span class="comment">//地址只是开始的位置,类型读取到什么位置结束</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">89</span>;</span><br><span class="line">	<span class="comment">//int 类型的指针</span></span><br><span class="line">	<span class="keyword">int</span> *p = &amp;i;</span><br><span class="line">	<span class="keyword">double</span> j = <span class="number">78.9</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//赋值为double类型变量的地址</span></span><br><span class="line">	p = &amp;j;</span><br><span class="line">	<span class="comment">//double 类型长度为8字节</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"double size:%d\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">double</span>));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%#x,%lf\n"</span>,p,*p);<span class="comment">//想通过4字节去读取8字节变量的值,是不行的</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//不断读取用户输入防止程序自动退出 或者使用 system("pause");</span></span><br><span class="line">	getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java算法]]></title>
    <link href="http://yoursite.com/2017/06/21/java_review_5/"/>
    <id>http://yoursite.com/2017/06/21/java_review_5/</id>
    <published>2017-06-21T15:43:10.000Z</published>
    <updated>2017-06-21T15:45:31.000Z</updated>
    <content type="html"><![CDATA[<h4 id="冒泡排序">冒泡排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * 冒泡排序</span><br><span class="line"> * 比较相邻的元素。如果第一个比第二个大，就交换他们两个。  </span><br><span class="line"> * 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。  </span><br><span class="line"> * 针对所有的元素重复以上的步骤，除了最后一个。</span><br><span class="line"> * 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 </span><br><span class="line"> * @param numbers 需要排序的整型数组</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> size = numbers.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size-<span class="number">1</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; size-<span class="number">1</span>-i ; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[j] &gt; numbers[j+<span class="number">1</span>])  <span class="comment">//交换两数位置</span></span><br><span class="line">        &#123;</span><br><span class="line">        temp = numbers[j];</span><br><span class="line">        numbers[j] = numbers[j+<span class="number">1</span>];</span><br><span class="line">        numbers[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="快速排序">快速排序</h4><p>把整个序列看做一个数组,把第零个位置看做中轴,和最后一个比,如果比它小交换,比它大不做任何处理;交换了以后再和小的那端比,比它小不交换,比他大交换。这样循环往复,一趟排序完成,左边就是比中轴小的,右边就是比中轴大的,然后再用分治法,分别对这两个独立的数组进行排序.</p>
<p>代码实现如下:</p>
<p>查找中轴(最低位作为中轴)所在位置:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 查找出中轴（默认是最低位low）的在numbers数组排序后所在位置</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@param</span> numbers 带查找数组</span><br><span class="line"> * <span class="doctag">@param</span> low   开始位置</span><br><span class="line"> * <span class="doctag">@param</span> high  结束位置</span><br><span class="line"> * <span class="doctag">@return</span>  中轴所在位置</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMiddle</span><span class="params">(<span class="keyword">int</span>[] numbers, <span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = numbers[low]; <span class="comment">//数组的第一个作为中轴</span></span><br><span class="line">    <span class="keyword">while</span>(low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">while</span>(low &lt; high &amp;&amp; numbers[high] &gt; temp)</span><br><span class="line">    &#123;</span><br><span class="line">        high--;</span><br><span class="line">    &#125;</span><br><span class="line">    numbers[low] = numbers[high];<span class="comment">//比中轴小的记录移到低端</span></span><br><span class="line">    <span class="keyword">while</span>(low &lt; high &amp;&amp; numbers[low] &lt; temp)</span><br><span class="line">    &#123;</span><br><span class="line">        low++;</span><br><span class="line">    &#125;</span><br><span class="line">    numbers[high] = numbers[low] ; <span class="comment">//比中轴大的记录移到高端</span></span><br><span class="line">    &#125;</span><br><span class="line">    numbers[low] = temp ; <span class="comment">//中轴记录到尾</span></span><br><span class="line">    <span class="keyword">return</span> low ; <span class="comment">// 返回中轴的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>递归形式的分治排序算法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * </span><br><span class="line"> * <span class="doctag">@param</span> numbers 带排序数组</span><br><span class="line"> * <span class="doctag">@param</span> low  开始位置</span><br><span class="line"> * <span class="doctag">@param</span> high 结束位置</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] numbers,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(low &lt; high)</span><br><span class="line">    &#123;</span><br><span class="line">    　　<span class="keyword">int</span> middle = getMiddle(numbers,low,high); <span class="comment">//将numbers数组进行一分为二</span></span><br><span class="line">    　　quickSort(numbers, low, middle-<span class="number">1</span>);   <span class="comment">//对低字段表进行递归排序</span></span><br><span class="line">    　　quickSort(numbers, middle+<span class="number">1</span>, high); <span class="comment">//对高字段表进行递归排序</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>快速排序提供方法调用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 快速排序</span><br><span class="line"> * <span class="doctag">@param</span> numbers 带排序数组</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quick</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(numbers.length &gt; <span class="number">0</span>)   <span class="comment">//查看数组是否为空</span></span><br><span class="line">    &#123;</span><br><span class="line">    quickSort(numbers, <span class="number">0</span>, numbers.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="选择排序">选择排序</h4><ul>
<li>基本思想:在要排序的一组数中,选出最小的一个数与第一个位置的数交换;然后在剩下的数当中再找最小的与第二个位置的数交换,如此循环到倒数第二个数和最后一个数比较为止.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * 选择排序算法</span><br><span class="line"> * 在未排序序列中找到最小元素，存放到排序序列的起始位置  </span><br><span class="line"> * 再从剩余未排序元素中继续寻找最小元素，然后放到排序序列末尾。 </span><br><span class="line"> * 以此类推，直到所有元素均排序完毕。 </span><br><span class="line"> * <span class="doctag">@param</span> numbers</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span><br><span class="line"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = numbers.length; <span class="comment">//数组长度</span></span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span> ; <span class="comment">//中间变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> k = i;   <span class="comment">//待确定的位置</span></span><br><span class="line">    <span class="comment">//选择出应该在第i个位置的数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = size -<span class="number">1</span> ; j &gt; i ; j--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">if</span>(numbers[j] &lt; numbers[k])</span><br><span class="line">    &#123;</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//交换两个数</span></span><br><span class="line">    temp = numbers[i];</span><br><span class="line">    numbers[i] = numbers[k];</span><br><span class="line">    numbers[k] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="插入排序">插入排序</h4><ul>
<li>基本思想:每步将一个待排序的记录,按其顺序码大小插入到前面已经排序的字序列的合适位置(从后向前找到合适位置后),直到全部插入排序完为止。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span><br><span class="line"> * 插入排序</span><br><span class="line"> * </span><br><span class="line"> * 从第一个元素开始，该元素可以认为已经被排序</span><br><span class="line"> * 取出下一个元素，在已经排序的元素序列中从后向前扫描 </span><br><span class="line"> * 如果该元素（已排序）大于新元素，将该元素移到下一位置  </span><br><span class="line"> * 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置  </span><br><span class="line"> * 将新元素插入到该位置中  </span><br><span class="line"> * 重复步骤2  </span><br><span class="line"> * <span class="doctag">@param</span> numbers  待排序数组</span><br><span class="line"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span><br><span class="line"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = numbers.length;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span> ;</span><br><span class="line"><span class="keyword">int</span> j =  <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size ; i++)</span><br><span class="line">&#123;</span><br><span class="line">    temp = numbers[i];</span><br><span class="line">    <span class="comment">//假如temp比前面的值小，则将前面的值后移</span></span><br><span class="line">    <span class="keyword">for</span>(j = i ; j &gt; <span class="number">0</span> &amp;&amp; temp &lt; numbers[j-<span class="number">1</span>] ; j --)</span><br><span class="line">    &#123;</span><br><span class="line">    numbers[j] = numbers[j-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    numbers[j] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="冒泡排序">冒泡排序</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span><br><span class="line"> * 冒泡排序</span><br><span class="line"> * 比较相邻的元素。如果第一个比第二个大，就交换他们两个。  </span><br><span class="line"> * 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。在这一点，最后的元素应该会是最大的数。  </span><br><span class="line"> * 针对所有的元素重复以上的步骤，除了最后一个。</span><br><span class="line"> * 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。 </span><br><span class="line"> * @param numbers 需要排序的整型数组</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] numbers)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> size = numbers.length;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; size-<span class="number">1</span>; i ++)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span> ;j &lt; size-<span class="number">1</span>-i ; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(numbers[j] &gt; numbers[j+<span class="number">1</span>])  <span class="comment">//交换两数位置</span></span><br><span class="line">        &#123;</span><br><span class="line">        temp = numbers[j];</span><br><span class="line">        numbers[j] = numbers[j+<span class="number">1</span>];</span><br><span class="line">        numbers[j+<span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java面试基础题]]></title>
    <link href="http://yoursite.com/2017/06/21/java_review_4/"/>
    <id>http://yoursite.com/2017/06/21/java_review_4/</id>
    <published>2017-06-21T15:42:04.000Z</published>
    <updated>2017-06-21T15:42:57.000Z</updated>
    <content type="html"><![CDATA[<h3 id="子类能否重写父类的静态方法">子类能否重写父类的静态方法</h3><ul>
<li><p>所谓静态就是指:在编译之后所分配的内存会一直存在(不会被回收),直到程序退出内存才会释放这个空间.因为静态方法从程序开始运行后就已经分配了内存,也就是说已经写死了.所有引用到该方法的对象(父类的对象也好子类的对象也好)所指向的都是同一块内存中的数据,也就是该静态方法.子类中如果定义了相同名称的静态方法,并不会重写,而应该是在内存中又分配了一块给子类的静态方法,没有重写这一说。</p>
</li>
<li><p>静态方法属于静态绑定,在编译阶段已经确定函数名和地址,静态方法当然是可以被继承的,但是却不能被重写,为什么?<br>因为重写的意思是重新定义父类的虚函数,但是虚函数是动态绑定的,而静态方法是静态绑定的,所以静态函数必然不能是虚函数,也就不存在所说的重写了.你在子类中重新写一个同名的函数,覆盖了父类的同名函数,在使用子类指针进行调用的时候,调用的就是子类的这个静态方法.</p>
</li>
</ul>
<a id="more"></a>
<h3 id="内部类的作用">内部类的作用</h3><ul>
<li><p>实现对类进行隐藏,一般外部类是public属性,而内部类可以是private、protected</p>
</li>
<li><p>内部类可以访问包括私有成员在内的外部类的所有成员</p>
</li>
<li><p>通过内部类可以实现多重继承.一个类只能继承一个类,通过定义多个内部类,可以实现继承不止一个类.</p>
</li>
<li><p>若要实现的接口中有与类相同名字的方法,可通过内部类来实现这个接口,避免修改接口方法名.</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="子类能否重写父类的静态方法">子类能否重写父类的静态方法</h3><ul>
<li><p>所谓静态就是指:在编译之后所分配的内存会一直存在(不会被回收),直到程序退出内存才会释放这个空间.因为静态方法从程序开始运行后就已经分配了内存,也就是说已经写死了.所有引用到该方法的对象(父类的对象也好子类的对象也好)所指向的都是同一块内存中的数据,也就是该静态方法.子类中如果定义了相同名称的静态方法,并不会重写,而应该是在内存中又分配了一块给子类的静态方法,没有重写这一说。</p>
</li>
<li><p>静态方法属于静态绑定,在编译阶段已经确定函数名和地址,静态方法当然是可以被继承的,但是却不能被重写,为什么?<br>因为重写的意思是重新定义父类的虚函数,但是虚函数是动态绑定的,而静态方法是静态绑定的,所以静态函数必然不能是虚函数,也就不存在所说的重写了.你在子类中重新写一个同名的函数,覆盖了父类的同名函数,在使用子类指针进行调用的时候,调用的就是子类的这个静态方法.</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java垃圾回收器]]></title>
    <link href="http://yoursite.com/2017/06/21/java_review_3/"/>
    <id>http://yoursite.com/2017/06/21/java_review_3/</id>
    <published>2017-06-21T15:34:17.000Z</published>
    <updated>2017-06-21T15:52:28.000Z</updated>
    <content type="html"><![CDATA[<h3 id="GC">GC</h3><h4 id="何为GC？">何为GC？</h4><p>垃圾回收机制是由垃圾收集器Garbage Collection GC来实现的,GC是后台的守护进程。它的特别之处是它是一个低优先级进程,但是可以根据内存的使用情况动态的调整他的优先级。因此,它是在内存中低到一定限度时才会自动运行,从而实现对内存的回收。这就是垃圾回收的时间不确定的原因。</p>
<a id="more"></a>
<h4 id="何为垃圾？">何为垃圾？</h4><p>Java中那些不可达的对象就会变成垃圾。那么什么叫做不可达？其实就是没有办法再引用到该对象了。主要有以下情况使对象变为垃圾:</p>
<ul>
<li><p>对非线程的对象来说,所有的活动线程都不能访问该对象,那么该对象就会变为垃圾。</p>
</li>
<li><p>对线程对象来说,满足上面的条件,且线程未启动或者已停止。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例如: </span><br><span class="line">(<span class="number">1</span>)改变对象的引用，如置为<span class="keyword">null</span>或者指向其他对象。 </span><br><span class="line">   Object x=<span class="keyword">new</span> Object();<span class="comment">//object1 </span></span><br><span class="line">   Object y=<span class="keyword">new</span> Object();<span class="comment">//object2 </span></span><br><span class="line">   x=y;<span class="comment">//object1 变为垃圾 </span></span><br><span class="line">   x=y=<span class="keyword">null</span>;<span class="comment">//object2 变为垃圾 </span></span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>)超出作用域 </span><br><span class="line">   <span class="keyword">if</span>(i==<span class="number">0</span>)&#123; </span><br><span class="line">      Object x=<span class="keyword">new</span> Object();<span class="comment">//object1 </span></span><br><span class="line">   &#125;<span class="comment">//括号结束后object1将无法被引用，变为垃圾 </span></span><br><span class="line">(<span class="number">3</span>)类嵌套导致未完全释放 </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123; </span><br><span class="line">      A a; </span><br><span class="line">   &#125; </span><br><span class="line">   A x= <span class="keyword">new</span> A();<span class="comment">//分配一个空间 </span></span><br><span class="line">   x.a= <span class="keyword">new</span> A();<span class="comment">//又分配了一个空间 </span></span><br><span class="line">   x=<span class="keyword">null</span>;<span class="comment">//将会产生两个垃圾 </span></span><br><span class="line">(<span class="number">4</span>)线程中的垃圾 </span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;   </span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123; </span><br><span class="line">       <span class="comment">//.... </span></span><br><span class="line">     &#125; </span><br><span class="line">   &#125; </span><br><span class="line">   <span class="comment">//main </span></span><br><span class="line">   A x=<span class="keyword">new</span> A();<span class="comment">//object1 </span></span><br><span class="line">   x.start(); </span><br><span class="line">   x=<span class="keyword">null</span>;<span class="comment">//等线程执行完后object1才被认定为垃圾 </span></span><br><span class="line">   这样看，确实在代码执行过程中会产生很多垃圾，不过不用担心，java可以有效地处理他们。</span><br></pre></td></tr></table></figure>
<h4 id="为何要这样设计">为何要这样设计</h4><p>因为GC也是进程,也要消耗CPU等资源,如果GC执行过于频繁会对java的程序的执行产生较大的影响(java解释器本来就不快),因此JVM的设计者们选着了不定期的GC</p>
<p>GC有关的是: runtime data area 中的 heap(对象实例会存储在这里) 和 gabage collector方法。</p>
<p>程序运行期间,所有对象实例存储在运行时数据区域的heap中,当一个对象不再被引用（使用）,它就需要被收回。在GC过程中,这些不再被使用的对象从heap中收回,这样就会有空间被循环利用。</p>
<p>GC为内存中不再使用的对象进行回收,GC中调用回收的方法—收集器garbage collector. 由于GC要消耗一些资源和时间,Java 在对对象的生命周期特征（eden or survivor）进行分析之后,采用了分代的方式进行对象的收集,以缩短GC对应用造成的暂停。</p>
<p>在垃圾回收器回收内存之前,还需要一些清理工作。</p>
<p>因为垃圾回收gc只能回收通过new关键字申请的内存（在堆上）,但是堆上的内存并不完全是通过new申请分配的。还有一些本地方法(一般是调用的C方法)。这部分”特殊的内存”如果不手动释放,就会导致内存泄露,gc是无法回收这部分内存的。<br>所以需要在finalize中用本地方法(native method)如free操作等,再使用gc方法。显示的GC方法是system.gc()</p>
<h4 id="JVM中对象的引用类型">JVM中对象的引用类型</h4><ul>
<li><p>强引用(StrongReference) - 默认情况下,对象采用的均为强引用 JVM 宁可抛出 OOM ,也不会让 GC 回收具有强引用的对象 <code>(GC不会回收)</code></p>
</li>
<li><p>软引用(SoftReference) - 软引用是Java中提供的一种比较适合于缓存场景的应用 <code>(只有在内存不够用的情况下才会被GC)</code></p>
</li>
<li><p>弱引用(WeakReference) - 在 GC 时,一旦发现了只具有弱引用的对象,不管当前内存空间足够与否,都会回收它的内存;</p>
</li>
<li><p>虚引用 - 在GC时一定会被GC回收.任何时候都可以被GC回收,当垃圾回收器准备回收一个对象时,如果发现它还有虚引用,就会在回收对象的内存之前,把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是否存在该对象的虚引用,来了解这个对象是否将要被回收。可以用来作为GC回收Object的标志。</p>
</li>
</ul>
<h4 id="引用计数法">引用计数法</h4><p>为每一个创建的对象分配一个引用计数器,用来存储该对象被引用的个数。当该个数为零,意味着没有人再使用这个对象,可以认为”对象死亡”。但是,这种方案存在严重的问题,就是无法检测”循环引用”:当两个对象互相引用,即时它俩都不被外界任何东西引用,它俩的计数都不为零,因此永远不会被回收。而实际上对于开发者而言,这两个对象已经完全没有用处了。</p>
<h4 id="可达性分析">可达性分析</h4><p>这种方案是目前主流语言里采用的对象存活性判断方案。基本思路是把所有引用的对象想象成一棵树,从树的根结点 GC Roots 出发,持续遍历找出所有连接的树枝对象,这些对象则被称为”可达”对象,或称”存活”对象。其余的对象则被视为”死亡”的”不可达”对象,或称”垃圾”。</p>
<p>参考下图,object5,object6 和 object7 便是不可达对象,视为”死亡状态”,应该被垃圾回收器回收.</p>
<p><img src="http://wingjay.com/img/gc/reachable.JPG" alt=""></p>
<p>GC Roots 究竟指谁呢?<br>我们可以猜测,GC Roots 本身一定是可达的,这样从它们出发遍历到的对象才能保证一定可达。那么,Java 里有哪些对象是一定可达呢？主要有以下四种:</p>
<ul>
<li><p>虚拟机栈（帧栈中的本地变量表）中引用的对象。</p>
</li>
<li><p>方法区中静态属性引用的对象。</p>
</li>
<li><p>方法区中常量引用的对象。</p>
</li>
<li><p>本地方法栈中 JNI 引用的对象。</p>
</li>
</ul>
<h4 id="有哪些方式来回收这些垃圾呢？">有哪些方式来回收这些垃圾呢？</h4><p>上面已经知道,所有 GC Roots 不可达的对象都称为垃圾,参考下图,黑色的表示垃圾,灰色表示存活对象,绿色表示空白空间。</p>
<p><img src="http://wingjay.com/img/gc/garbage.png" alt=""></p>
<p>那么,我们如何来回收这些垃圾呢？</p>
<ul>
<li>标记－清理</li>
</ul>
<p>第一步,所谓”标记”就是利用可达性遍历堆内存,把”存活”对象和”垃圾”对象进行标记,得到的结果如上图;<br>第二步,既然”垃圾”已经标记好了,那我们再遍历一遍，把所有”垃圾”对象所占的空间直接 清空 即可。</p>
<p>结果如下:<br><img src="http://wingjay.com/img/gc/mark-sweep.png" alt=""></p>
<p>这便是 <code>标记－清理</code> 方案,<code>简单方便</code>,但是容易产生 <code>内存碎片</code>。</p>
<ul>
<li>标记－整理</li>
</ul>
<p>既然上面的方法会产生内存碎片,那好,我在清理的时候,把所有 存活 对象扎堆到同一个地方,让它们待在一起,这样就没有内存碎片了。</p>
<p>结果如下:</p>
<p><img src="http://wingjay.com/img/gc/mark-compact.png" alt=""></p>
<p>这两种方案适合 <code>存活对象多,垃圾少</code> 的情况,它只需要清理掉少量的垃圾,然后挪动下存活对象就可以了。</p>
<ul>
<li>复制</li>
</ul>
<p>这种方法比较粗暴,直接把堆内存分成两部分,一段时间内只允许在其中一块内存上进行分配,当这块内存被分配完后,则执行垃圾回收,把所有 存活 对象全部复制到另一块内存上,当前内存则直接全部清空。</p>
<p>结果如下:</p>
<p><img src="http://wingjay.com/img/gc/copying.png" alt=""></p>
<p>起初时只使用上面部分的内存,直到内存使用完毕,才进行垃圾回收,把所有存活对象搬到下半部分,并把上半部分进行清空。</p>
<p>这种做法不容易产生碎片,也简单粗暴;但是,它意味着你在一段时间内只能使用一部分的内存,超过这部分内存的话就意味着堆内存里频繁的 <code>复制清空</code>。</p>
<p>这种方案适合 <code>存活对象少,垃圾多</code> 的情况,这样在复制时就不需要复制太多对象过去,多数垃圾直接被清空处理。</p>
<h4 id="Java_的分代回收机制">Java 的分代回收机制</h4><p>上面我们看到有至少三种方法来回收内存,那么 Java 里是如何选择利用这三种回收算法呢？是只用一种还是三种都用呢？</p>
<p>Java 的堆结构<br>一块 Java 堆空间一般分成三部分,这三部分用来存储三类数据:</p>
<ul>
<li><p>刚刚创建的对象。在代码运行时会持续不断地创造新的对象,这些新创建的对象会被统一放在一起。因为有很多局部变量等在新创建后很快会变成 <code>不可达</code> 的对象,<code>快速死去</code> ,因此这块区域的特点是 <code>存活对象少,垃圾多</code> 。形象点描述这块区域为: <code>新生代</code>;</p>
</li>
<li><p>存活了一段时间的对象。这些对象早早就被创建了,而且一直活了下来。我们把这些 <code>存活时间较长</code> 的对象放在一起,它们的特点是 <code>存活对象多,垃圾少</code>。形象点描述这块区域为: <code>老年代</code>;</p>
</li>
<li><p>永久存在的对象。比如一些静态文件,这些对象的特点是不需要垃圾回收,永远存活。形象点描述这块区域为: <code>永久代</code></p>
</li>
</ul>
<p>也就是说,常规的 Java 堆至少包括了 <code>新生代</code> 和 <code>老年代</code> 两块内存区域,而且这两块区域有很明显的特征:</p>
<ul>
<li><p>新生代:存活对象少、垃圾多 - <code>复制 回收机制</code></p>
</li>
<li><p>老年代:存活对象多、垃圾少 - <code>标记整理 回收机制</code></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="GC">GC</h3><h4 id="何为GC？">何为GC？</h4><p>垃圾回收机制是由垃圾收集器Garbage Collection GC来实现的,GC是后台的守护进程。它的特别之处是它是一个低优先级进程,但是可以根据内存的使用情况动态的调整他的优先级。因此,它是在内存中低到一定限度时才会自动运行,从而实现对内存的回收。这就是垃圾回收的时间不确定的原因。</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java类的生命周期]]></title>
    <link href="http://yoursite.com/2017/06/21/java_review_2/"/>
    <id>http://yoursite.com/2017/06/21/java_review_2/</id>
    <published>2017-06-21T15:32:49.000Z</published>
    <updated>2017-06-21T15:33:46.000Z</updated>
    <content type="html"><![CDATA[<h3 id="类的生命周期">类的生命周期</h3><p>一个java类的完整的生命周期会经历<code>加载</code>、<code>连接</code>、<code>初始化</code>、<code>使用</code>、和<code>卸载</code>五个阶段,当然也有在加载或者连接之后没有被初始化就直接被使用的情况,如图所示:</p>
<p><img src="http://img.blog.csdn.net/20170602113030666" alt="类的生命周期"></p>
<a id="more"></a>
<h4 id="加载">加载</h4><blockquote>
<p>通常我们说类加载指的是类的生命周期中加载、连接、初始化三个阶段。在加载阶段,java虚拟机会做什么工作呢?其实很简单,就是找到需要加载的类并把类的信息加载到jvm的方法区中,然后在堆区中实例化一个java.lang.Class对象,作为方法区中这个类的信息的入口。</p>
</blockquote>
<p>类的加载方式:</p>
<ul>
<li>根据类的全路径名找到相应的class文件,然后从class文件中读取文件内容</li>
<li>从jar文件中读取。</li>
<li>从网络中获取</li>
<li>根据一定的规则实时生成,比如设计模式中的动态代理模式,就是根据相应的类自动生成它的代理类。</li>
<li>从非class文件中获取,其实这与直接从class文件中获取的方式本质上是一样的,这些非class文件在jvm中运行之前会被转换为可被jvm所识别的字节码文件。</li>
</ul>
<p>类的加载时机:</p>
<ul>
<li>当jvm”预期”到一个类将要被使用时,就会在使用它之前对这个类进行加载。比如说,在一段代码中出现了一个类的名字,jvm在执行这段代码之前并不能确定这个类是否会被使用到,于是,有些jvm会在执行前就加载这个类,而有些则在真正需要用的时候才会去加载它,这取决于具体的jvm实现。我们常用的hotspot虚拟机是采用的后者,就是说当真正用到一个类的时候才对它进行加载。<br>加载阶段是类的生命周期中的第一个阶段,加载阶段之后,是连接阶段。有一点需要注意,就是有时连接阶段并不会等加载阶段完全完成之后才开始,而是交叉进行,可能一个类只加载了一部分之后,连接阶段就已经开始了。但是这两个阶段总的开始时间和完成时间总是固定的:加载阶段总是在连接阶段之前开始,连接阶段总是在加载阶段完成之后完成。</li>
</ul>
<h4 id="连接">连接</h4><p>连接阶段比较复杂,一般会跟加载阶段和初始化阶段交叉进行,这个阶段的主要任务就是做一些加载后的验证工作以及一些初始化前的准备工作,可以细分为三个步骤:</p>
<ul>
<li><p>验证: 当一个类被加载之后,必须要验证一下这个类是否合法,比如这个类是不是符合字节码的格式、变量与方法是不是有重复、数据类型是不是有效、继承与实现是否合乎标准等等。总之,这个阶段的目的就是保证加载的类是能够被jvm所运行。</p>
</li>
<li><p>准备: 准备阶段的工作就是为类的静态变量分配内存并设为jvm默认的初值,对于非静态的变量,则不会为它们分配内存。有一点需要注意,这时候,静态变量的初值为jvm默认的初值,而不是我们在程序中设定的初值。jvm默认的初值是这样的:</p>
<ul>
<li><p>基本类型: (int、long、short、char、byte、boolean、float、double)的默认值为0</p>
</li>
<li><p>引用类型: 默认值为null</p>
</li>
<li><p>常量: 默认值为我们程序中设定的值,比如我们在程序中定义final static int a = 100，则准备阶段中a的初值就是100</p>
</li>
</ul>
</li>
<li><p>解析: 这一阶段的任务就是把常量池中的符号引用转换为直接引用。那么什么是符号引用,什么又是直接引用呢？<br>比如我们要在内存中找一个类里面的一个叫做show的方法,显然是找不到。但是在解析阶段,jvm就会把show这个名字转换为指向方法区的的一块内存地址,比如c17164,通过c17164就可以找到show这个方法具体分配在内存的哪一个区域了。这里show就是符号引用,而c17164就是直接引用。在解析阶段,jvm会将所有的类或接口名、字段名、方法名转换为具体的内存地址。</p>
</li>
</ul>
<h4 id="初始化">初始化</h4><p>如果一个类被直接引用,就会触发类的初始化。在java中,直接引用的情况有:</p>
<ul>
<li><p>通过new关键字实例化对象、读取或设置类的静态变量、调用类的静态方法</p>
</li>
<li><p>通过反射方式执行以上三种行为</p>
</li>
<li><p>初始化子类的时候,会触发父类的初始化</p>
</li>
<li><p>作为程序入口直接运行时(也就是直接调用main方法)</p>
</li>
</ul>
<p>除了以上四种情况,其他使用类的方式叫做被动引用,而被动引用不会触发类的初始化。</p>
<p>类的初始化过程是这样的:按照顺序自上而下运行类中的变量赋值语句和静态语句,如果有父类,则首先按照顺序运行父类中的变量赋值语句和静态语句。</p>
<p>在类的初始化阶段,只会初始化与类相关的静态赋值语句和静态语句,也就是有static关键字修饰的信息,而没有static修饰的赋值语句和执行语句在实例化对象的时候才会运行。</p>
<h4 id="使用">使用</h4><p>被动引用:</p>
<ul>
<li><p>引用父类的静态字段,只会引起父类的初始化,而不会引起子类的初始化</p>
</li>
<li><p>定义类数组,不会引起类的初始化</p>
</li>
<li><p>引用类的常量,不会引起类的初始化</p>
</li>
</ul>
<p>使用阶段包括主动引用和被动引用,主动饮用会引起类的初始化,而被动引用不会引起类的初始化。</p>
<h4 id="卸载">卸载</h4><ul>
<li><p>该类所有的实例都已经被回收,也就是java堆中不存在该类的任何实例</p>
</li>
<li><p>加载该类的ClassLoader已经被回收</p>
</li>
<li><p>该类对应的java.lang.Class对象没有任何地方被引用,无法在任何地方通过反射访问该类的方法</p>
</li>
</ul>
<p>如果以上三个条件全部满足,jvm就会在方法区垃圾回收的时候对类进行卸载,类的卸载过程其实就是在方法区中清空类信息,java类的整个生命周期就结束了</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="类的生命周期">类的生命周期</h3><p>一个java类的完整的生命周期会经历<code>加载</code>、<code>连接</code>、<code>初始化</code>、<code>使用</code>、和<code>卸载</code>五个阶段,当然也有在加载或者连接之后没有被初始化就直接被使用的情况,如图所示:</p>
<p><img src="http://img.blog.csdn.net/20170602113030666" alt="类的生命周期"></p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java类加载器]]></title>
    <link href="http://yoursite.com/2017/06/21/java_review_1/"/>
    <id>http://yoursite.com/2017/06/21/java_review_1/</id>
    <published>2017-06-21T15:23:07.000Z</published>
    <updated>2017-06-21T15:34:09.000Z</updated>
    <content type="html"><![CDATA[<h3 id="什么是类加载器">什么是类加载器</h3><p>类加载器是一个用来加载类文件的类。</p>
<h3 id="类加载器的作用">类加载器的作用</h3><p>在运行时加载类(装载.class文件)</p>
<h3 id="类加载器装载class的方式(时机)">类加载器装载class的方式(时机)</h3><ul>
<li><p>隐式: 运行过程中,碰到new方式生成对象时,隐式调用ClassLoader到JVM</p>
</li>
<li><p>显式: 通过class.forname()动态加载</p>
</li>
</ul>
<a id="more"></a>
<h3 id="Java类加载器基于三个机制">Java类加载器基于三个机制</h3><blockquote>
<p>委托、可见性和单一性</p>
</blockquote>
<ul>
<li><p>委托机制是指将加载一个类的请求交给父类加载器,如果这个父类加载器不能够找到或者加载这个类,那么再由当前的类加载器加载,并将其放入它自己的缓存中,以便下次有加载请求的时候直接返回。<br>当一个类加载和初始化的时候,类仅在有需要加载的时候被加载。假设你有一个应用需要的类叫作Abc.class,首先加载这个类的请求由Application类加载器委托给它的父类加载器Extension类加载器,然后再委托给Bootstrap类加载器。Bootstrap类加载器会先看看rt.jar中有没有这个类,因为并没有这个类,所以这个请求由回到Extension类加载器,它会查看jre/lib/ext目录下有没有这个类,如果这个类被Extension类加载器找到了,那么它将被加载,而Application类加载器不会加载这个类;而如果这个类没有被Extension类加载器找到,那么再由Application类加载器从classpath中寻找。记住classpath定义的是类文件的加载目录,而PATH是定义的是可执行程序如javac,java等的执行路径。</p>
</li>
<li><p>可见性的原理是子类的加载器可以看见所有的父类加载器加载的类,而父类加载器看不到子类加载器加载的类。</p>
</li>
<li><p>单一性原理是指仅加载一个类一次,这是由委托机制确保子类加载器不会再次加载父类加载器加载过的类。根据这个机制,父加载器加载过的类不能被子加载器加载第二次。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Java program to demonstrate How ClassLoader works in Java,</span><br><span class="line"> * in particular about visibility principle of ClassLoader.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> weifeng</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;          </span><br><span class="line">            <span class="comment">//printing ClassLoader of this class</span></span><br><span class="line">            System.out.println(<span class="string">"ClassLoaderTest.getClass().getClassLoader() : "</span></span><br><span class="line">                                 + ClassLoaderTest.class.getClassLoader());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//trying to explicitly load this class again using Extension class loader</span></span><br><span class="line">            Class.forName(<span class="string">"test.ClassLoaderTest"</span>, <span class="keyword">true</span></span><br><span class="line">                            ,  ClassLoaderTest.class.getClassLoader().getParent());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">            Logger.getLogger(ClassLoaderTest.class.getName()).log(Level.SEVERE, <span class="keyword">null</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ClassLoaderTest.getClass().getClassLoader() : sun.misc.Launcher$AppClassLoader@<span class="number">601</span>bb1</span><br><span class="line"><span class="number">21</span>/<span class="number">06</span>/<span class="number">2017</span> <span class="number">2</span>:<span class="number">36</span>:<span class="number">18</span> PM test.ClassLoaderTest main</span><br><span class="line">SEVERE: <span class="keyword">null</span></span><br><span class="line">java.lang.ClassNotFoundException: test.ClassLoaderTest</span><br><span class="line">        at java.net.URLClassLoader$<span class="number">1</span>.run(URLClassLoader.java:<span class="number">202</span>)</span><br><span class="line">        at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">        at java.net.URLClassLoader.findClass(URLClassLoader.java:<span class="number">190</span>)</span><br><span class="line">        at sun.misc.Launcher$ExtClassLoader.findClass(Launcher.java:<span class="number">229</span>)</span><br><span class="line">        at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">306</span>)</span><br><span class="line">        at java.lang.ClassLoader.loadClass(ClassLoader.java:<span class="number">247</span>)</span><br><span class="line">        at java.lang.Class.forName0(Native Method)</span><br><span class="line">        at java.lang.Class.forName(Class.java:<span class="number">247</span>)</span><br><span class="line">        at test.ClassLoaderTest.main(ClassLoaderTest.java:<span class="number">29</span>)</span><br></pre></td></tr></table></figure>
<h3 id="类加载器ClassLoader的层次结构">类加载器ClassLoader的层次结构</h3><p><img src="https://segmentfault.com/img/bVk0W2" alt=""></p>
<ul>
<li><p>Bootstrap ClassLoader: 负责加载rt.jar中的JDK类文件,它是所有类加载器的父加载器。Bootstrap类加载器没有任何父类加载器，如果你调用String.class.getClassLoader(),会返回null,任何基于此的代码会抛出NUllPointerException异常。Bootstrap加载器被称为初始类加载器。当运行 java 虚拟机时,这个类加载器被创建,它负责加载虚拟机的核心类库,如 java.lang.* 等。例如 java.lang.Object 就是由根类加载器加载的。需要注意的是,这个类加载器不是用 java 语言写的,而是用 C/C++ 写的。</p>
</li>
<li><p>Extension ClassLoader: 这个加载器加载出了基本 API 之外的一些拓展类。Extension将加载类的请求先委托给它的父加载器,也就是Bootstrap,如果没有成功加载的话,再从jre/lib/ext目录下或者java.ext.dirs系统属性定义的目录下加载类。Extension加载器由sun.misc.Launcher$ExtClassLoader实现。</p>
</li>
</ul>
<ul>
<li>System类加载器(或者叫作Application类加载器): 它负责从classpath环境变量中加载某些应用相关的类,classpath环境变量通常由-classpath或-cp命令行选项来定义,或者是JAR中的Manifest的classpath属性.Application类加载器是Extension类加载器的子加载器.通过sun.misc.Launcher$AppClassLoader实现。<br>当Abc.class已经被Application类加载器加载过了,然后如果想要使用Extension类加载器加载这个类,将会抛出java.lang.ClassNotFoundException异常。</li>
</ul>
<ul>
<li>User-defined Class Loader: 用户定制的类加载器</li>
</ul>
<p>除了Bootstrap类加载器是大部分由C来写的,其他的类加载器都是通过java.lang.ClassLoader来实现的。</p>
<p>总结一下,下面是三种类加载器加载类文件的地方:</p>
<ul>
<li><p>Bootstrap类加载器 – jre/lib/rt.jar</p>
</li>
<li><p>Extension类加载器 – jre/lib/ext或者java.ext.dirs指向的目录</p>
</li>
<li><p>Application类加载器 – CLASSPATH环境变量, 由-classpath或-cp选项定义,或者是JAR中的Manifest的classpath属性定义.</p>
</li>
</ul>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/java_ext_pathjava_ext_path.png" alt=""></p>
<h3 id="如何显式的加载类">如何显式的加载类</h3><p>Java提供了显式加载类的API:Class.forName(classname)和Class.forName(classname, initialized, classloader)。就像上面的例子中,你可以指定类加载器的名称以及要加载的类的名称。类的加载是通过调用java.lang.ClassLoader的loadClass()方法,而loadClass()方法则调用了findClass()方法来定位相应类的字节码。在这个例子中Extension类加载器使用了java.net.URLClassLoader,它从JAR和目录中进行查找类文件,所有以”/“结尾的查找路径被认为是目录。如果findClass()没有找到那么它会抛出java.lang.ClassNotFoundException异常,而如果找到的话则会调用defineClass()将字节码转化成类实例,然后返回。</p>
<p>Mac 下查看安装的JDK以及路径: <code>/usr/libexec/java_home -V</code></p>
<p>查看 JDK1.6 的安装路径: <code>/usr/libexec/java_home -v 1.6</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="什么是类加载器">什么是类加载器</h3><p>类加载器是一个用来加载类文件的类。</p>
<h3 id="类加载器的作用">类加载器的作用</h3><p>在运行时加载类(装载.class文件)</p>
<h3 id="类加载器装载class的方式(时机)">类加载器装载class的方式(时机)</h3><ul>
<li><p>隐式: 运行过程中,碰到new方式生成对象时,隐式调用ClassLoader到JVM</p>
</li>
<li><p>显式: 通过class.forname()动态加载</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JVM的结构]]></title>
    <link href="http://yoursite.com/2017/06/21/java_review_0/"/>
    <id>http://yoursite.com/2017/06/21/java_review_0/</id>
    <published>2017-06-21T14:49:34.000Z</published>
    <updated>2017-06-21T15:58:55.000Z</updated>
    <content type="html"><![CDATA[<h3 id="JVM内存区域">JVM内存区域</h3><blockquote>
<p>JVM = <code>类加载器</code> ClassLoader + <code>执行引擎</code> Execution Engine + <code>运行时数据区域</code> Runtime Data Area。 ClassLoader 把硬盘上的Class 文件加载到JVM中的运行时数据区域, 但是它不负责这个类文件能否执行, 而这个是 <code>执行引擎</code> 负责的</p>
</blockquote>
<h5 id="HotSpot_JVM_架构图">HotSpot JVM 架构图</h5><p><img src="https://itimetraveler.github.io/gallery/hotspot-jvm.png" alt=""></p>
<h5 id="Java_虚拟机内存结构图">Java 虚拟机内存结构图</h5><p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/java_review_0.png" alt="">  </p>
<a id="more"></a>
<p>下面对各个部分的功能和存储的内容进行描述:</p>
<ul>
<li>PC程序计数器: 一块较小的内存空间,可以看做是当前线程所执行的字节码的行号指示器, NAMELY存储每个线程下一步将执行的JVM指令,如该方法为native的,则PC寄存器中不存储任何信息。Java 的多线程机制离不开程序计数器,每个线程都有一个自己的PC,以便完成不同线程上下文环境的切换。</li>
</ul>
<ul>
<li>栈区: 也叫java虚拟机栈,虚拟机栈描述的是Java 方法执行的内存模型,是由一个一个的栈帧组成的后进先出的栈式结构,栈桢中存放方法运行时产生的局部变量、方法出口等信息。当调用一个方法时,虚拟机栈中就会创建一个栈帧存放这些数据,当方法调用完成时,栈帧消失,如果方法中调用了其他方法,则继续在栈顶创建新的栈桢.每一个方法被调用直至执行完成的过程就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程.<br>与PC程序计数器一样,java 虚拟机栈也是线程私有的。每一个 JVM 线程都有自己的 Java 虚拟机栈,这个栈与线程同时创建,它的生命周期与线程相同。</li>
</ul>
<ul>
<li>本地方法栈: 与虚拟机栈的作用相似,虚拟机栈为虚拟机执行执行java方法服务,而本地方法栈则为虚拟机使用到的本地方法服务。</li>
</ul>
<ul>
<li>堆区: 用于存放类的对象实例。被所有线程共享的一块存储区域,在虚拟机启动时创建,它是JVM用来存储对象实例以及数组值的区域,可以认为Java中所有通过new创建的对象的内存都在此分配。JVM将Heap分为两块: 新生代New Generation和旧生代Old Generation。</li>
</ul>
<ul>
<li>方法区: 在java的虚拟机中有一块专门用来存放已经加载的类信息、常量、静态变量以及方法代码的内存区域,叫做方法区。方法区和堆区域一样,是各个线程共享的内存区域,它用于存储每一个类的结构信息,例如运行时常量池,成员变量和方法数据,构造函数和普通函数的字节码内容,还包括一些在类、实例、接口初始化时用到的特殊方法。当开发人员在程序中通过Class对象中的getName、isInstance等方法获取信息时,这些数据都来自方法区。<br>方法区也是全局共享的,在虚拟机启动时候创建。在一定条件下它也会被GC。这块区域对应Permanent Generation 持久代。</li>
</ul>
<ul>
<li>常量池:常量池是方法区的一部分,其空间从方法区中分配,主要用来存放常量和类中的符号引用等信息。</li>
</ul>
<h5 id="类加载器"><a href="">类加载器</a></h5><h5 id="执行引擎">执行引擎</h5><p>作用: 执行字节码,或者执行本地方法</p>
<h5 id="runtime_data_area">runtime data area</h5><p>JVM 运行时数据区 (JVM Runtime Area) 其实就是指 JVM 在运行期间,其对JVM内存空间的划分和分配.JVM在运行时将数据划分为了6个区域来存储。</p>
<p>程序员写的所有程序都被加载到运行时数据区域中,不同类别存放在heap, java stack, native method stack, PC register, method area.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="JVM内存区域">JVM内存区域</h3><blockquote>
<p>JVM = <code>类加载器</code> ClassLoader + <code>执行引擎</code> Execution Engine + <code>运行时数据区域</code> Runtime Data Area。 ClassLoader 把硬盘上的Class 文件加载到JVM中的运行时数据区域, 但是它不负责这个类文件能否执行, 而这个是 <code>执行引擎</code> 负责的</p>
</blockquote>
<h5 id="HotSpot_JVM_架构图">HotSpot JVM 架构图</h5><p><img src="https://itimetraveler.github.io/gallery/hotspot-jvm.png" alt=""></p>
<h5 id="Java_虚拟机内存结构图">Java 虚拟机内存结构图</h5><p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/java_review_0.png" alt="">  </p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python基础]]></title>
    <link href="http://yoursite.com/2016/10/17/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/10/17/python基础语法学习/</id>
    <published>2016-10-17T00:39:39.000Z</published>
    <updated>2016-10-30T13:51:57.000Z</updated>
    <content type="html"><![CDATA[<h4 id="文件处理">文件处理</h4><ul>
<li>读文件示例<figure class="highlight"><table><tr><td class="code"><pre><span class="line">myFile.txt</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line"></span><br><span class="line">code:</span><br><span class="line">f = file('myFile.txt', 'r')</span><br><span class="line">for line in f.readlines():</span><br><span class="line">	line = line.strip('\n').split(':')</span><br><span class="line">	print(line)</span><br><span class="line"></span><br><span class="line">result:</span><br><span class="line">['root', 'x', '0', '0', 'root', '/root, '/bin/bash']</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">f = file('/etc/passwd')</span><br><span class="line">for i in f.readlines():</span><br><span class="line">	print(i.strip('\n').split(':')) #脱掉一行中行首和行尾的换行符,i.strip()为脱掉空格和换行符以及Tab</span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h4 id="文件处理模式">文件处理模式</h4><ul>
<li>r 以只读模式打开文件</li>
<li>w 以只写模式打开文件</li>
<li>a 以追加模式打开文件</li>
<li>r+b以读写模式打开 b代表以二进制的形式处理文件,保证在windows上也有用</li>
<li>w+b以写读模式打开 先清空文件再写</li>
<li>a+b以追加及读模式</li>
</ul>
<h4 id="字符串处理">字符串处理</h4><ul>
<li>S.find(sub[, start[, end]])</li>
<li>S.rfind(sub[, start[, end]]) 反向查找</li>
<li>S.index(sub[, start[, end]])</li>
<li>S.rindex(sub[, start[, end]])</li>
<li>S.count(sub[, start[, end]])</li>
<li>S.endswith(suffix[, start[, end]])</li>
<li>S.startswith(prefix[, start[, end]])</li>
<li>S.capitalize()</li>
<li>S.lower()</li>
<li>S.upper()</li>
<li>S.swapcase() 小写转大写,大写转小写</li>
<li>S.split(sep=None, maxsplit=-1)</li>
<li>S.join(iterable)</li>
<li>S.replace(old, new[, count])</li>
<li>len(str) 字符串长度</li>
</ul>
<h4 id="列表">列表</h4><ul>
<li>L.append(object)</li>
<li>L.insert(index, object)</li>
<li>L.remove(value)</li>
<li>L.count(value)</li>
<li>L.index(value, [start, [stop]])</li>
<li>L.pop([index])</li>
<li>L.reverse()</li>
<li>L.sort(key=None, reverse=False)</li>
<li>L.clear()</li>
<li>L.extend(iterable)</li>
<li>L.copy()</li>
<li>del L[index]</li>
<li>del L</li>
<li>L[start::step] 从start位置开始,每隔step-start个取一个<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">33</span>]</span><br><span class="line">first_pos = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(name.count(<span class="number">2</span>)):</span><br><span class="line">	new_list = name[first_pos:]</span><br><span class="line">	next_pos = new_list.index(<span class="number">2</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	print(<span class="string">'Find position:'</span>, first_pos + new_list.index(<span class="number">2</span>))</span><br><span class="line">	first_pos += next_pos</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">pos = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(name.count(<span class="number">2</span>)):</span><br><span class="line">	<span class="keyword">if</span> pos == <span class="number">0</span>:</span><br><span class="line">		pos = name.index(<span class="number">2</span>)</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		pos = name.index(<span class="number">2</span>,pos+<span class="number">1</span>)</span><br><span class="line">	print(pos)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="元组">元组</h4><ul>
<li>tuple: 元组(即常量数组)</li>
<li>tuple = (‘a’, ‘b’, ‘c’)</li>
<li>可以用list的[],操作符提取元素</li>
<li>列表和元组之间是可以互相转换的 元组转列表: list(元组)  列表转元组:tuple(列表)</li>
</ul>
<h4 id="字典Dict">字典Dict</h4><ul>
<li>D.clear()</li>
<li>删除键和对应的值:del D[‘key’] 删除字典 del D</li>
<li>D.copy() </li>
<li>D.fromkeys(iterable, value=None, /)</li>
<li>D.get(k[,d])</li>
<li>D.items()</li>
<li>D.keys()</li>
<li>D.pop(k[,d])</li>
<li>D.popitem()</li>
<li>D.setdefault(k[,d]) 如果字典中不存在这个key就设置key和对应的值,否则不设置</li>
<li>D.values()</li>
<li>D.update([E, ]**F)</li>
</ul>
<h4 id="Set集合">Set集合</h4><ul>
<li>Set.add(…)</li>
<li>Set.clear(…)</li>
<li>Set.discard(…) 删除一个元素</li>
<li>Set.copy(…)</li>
<li>Set.pop(…)</li>
<li>Set.remove(…)删除一个元素</li>
</ul>
<h4 id="Set集合运算">Set集合运算</h4><ul>
<li>a &amp; b #求交集 a.intersection(b)</li>
<li>a | b #求并集 a.union(b)</li>
<li>a - b #求差集 a.difference(b)</li>
<li>a ^ b #求对称差集 a.symmetric_difference(b)</li>
<li>a.issubset(b) #a是b的子集</li>
<li>a.issuperset(b) #a是否包含b</li>
</ul>
<h4 id="模块和模块的常用方法"><a href="http://www.cnblogs.com/wupeiqi/articles/4276448.html" target="_blank" rel="external">模块和模块的常用方法</a></h4><ul>
<li>至关重要的<strong>init</strong>.py</li>
<li>是否为主文件:<strong>name</strong><br><code>if __name__ == &#39;__main__&#39;</code>  如果是主文件<strong>name</strong>的值是<code>__main__</code>否则是<code>文件夹.文件名</code></li>
<li>当前文件路径:<strong>file</strong> </li>
<li>当前文件描述:<strong>doc</strong> </li>
</ul>
<h4 id="函数式编程">函数式编程</h4><ul>
<li>参数  def Fun(arg, <em>args, *</em>kargs):</li>
<li>默认参数 print(arg) 放到参数列表最后面</li>
<li>可变参数 print(args, kargs)</li>
<li>返回值 retrun ‘success’</li>
</ul>
<h4 id="生成器">生成器</h4><blockquote>
<p>Generator 是创建迭代器的简单而强大的工具。它们写起来就像是正规的函数,需要返回数据的时候使用 yield 语句。每次 next() 被调用时,生成器恢复它脱离的位置（它记忆语句最后一次执行的位置和所有的数据值）。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FileReadlines</span><span class="params">()</span>:</span></span><br><span class="line">    seek = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'D:/temp.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.seek(seek)</span><br><span class="line">            data = f.readline()</span><br><span class="line">            <span class="keyword">if</span> data:</span><br><span class="line">                seek = f.tell()</span><br><span class="line">                <span class="keyword">yield</span> data</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> FileReadlines():</span><br><span class="line">    <span class="keyword">print</span> i</span><br></pre></td></tr></table></figure>
<h4 id="三元运算和lambda表达式">三元运算和lambda表达式</h4><ul>
<li><p>三元运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="string">'gt'</span> <span class="keyword">if</span> <span class="number">1</span>&gt;<span class="number">3</span> <span class="keyword">else</span> <span class="string">'lt'</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure>
</li>
<li><p>lambda表达式:实际上就是一个匿名函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="keyword">lambda</span> x,y:x+y</span><br><span class="line">print(a(<span class="number">4</span>,<span class="number">10</span>))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Python内置函数">Python内置函数</h4><ul>
<li>help()</li>
<li>dir() 用于按模块名搜索模块定义,它返回一个字符串类型的存储列表。无参数调用时,dir() 函数返回当前定义的命名,注意该列表列出了所有类型的名称:变量,模块,函数,等等。dir() 不会列出内置函数和变量名。如果你想列出这些内容,它们在标准模块 builtins 中定义:<code>import builtins dir(builtins)</code></li>
<li>vars() 以字典形式返回参数中每个成员的当前值,如果vars函数没有带参数,那么它会返回包含当前局部命名空间中所有成员的当前值的一个字典。</li>
<li>import temp 导入模块</li>
<li>reload(temp) 重新导入模块</li>
<li>id() 查看内存地址</li>
<li>eval(str) 将字符串当做表达式执行一下</li>
<li>abs(x) 去x的绝对值</li>
<li>bool(x) 当参数x为ture时返回True,否则返回False</li>
<li>divmod(x, y): 返回((x-x%y)/y, x%y)</li>
<li>max(…): 返回最大值</li>
<li>min(…): 返回最小值</li>
<li>sum(iterable, start=0): 返回序列值的总和</li>
<li>pow(x, y, z=None): 等价于<code>x**y</code> 或者 <code>x**y % z</code></li>
<li>len(obj): 返回指定对象的长度</li>
<li>all(iterable): 如果序列中每个数据的bool(x)是True结果就为True,否则则为False</li>
<li>any(iterable): 如果序列中任意一个个数据的bool(x)是True结果就为True,都为False则返回False</li>
<li>chr(i): 返回i对应的Unicode字符，0 &lt;= i &lt;= 0x10ffff(1114111)</li>
<li>ord(c): 返回c字符对应的Unicode code point</li>
<li>hex(number): 返回一个整数对应的十六进制值</li>
<li>oct(number): 返回一个整数对应的八进制值</li>
<li>bin(number): 返回一个整数对应的二进制值</li>
<li>range(stop): 0~(stop-1)</li>
<li>range(start, stop[, step]): 如果只有start和stop则值的范围是start~(stop-1)</li>
<li>map(func, *iterables): func作用于对序列中的每个值</li>
<li>filter(function or None, iterable): Return an iterator yielding those items of iterable for which function(item) is true. If function is None, return the items that are true.</li>
<li>zip(iter1 [,iter2 […]]): 交换行值和列值</li>
<li><code>module = __import__(str)</code>: 根据字符串导入模块,然后可以获取模块里面的函数、属性等等.<code>hasattr(module, &#39;version&#39;)</code>、<code>getattr()</code>、<code>delattr()</code></li>
<li>callable(obj): 对象是否能被调用.函数、类必须要有 <code>__call__</code> 方法</li>
<li>compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)</li>
<li>isinstance(obj, class_or_tuple)</li>
<li>issubclass(cls, class_or_tuple)</li>
<li>super(object)</li>
<li>staticmethod(object)</li>
</ul>
<h4 id="常用模块"><a href="https://pypi.python.org/pypi" target="_blank" rel="external">常用模块</a></h4><ul>
<li><p>random 用于生成随机数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">print</span> random.random() <span class="comment">#0~1</span></span><br><span class="line"><span class="keyword">print</span> random.randint(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">#[1,2]</span></span><br><span class="line"><span class="keyword">print</span> random.randrange(<span class="number">1</span>,<span class="number">10</span>) <span class="comment">#randrange(start, stop=None, step=1, _int=&lt;class 'int'&gt;) [1,10)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>md5 加密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">hash = hashlib.md5()</span><br><span class="line">hash.update(<span class="string">'admin'</span>)</span><br><span class="line"><span class="keyword">print</span> hash.hexdigest()</span><br></pre></td></tr></table></figure>
</li>
<li><p>序列化和json</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">data = &#123;<span class="string">'a'</span>:<span class="number">123</span>, <span class="string">'b'</span>:<span class="number">456</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#pickle.dumps 将数据通过特殊的形式转换为只有python语言认识的字符串</span></span><br><span class="line">p_str = pickle.dumps(data)</span><br><span class="line">print(p_str)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pickle.dump 将数据通过特殊的形式转换为只有python语言认识的字符串,并写入文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/Users/weifeng/Downloads/result.pk'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">	pickle.dump(data, fp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment">#json.dumps 将数据通过特殊的形式转换为所有程序语言都认识的字符串</span></span><br><span class="line">j_str = json.dumps(data)</span><br><span class="line">print(j_str)</span><br><span class="line"></span><br><span class="line"><span class="comment">#json.dump 将数据通过特殊的形式转换为所有程序语言都认识的字符串,并写入文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/Users/weifeng/Downloads/result.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">	json.dump(data, fp)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="re">re</h4><ul>
<li>compile</li>
<li>match search findall</li>
<li>group groups</li>
</ul>
<h4 id="time">time</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment">#1、时间戳    1970年1月1日之后的秒</span></span><br><span class="line"><span class="comment">#3、元组 包含了：年、日、星期等... time.struct_time</span></span><br><span class="line"><span class="comment">#4、格式化的字符串    2014-11-11 11:11</span></span><br><span class="line"> </span><br><span class="line">print(time.time()) </span><br><span class="line">print(time.mktime(time.localtime())) </span><br><span class="line"> </span><br><span class="line">print(time.gmtime())     <span class="comment">#可加时间戳参数</span></span><br><span class="line">print(time.localtime())  <span class="comment">#可加时间戳参数</span></span><br><span class="line">print(time.strptime(<span class="string">'2014-11-11'</span>, <span class="string">'%Y-%m-%d'</span>)) </span><br><span class="line"> </span><br><span class="line">print(time.strftime(<span class="string">'%Y-%m-%d'</span>))  <span class="comment">#默认当前时间</span></span><br><span class="line">print(time.strftime(<span class="string">'%Y-%m-%d'</span>,time.localtime()))  <span class="comment">#默认当前时间</span></span><br><span class="line">print(time.asctime()) </span><br><span class="line">print(time.asctime(time.localtime())) </span><br><span class="line">print(time.ctime(time.time())) </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="string">'''</span><br><span class="line">datetime.date: 表示日期的类。常用的属性有year, month, day</span><br><span class="line">datetime.time: 表示时间的类。常用的属性有hour, minute, second, microsecond</span><br><span class="line">datetime.datetime: 表示日期时间</span><br><span class="line">datetime.timedelta: 表示时间间隔，即两个时间点之间的长度</span><br><span class="line">timedelta([days[, seconds[, microseconds[, milliseconds[, minutes[, hours[, weeks]]]]]]])</span><br><span class="line">strftime("%Y-%m-%d")</span><br><span class="line">'''</span></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">print(datetime.datetime.now()) </span><br><span class="line">print(datetime.datetime.now() - datetime.timedelta(days=<span class="number">5</span>))</span><br></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/blog/425762/201412/182222027044557.png" alt=""><br><img src="http://images.cnitblog.com/blog/425762/201412/182222117511121.png" alt=""></p>
<h4 id="sys">sys</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sys.argv           命令行参数List,第一个元素是程序本身路径</span><br><span class="line">sys.exit(n)        退出程序,正常退出时exit(<span class="number">0</span>)</span><br><span class="line">sys.version        获取Python解释程序的版本信息</span><br><span class="line">sys.maxint         最大的Int值</span><br><span class="line">sys.maxunicode     最大的Unicode值</span><br><span class="line">sys.path           返回模块的搜索路径,初始化时使用PYTHONPATH环境变量的值</span><br><span class="line">sys.platform       返回操作系统平台名称</span><br><span class="line">sys.stdout.write(<span class="string">'please:'</span>)</span><br><span class="line">val = sys.stdin.readline()[:-<span class="number">1</span>]</span><br><span class="line">print(val)</span><br></pre></td></tr></table></figure>
<h4 id="os">os</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line">os.getcwd() 获取当前工作目录，即当前python脚本工作的目录路径</span><br><span class="line">os.chdir("dirname")  改变当前脚本工作目录；相当于shell下cd</span><br><span class="line">os.curdir  返回当前目录: ('.')</span><br><span class="line">os.pardir  获取当前目录的父目录字符串名：('..')</span><br><span class="line">os.makedirs('dirname1/dirname2')    可生成多层递归目录</span><br><span class="line">os.removedirs('dirname1')    若目录为空，则删除，并递归到上一级目录，如若也为空，则删除，依此类推</span><br><span class="line">os.mkdir('dirname')    生成单级目录；相当于shell中mkdir dirname</span><br><span class="line">os.rmdir('dirname')    删除单级空目录，若目录不为空则无法删除，报错；相当于shell中rmdir dirname</span><br><span class="line">os.listdir('dirname')    列出指定目录下的所有文件和子目录，包括隐藏文件，并以列表方式打印</span><br><span class="line">os.remove()  删除一个文件</span><br><span class="line">os.rename("oldname","newname")  重命名文件/目录</span><br><span class="line">os.stat('path/filename')  获取文件/目录信息</span><br><span class="line">os.sep    输出操作系统特定的路径分隔符，win下为"\\",Linux下为"/"</span><br><span class="line">os.linesep    输出当前平台使用的行终止符，win下为"\t\n",Linux下为"\n"</span><br><span class="line">os.pathsep    输出用于分割文件路径的字符串</span><br><span class="line">os.name    输出字符串指示当前使用平台。win-&gt;'nt'; Linux-&gt;'posix'</span><br><span class="line">os.system("bash command")  运行shell命令，直接显示</span><br><span class="line">os.environ  获取系统环境变量</span><br><span class="line">os.path.abspath(path)  返回path规范化的绝对路径</span><br><span class="line">os.path.split(path)  将path分割成目录和文件名二元组返回</span><br><span class="line">os.path.dirname(path)  返回path的目录。其实就是os.path.split(path)的第一个元素</span><br><span class="line">os.path.basename(path)  返回path最后的文件名。如何path以／或\结尾，那么就会返回空值。即os.path.split(path)的第二个元素</span><br><span class="line">os.path.exists(path)  如果path存在，返回True；如果path不存在，返回False</span><br><span class="line">os.path.isabs(path)  如果path是绝对路径，返回True</span><br><span class="line">os.path.isfile(path)  如果path是一个存在的文件，返回True。否则返回False</span><br><span class="line">os.path.isdir(path)  如果path是一个存在的目录，则返回True。否则返回False</span><br><span class="line">os.path.join(path1[, path2[, ...]])  将多个路径组合后返回，第一个绝对路径之前的参数将被忽略</span><br><span class="line">os.path.getatime(path)  返回path所指向的文件或者目录的最后存取时间</span><br><span class="line">os.path.getmtime(path)  返回path所指向的文件或者目录的最后修改时间</span><br></pre></td></tr></table></figure>
<h4 id="装饰器">装饰器</h4><ul>
<li><p>装饰器本质上就是函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span><span class="params">(fun)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(arg)</span>:</span></span><br><span class="line">		print(<span class="string">'Hello'</span>)</span><br><span class="line">		result = fun(arg)</span><br><span class="line">		print(<span class="string">'Python'</span>)</span><br><span class="line">		<span class="keyword">return</span> result</span><br><span class="line">	<span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="decorator">@outer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Func1</span><span class="params">(arg)</span>:</span></span><br><span class="line">	print(<span class="string">'check'</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="string">'result'</span></span><br><span class="line"></span><br><span class="line">response = Func1(<span class="string">'Study'</span>)</span><br><span class="line"></span><br><span class="line">其实就是:</span><br><span class="line">Func1 = <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(arg)</span>:</span></span><br><span class="line">			print(<span class="string">'Hello'</span>)</span><br><span class="line">			result = fun(arg)</span><br><span class="line">			print(<span class="string">'Python'</span>)</span><br><span class="line">			<span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
</li>
<li><p>带参数的装饰器</p>
</li>
<li>在函数执行的前后,执行任意函数</li>
</ul>
<h4 id="面向对象编程">面向对象编程</h4><ul>
<li>静态方法: 方法上加上@staticmethod 使用方式为 类名.方法名(参数) 或者 对象.方法名(参数)</li>
<li>特性 只读: 方法上面加上@property 使用方式为 对象.方法名  不需要带括号</li>
<li>特性 只写: 方法上面加上@方法名.setter 使用方式为 对象.方法名  不需要带括号 = 需要传人的参数值</li>
<li>经典类中的特性全部都是可读可写(没有只读的功能)</li>
<li>新式类中的特性默认都是只读,如果想要设置,那么就需要再创建一个被装饰@方法名.setter修饰的特性</li>
<li>私有字段: __字段名</li>
<li>私有方法: __方法名(参数) </li>
<li>调用私有方法-不建议使用: 对象名.<em>类名_</em>私有方法名(参数)</li>
<li>析构函数: <strong>del</strong>(self) 对象销毁的时候会调用这个方法通知它对象即将要销毁了</li>
<li><strong>call</strong>方法: 对象() 默认执行类里面的<strong>call</strong>方法</li>
<li>子类调用父类的函数: 父类.函数名(参数) 或者 super(子类名, self).父类函数名(参数)</li>
<li>新式类: 类继承自object </li>
<li>经典类: 没有继承自object</li>
<li>多继承: 类名(类名, 类名)</li>
<li>抽象类: 在方法上加上@abstractmethod</li>
<li>在函数内部局部变量不能修改同名全局变量的值,如果要修改需要加上global</li>
<li>捕获并处理异常: try … except (ImportError,AttributeError),e: 处理异常 except Exception,ex: 处理异常 else: 没有出错的处理 finally: 无论异常与否,都会执行</li>
<li>打印对象的字符串表示的自定义信息: 重写<strong>str</strong>(self)</li>
<li>断言: assert(真假表达式)</li>
<li>主动触发异常: raise MyException(‘自定义错误’)</li>
<li>自定义异常<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, msg)</span>:</span></span><br><span class="line">		self.error = msg</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">		<span class="keyword">return</span> self.error</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="数据库和Socket操作"><a href="http://www.cnblogs.com/wupeiqi/articles/4198124.html" target="_blank" rel="external">数据库和Socket操作</a></h4><ul>
<li>安装MySQL: brew install mysql</li>
<li>由于Python2.7时代连接MySql的MySQLdb还不支持Python3.x,不过我们可以安装PyMySQL:pip install PyMySQL</li>
<li><p>数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">show databases;</span><br><span class="line">create database  [name];</span><br><span class="line">use [databasename];</span><br><span class="line">drop database [name];</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">show tables;</span><br><span class="line">create table  <span class="keyword">if</span> <span class="keyword">not</span> exists [表名] (属性名 数据类型 [完整约束条件]);</span><br><span class="line"></span><br><span class="line">完整性约束:</span><br><span class="line">约束条件				说明</span><br><span class="line">PRIMARY KEY         标识该属性为该表的主键,可以唯一的标识对应的元组</span><br><span class="line">FOREIGN KEY         标识该属性为该表的外键,是与之联系某表的主键</span><br><span class="line">NOT NULL            标识该属性不能为空</span><br><span class="line">UNIQUE              标识该属性的值是唯一的</span><br><span class="line">AUTO_INCREMENT      标识该属性的值是自动增加,这是MySQL的SQL语句的特色</span><br><span class="line">DEFAULT             为该属性设置默认值</span><br><span class="line"></span><br><span class="line">CREATE TABLE teacher (</span><br><span class="line">    id int PRIMARY KEY,</span><br><span class="line">    stu_id int,</span><br><span class="line">    name varchar(<span class="number">20</span>),</span><br><span class="line">    CONSTRAINT STUID FOREIGN KEY(stu_id) REFERENCES student1(id)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CREATE TABLE student (</span><br><span class="line">    id int PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">    teacher_id int UNIQUE,</span><br><span class="line">    name varchar(<span class="number">20</span>) NOT NULL,</span><br><span class="line">    sex varchar(<span class="number">10</span>) DEFAULT <span class="string">'male'</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看表结构:</span><br><span class="line">DESC [表名];</span><br><span class="line"></span><br><span class="line">查看表详细结构语句:</span><br><span class="line">SHOW CREATE TABLE [表名];</span><br><span class="line"></span><br><span class="line">修改表名:</span><br><span class="line">ALTER TABLE 旧表名 RENAME 新表名;</span><br><span class="line"></span><br><span class="line">修改字段的数据类型:</span><br><span class="line">ALTER TABLE 表名 MODIFY 属性名 数据类型;</span><br><span class="line"></span><br><span class="line">修改字段名:</span><br><span class="line">ALTER TABLE 表名 CHANGE 旧属性名 新属性名 新数据类型; <span class="comment">#如果你不想修改数据类型的话就按照原来的写就行了</span></span><br><span class="line"></span><br><span class="line">增加字段:</span><br><span class="line">ALTER TABLE 表名 ADD 属性名<span class="number">1</span> 数据类型 [完整性约束条件] [FIRST | AFTER 属性名<span class="number">2</span>];</span><br><span class="line">其中,<span class="string">"属性名1"</span>参数指需要增加的字段的名称;<span class="string">"FIRST"</span>参数是可选参数,其作用是将新增字段设置为表的第一个字段;<span class="string">"AFTER"</span>参数也是可选的参数,其作用是将新增字段添加到<span class="string">"属性名2"</span>后面;<span class="string">"属性名2"</span>当然就是指表中已经有的字段</span><br><span class="line"></span><br><span class="line">删除字段:</span><br><span class="line">ALTER TABLE 表名 DROP 属性名;</span><br><span class="line"></span><br><span class="line">删除表的外键约束:</span><br><span class="line">ALTER TABLE 表名 DROP FOREIGN KEY 外键别名;</span><br><span class="line"></span><br><span class="line">删除表:</span><br><span class="line">DROP TABLE 表名;</span><br><span class="line">删除没有被关联的普通表: 直接上面的SQL语句就行了</span><br><span class="line">删除被其他表关联的父表:</span><br><span class="line">方法一: 先删除子表,在删除父表</span><br><span class="line">方法二: 删除父表的外键约束（上面有介绍）,再删该表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">插入数据:</span><br><span class="line">INSERT INTO table_name ( field1, field2,...fieldN )</span><br><span class="line">                       VALUES</span><br><span class="line">                       ( value1, value2,...valueN );</span><br><span class="line"></span><br><span class="line">删除数据:</span><br><span class="line">DELETE FROM table_name [WHERE Clause]</span><br><span class="line"></span><br><span class="line">更新数据:</span><br><span class="line">UPDATE table_name SET field1=new-value1, field2=new-value2</span><br><span class="line">[WHERE Clause]</span><br><span class="line"></span><br><span class="line">查询数据:</span><br><span class="line">SELECT column_name,column_name</span><br><span class="line">FROM table_name</span><br><span class="line">[WHERE Clause]</span><br><span class="line">[OFFSET M ][LIMIT N]</span><br><span class="line"></span><br><span class="line">你可以通过OFFSET指定SELECT语句开始查询的数据偏移量。默认情况下偏移量为<span class="number">0</span>。</span><br><span class="line">你可以使用 LIMIT 属性来设定返回的记录数。</span><br></pre></td></tr></table></figure>
</li>
<li><p>什么是socket<br>所谓socket通常也称作”套接字”,用于描述IP地址和端口,是一个通信链的句柄,应用程序通常通过”套接字”向网络发出请求或者应答网络请求。<br>socket起源于Unix,而Unix/Linux基本哲学之一就是”一切皆文件”,都可以用”打开open –&gt; 读写write/read –&gt; 关闭close”模式来操作。Socket就是该模式的一个实现,socket即是一种特殊的文件,一些socket函数就是对其进行的操作（读/写IO、打开、关闭）<br><img src="http://images.cnitblog.com/blog/425762/201501/021241169032248.png" alt=""></p>
</li>
</ul>
<h4 id="多线程"><a href="http://www.cnblogs.com/wupeiqi/articles/4356675.html" target="_blank" rel="external">多线程</a></h4><h4 id="多进程"><a href="https://docs.python.org/3/library/multiprocessing.html?highlight=multi#module-multiprocessing" target="_blank" rel="external">多进程</a></h4><h4 id="django"><a href="http://www.cnblogs.com/wupeiqi/articles/4491246.html" target="_blank" rel="external">django</a></h4><ul>
<li>第一步: 安装django-<code>pip install django</code></li>
<li>第二步: 创建项目 <code>django-admin startproject 项目名称</code></li>
<li>第三步: 创建App <code>python manage.py startapp App名称</code></li>
<li>第四步: 使用PyMySQL来连接MySQL时需要在工程目录下的<strong>init</strong>.py文件中输入<code>import pymysql 
pymysql.install_as_MySQLdb()</code></li>
<li><p>第五步: 修改工程目录下的settings.py配置文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="comment"># 'default': &#123;</span></span><br><span class="line">    <span class="comment">#     'ENGINE': 'django.db.backends.sqlite3',</span></span><br><span class="line">    <span class="comment">#     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),</span></span><br><span class="line">    <span class="comment"># &#125;</span></span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.mysql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'test_django_db'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'root'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="string">''</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第六步: 启动MySQL: brew services start mysql 或者 mysql.server start</p>
</li>
<li>第七步: 连接数据库: mysql -uroot</li>
<li>第八步: 创建并使用数据库</li>
<li>查看manage.py支持的命令:python manage.py help</li>
<li>第九步: 在应用程序目录中的models.py文件中创建数据库模型</li>
<li>第十步: python manage.py makemigrations polls</li>
<li>第十一步: python manage.py migrate<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserType</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    username = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    password = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    Gender = models.BooleanField(default=<span class="keyword">False</span>)</span><br><span class="line">    Age = models.IntegerField(default=<span class="number">21</span>)</span><br><span class="line">    memo = models.TextField(default=<span class="string">'xxxx'</span>)</span><br><span class="line">    CreateDate = models.DateTimeField(default=<span class="string">'2016-10-30 20:41'</span>)</span><br><span class="line">    typeId = models.ForeignKey(<span class="string">'UserType'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    Name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    Name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    Email = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    group_relation = models.ManyToManyField(<span class="string">'Group'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="文件处理">文件处理</h4><ul>
<li>读文件示例<figure class="highlight"><table><tr><td class="code"><pre><span class="line">myFile.txt</span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line"></span><br><span class="line">code:</span><br><span class="line">f = file('myFile.txt', 'r')</span><br><span class="line">for line in f.readlines():</span><br><span class="line">	line = line.strip('\n').split(':')</span><br><span class="line">	print(line)</span><br><span class="line"></span><br><span class="line">result:</span><br><span class="line">['root', 'x', '0', '0', 'root', '/root, '/bin/bash']</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">f = file('/etc/passwd')</span><br><span class="line">for i in f.readlines():</span><br><span class="line">	print(i.strip('\n').split(':')) #脱掉一行中行首和行尾的换行符,i.strip()为脱掉空格和换行符以及Tab</span><br></pre></td></tr></table></figure>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python包管理工具的安装和爬虫学习]]></title>
    <link href="http://yoursite.com/2016/09/25/python_scrapy_study/"/>
    <id>http://yoursite.com/2016/09/25/python_scrapy_study/</id>
    <published>2016-09-25T01:28:11.000Z</published>
    <updated>2016-10-14T12:17:02.000Z</updated>
    <content type="html"><![CDATA[<h4 id="pip简介"><a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external">pip</a>简介</h4><ul>
<li><code>pip</code>是一个安装和管理Python包的工具,是<code>easy_install</code>的一个替换品.<code>pip</code>的目标非常明确 – 取代<code>easy_install</code>. easy_install有很多不足:<ul>
<li>安装事务是非原子操作</li>
<li>只支持svn</li>
<li>没有提供卸载命令</li>
<li>安装一系列包时需要写脚本</li>
</ul>
</li>
<li>pip使用<a href="http://pip.readthedocs.io/en/latest/" target="_blank" rel="external">帮助文档</a></li>
</ul>
<a id="more"></a>
<ul>
<li>pip使用<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">pip install Scrapy</span><br><span class="line"><span class="comment"># 通过使用==, &gt;=, &lt;=, &gt;, &lt;来指定一个版本号。</span></span><br><span class="line">$ pip install <span class="string">'Markdown&lt;2.0'</span></span><br><span class="line"><span class="comment"># 卸载包</span></span><br><span class="line">pip uninstall Scrapy</span><br><span class="line"><span class="comment"># 升级包</span></span><br><span class="line">pip install --upgrade Scrapy</span><br><span class="line">pip install -U Scrapy</span><br><span class="line"><span class="comment"># 查询包</span></span><br><span class="line">pip search <span class="string">"Markdown"</span></span><br><span class="line"><span class="comment"># 列出已安装包</span></span><br><span class="line">pip freeze</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="卸载pip">卸载<a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external">pip</a></h4><ul>
<li>如果是通过<code>easy_install pip</code> 安装的pip 有可能会提示你更新pip,然后使用<code>pip install --upgrade pip</code>或者<code>pip install -U pip</code>会出现安装失败,提示你先卸载pip,这个时候可以使用下面的命令<code>sudo pip uninstall pip</code>先卸载pip然后再安装</li>
</ul>
<h4 id="安装pip">安装<a href="https://pypi.python.org/pypi/pip" target="_blank" rel="external">pip</a></h4><ul>
<li>下载<a href="https://pypi.python.org/packages/e7/a8/7556133689add8d1a54c0b14aeff0acb03c64707ce100ecd53934da1aa13/pip-8.1.2.tar.gz#md5=87083c0b9867963b29f7aba3613e8f4a" target="_blank" rel="external">pip-8.1.2.tar.gz (md5, pgp)</a>源码包,然后解压文件并进入<code>pip-8.1.2</code>目录,使用<code>sudo python setup.py install</code>安装.</li>
</ul>
<h4 id="安装setuptool">安装<a href="https://pypi.python.org/pypi/setuptools" target="_blank" rel="external">setuptool</a></h4><blockquote>
<p>easy_install是setuptools自带的安装脚本,也就是一旦setuptools安装完毕,easy_install也便可用.最大的特点是自动查找Python 官方维护的包源PyPI,安装第三方Python包非常方便</p>
<ul>
<li>通过curl下载安装<code>curl https://bootstrap.pypa.io/ez_setup.py -o - | python</code></li>
<li>easy_install 使用<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装包</span></span><br><span class="line">easy_install Scrapy</span><br><span class="line"><span class="comment"># 卸载包</span></span><br><span class="line">easy_install -m Scrapy</span><br><span class="line"><span class="comment"># 升级包</span></span><br><span class="line">easy_install --upgrade Scrapy</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h4 id="安装BeautifulSoup">安装<a href="https://www.crummy.com/software/BeautifulSoup/" target="_blank" rel="external">BeautifulSoup</a></h4><ul>
<li>通过<code>pip install beautifulsoup4</code>来安装</li>
</ul>
<h4 id="安装PhantomJS">安装<a href="http://phantomjs.org/quick-start.html" target="_blank" rel="external">PhantomJS</a></h4><blockquote>
<p>PhantomJS 是一个基于 WebKit 的服务器端 JavaScript API。它全面支持web而不需浏览器支持，其快速、原生支持各种Web标准：DOM 处理、CSS 选择器、JSON、Canvas 和 SVG。 PhantomJS 可以用于页面自动化、网络监测、网页截屏以及无界面测试等。</p>
</blockquote>
<ul>
<li>brew install phantomjs</li>
</ul>
<h4 id="安装PySpider">安装<a href="http://docs.pyspider.org/en/latest/" target="_blank" rel="external">PySpider</a></h4><blockquote>
<p><a href="http://www.pyspider.cn/" target="_blank" rel="external">pyspider中文网</a></p>
</blockquote>
<ul>
<li>直接利用 pip 安装即可 <code>sudo pip install pyspider</code></li>
<li>如果安装过程中出现<code>error: could not create &#39;/System/Library/Frameworks/Python.framework/Versions/2.7/share&#39;: Operation not permitted</code> 有一个方法,关机.开机前按着 <code>cmd键 + R</code> ,会进入一个 恢复模式. 在菜单栏 有一个选项:”终端”.进入终端后,输入 <code>csrutil disable</code> . 这样就关闭了OSX10.11的目录写入权限验证. 重启电脑,你会发现上述目录不再提示权限不足.剩下按照报错提示操作.要回复安全机制,同理回到之前的模式,然后输入 <code>csrutil enable</code></li>
<li>安装过程中可能缺少一些包,<a href="https://pypi.python.org/pypi" target="_blank" rel="external">打开</a>并搜索安装需要的包</li>
<li>最后执行<code>pyspider all</code>如果没有出错说明运行成功了,然后浏览器访问<code>http://localhost:5000</code>.</li>
</ul>
<h4 id="运行PySpider可能出现的问题">运行<a href="http://docs.pyspider.org/en/latest/" target="_blank" rel="external">PySpider</a>可能出现的问题</h4><ul>
<li>在终端中输入<code>pyspider all</code> 有可能会出现 <code>ImportError: No module named xmlrpc_server</code> 这个是因为你使用的是Python 2.7的问题,six 中的xmlrpc_server模块需要 Python3才能使用,解决办法:将Python切换到Python3之后,重新运行就不会报这个错了.如果当前已经是Python3还是存在这个问题可以尝试升级一下six库: <code>pip install -U six</code></li>
</ul>
<h4 id="Mac_OS_X_下_Python多版本共存">Mac OS X 下 Python多版本共存</h4><ul>
<li>安装pyenv.<code>brew install pyenv</code></li>
<li>然后使用<code>open -e ~/.bash_profile</code>打开.bash_profile文件,加入<code>eval &quot;$(pyenv init -)&quot;</code></li>
<li>最后执行<code>source ~/.bash_profile</code></li>
<li>查看 Python 安装路径: <code>which python</code></li>
</ul>
<h5 id="使用_pyenv_安装_Python_的其他版本">使用 pyenv 安装 Python 的其他版本</h5><ul>
<li>查看能安裝的版本 <code>pyenv install --list</code></li>
<li>使用 pyenv 安装 Python 3.5.2:<code>pyenv install 3.5.2 -v</code></li>
<li>安装完成后,更新数据库 <code>pyenv rehash</code></li>
<li>查看目前系统已安装的 Python 版本: <code>pyenv versions</code>.其中显示的<code>*</code>表示系统当前正在使用的版本</li>
<li>切换 Python 版本:<code>pyenv global 3.5.2</code></li>
<li>运行 Python,确认 Python 版本:<code>python --version</code></li>
<li>将 Python 切换回 2.7.10:<code>pyenv global 2.7.10</code></li>
<li>设置局部 Python 版本:<code>pyenv local &lt;python版本&gt;</code></li>
</ul>
<h5 id="查看路径">查看路径</h5><ul>
<li>在终端中输入:<code>echo $PATH</code> 接下來就会看到一串类似这样的東西 <code>/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin</code> , 分号 (:) 是分隔的意思,所以當你在 terminal 裡面輸入 brew 时系统就会开始从 /usr/bin 找起,如果在 /usr/bin 里面找不到的话<br>就会往下一个 /bin 去搜寻,以此类推</li>
<li><p>我们可以使用命令调整搜寻顺序: <code>sudo emacs /etc/paths</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">control + k：把一行字剪下來</span><br><span class="line">control + y：粘贴</span><br><span class="line">control + x + s：保存</span><br><span class="line">control + x + c：关掉 emacs</span><br></pre></td></tr></table></figure>
</li>
<li><p>调整好后,再打一次<code>echo $PATH</code>发现没有变更,需要开一个新的terminal才会看到调整后的内容</p>
</li>
</ul>
<h4 id="安装Scrapy">安装Scrapy</h4><ul>
<li><code>sudo -H pip install -U Scrapy</code></li>
</ul>
<h4 id="Scrapy的简单使用">Scrapy的简单使用</h4><ul>
<li>新建Scrapy项目: <code>scrapy startproject 项目名称</code></li>
<li><p>在当前项目中创建Spider: <code>cd 项目名称</code>、<code>scrapy genspider [-t template] &lt;name&gt; &lt;domain&gt;</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">-t 为使用的模板名称</span><br><span class="line">name spider名称</span><br><span class="line">domain 要爬取的网站域名</span><br><span class="line"></span><br><span class="line">查看可供使用的模板:</span><br><span class="line">scrapy genspider -l</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line">Available templates:</span><br><span class="line">  basic</span><br><span class="line">  crawl</span><br><span class="line">  csvfeed</span><br><span class="line">  xmlfeed</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查看使用指定模板生成的spider:</span><br><span class="line">scrapy genspider -d basic</span><br><span class="line"></span><br><span class="line">结果:</span><br><span class="line">class $classname(scrapy.Spider):</span><br><span class="line">    name = "$name"</span><br><span class="line">    allowed_domains = ["$domain"]</span><br><span class="line">    start_urls = (</span><br><span class="line">        'http://www.$domain/',</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    def parse(self, response):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">scrapy genspider -t basic example example.com</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看当前项目有哪些spider: <code>scrapy list</code></p>
</li>
<li>运行某个spider: <code>scrapy crawl name_spider</code></li>
<li>将爬取到的内容以json格式保存到文件: <code>scrapy crawl name_spider -o name.json -t json</code></li>
<li>查看scrapy中的组件版本: <code>scrapy version -v</code></li>
<li>查看页面源码在浏览器中显示的样子: <code>scrapy view 网址</code></li>
<li>用来测试在工程中使用固定的parse函数解析某个页面是否存在问题: <code>scrapy parse 网址</code></li>
<li>用shell来调试数据、检测xpath、查看页面源码,等等: <code>scrapy shell 网址</code></li>
<li>运行自包含的爬虫: <code>scrapy runspider stackoverflow_spider.py</code></li>
<li>执行一个基准测试: <code>scrapy bench</code> 可用来检测scrapy是否安装成功</li>
</ul>
<h5 id="基类(scrapy-Spider)介绍">基类(scrapy.Spider)介绍</h5><ul>
<li>属性:<ul>
<li>name: spider的名称,要求唯一 </li>
<li>allowed_domains: 允许的域名</li>
<li>start_urls: 初始urls</li>
<li>custom_settings: 个性化配置,会覆盖全局的设置</li>
<li>crawler: 抓取器,spider将绑定在它上面</li>
<li>settings: 配置实例,包含工程中所有的配置变量</li>
<li>logger: 日志实例</li>
</ul>
</li>
<li>方法:<ul>
<li>from_crawler(cls, crawler, <em>args, *</em>kwargs): 类方法,用来创建spiders</li>
<li>start_requests(): 生成初始化的requests</li>
<li>make_requests_from_url(url): 根据url生成一个request</li>
<li>parse(response): 用来解析网页内容</li>
<li>log(self, message, level=logging.DEBUG, **kw): 用来记录日志,这里请使用logger属性来记录日志self.logger.info(“xxx”)</li>
<li>close(spider, reason): 当spider关闭的时候调用的方法</li>
</ul>
</li>
</ul>
<h5 id="Spider子类介绍">Spider子类介绍</h5><ul>
<li>CrawlSpider: 最常用的spider,用于抓取普通的网页.增加了两个成员:<ul>
<li>rules: 定义了一些抓取的规则—连接怎么跟踪、使用哪一个parse函数解析此连接</li>
<li>parse_start_url(response): 解析初始化url的响应</li>
</ul>
</li>
<li>XMLFeedSpider</li>
<li>CSVFeedSpider</li>
<li>SitemapSpider</li>
</ul>
<h5 id="网页内容抽取器Selector">网页内容抽取器Selector</h5><ul>
<li>用来解析网页的库有很多,比如beautifulsoup、lxml,但在scrapy里面默认使用的是selector,相对来说也是最好用的</li>
<li><p>基本使用:</p>
<ul>
<li><p>实例化: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.selector <span class="keyword">import</span> Selector</span><br><span class="line"><span class="keyword">from</span> scrapy.http <span class="keyword">import</span> HtmlResponse</span><br><span class="line"></span><br><span class="line">方式一:</span><br><span class="line">body = <span class="string">'&lt;html&gt;&lt;body&gt;&lt;span&gt;good&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;'</span> </span><br><span class="line">Selector(text=body).xpath(<span class="string">'//span/text()'</span>).extract()</span><br><span class="line"></span><br><span class="line">方式二:</span><br><span class="line">response = HtmlResponse(url=<span class="string">'http://example.com'</span>,body=body)</span><br><span class="line">Selector(response=response).xpath(<span class="string">'//span/text()'</span>).extract()</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用方法: xpath、css、re、extract</p>
</li>
</ul>
</li>
</ul>
<h4 id="XPath知识点">XPath知识点</h4><ul>
<li>对于要一次同时提取几个标签里的文本,可以采用如下形式:<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div id="test-1"&gt;需要的内容1&lt;/div&gt;</span><br><span class="line">&lt;div id="test-2"&gt;需要的内容2&lt;/div&gt;</span><br><span class="line">&lt;div id="testfault"&gt;需要的内容3&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">contents = Selector(response).xpath('//div[start-with(@id,'test')]/text()').extract()</span><br><span class="line">for content in contents:</span><br><span class="line">	print(content)</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="pip简介"><a href="https://pypi.python.org/pypi/pip">pip</a>简介</h4><ul>
<li><code>pip</code>是一个安装和管理Python包的工具,是<code>easy_install</code>的一个替换品.<code>pip</code>的目标非常明确 – 取代<code>easy_install</code>. easy_install有很多不足:<ul>
<li>安装事务是非原子操作</li>
<li>只支持svn</li>
<li>没有提供卸载命令</li>
<li>安装一系列包时需要写脚本</li>
</ul>
</li>
<li>pip使用<a href="http://pip.readthedocs.io/en/latest/">帮助文档</a></li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[汇编语言学习]]></title>
    <link href="http://yoursite.com/2016/09/10/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/09/10/汇编语言学习/</id>
    <published>2016-09-10T01:28:11.000Z</published>
    <updated>2016-10-14T12:16:36.000Z</updated>
    <content type="html"><![CDATA[<h4 id="Mac_上搭建汇编环境">Mac 上搭建汇编环境</h4><ul>
<li>下载<a href="https://www.dosbox.com/" target="_blank" rel="external">DOSBOX</a></li>
<li>下载debug.exe程序到Mac</li>
<li>最后运行DOSBOX,并挂载本地debug.exe所在的目录到DOSBOX的一个盘符,比如你的debug.exe在<code>/Users/weifeng/Downloads/DOS/</code>,就在DOSBOX中运行命令:<code>mount c: /Users/weifeng/Downloads/DOS/</code>,再运行命令<code>c:</code>进入c盘符,最后运行命令:<code>debug</code>,就行了.</li>
</ul>
<a id="more"></a>
<h4 id="寄存器">寄存器</h4><ul>
<li>AX、BX、CX、DX是通用寄存器</li>
<li>它们有分成AH、AL…</li>
<li>它们是用来存储数据的</li>
</ul>
<h5 id="地址加法器工作原理">地址加法器工作原理</h5><ul>
<li>8086CPU外部提供了20根地址总线,而CPU内部由于技术的问题只能提供16位的地址那怎么办呢? 它提供了血汗工厂:地址加法器,将2个16位的地址最后合成一个20位的地址.</li>
<li>地址加法器合成物理地址的方法:<code>物理地址 = 段地址 * 16 + 偏移地址</code> 其中段地址存储在段寄存器中,8086CPU有4个段寄存器:CS、DS、SS、ES.</li>
<li>段地址乘以16相当于向左移一位.例如对于十进制数:<code>3 * 10 = 30</code> 向左移一位</li>
<li>1个16进制的数代表4个二进制的位</li>
<li><code>段地址 * 16</code> 有一个更为常用的说法就是数据左移4位.(二进制位)</li>
<li>一个数据的二进制形式左移1位,相当于该数乘以2;</li>
<li>一个数据的二进制形式左移N位,相当于该数据乘以2的N次方;</li>
<li>一个数据的十六进制形式左移1位,相当于乘以16;</li>
<li>一个数据的十进制形式左移1位,相当于乘以10;</li>
<li>一个数据的X进制形式左移1位,相当于乘以X;</li>
</ul>
<!--more-->
<h4 id="段的概念">段的概念</h4><ul>
<li>内存并没有分段,段的划分来自于CPU,由于8086CPU用<code>物理地址 = 段地址 * 16 + 偏移地址</code>的方式给出内存单元的物理地址,使得我们可以用分段的方式来管理内存.</li>
<li><code>段地址 *  16</code>必然是16的倍数,所以一个段的起始地址也一定是16的倍数;</li>
<li>偏移地址为16位,16位地址的寻址能力为64K,所以一个段的长度最大为64K.</li>
<li>CPU可以用不同的段地址和偏移地址形成同一个物理地址</li>
<li>偏移地址16位,变化范围为0~FFFFH,仅用偏移地址来寻址最多可寻64K个内存单元</li>
<li>比如:给定段地址1000H,用偏移地址寻址,CPU的寻址范围为:10000H~1FFFFH.</li>
<li>在8086PC机中,存储单元的地址用两个元素来描述.即段地址和偏移地址.</li>
<li>可根据需要,将地址连续、起始地址为16的倍数的一组内存单元定义为一个段</li>
</ul>
<h4 id="段寄存器">段寄存器</h4><ul>
<li>段寄存器就是提供段地址的.<br>8086CPU有4个段寄存器:CS、DS、SS、ES</li>
<li>当有8086CPU需要访问内存时,由这4个段寄存器提供内存单元的段地址.</li>
<li>CS是Code Segement是代码段地址寄存器</li>
<li>DS是Data Segement是数据段地址寄存器</li>
<li>SS是Stack Segement是堆栈段地址寄存器</li>
<li>ES是附加段地址寄存器</li>
<li>CS和IP是8086CPU中最关键的寄存器,它们指示了CPU当前要读取指令的地址</li>
<li>IP为指令指针寄存器</li>
</ul>
<h4 id="8086CPU工作过程的简要描述">8086CPU工作过程的简要描述</h4><ul>
<li>从CS:IP指向内存单元读取指令,读取的指令进入指令缓冲器;</li>
<li>IP = IP + 所读取指令的长度,从而指向下一条指令;</li>
<li>执行指令.转到步骤 1 ,重复这个过程.</li>
</ul>
<h4 id="8086CPU工作过程的简要描述-1">8086CPU工作过程的简要描述</h4><ul>
<li>在8086CPU加电启动或复位后(即CPU刚开始工作时)CS和IP被设置为CS = FFFFH,IP = 0000H.</li>
<li>即在8086PC机刚启动时,CPU从内存FFFF0H单元中读取指令执行.</li>
<li>FFFF0H单元中的指令是8086PC机开机后执行的第一条指令.</li>
</ul>
<h4 id="CS和IP">CS和IP</h4><ul>
<li>在任何时候,CPU将CS、IP的内容当作指令的段地址和偏移地址,用它们合成指令的物理地址,到内存中读取指令码,执行.</li>
<li>如果说,内存中的一段信息曾被CPU执行过的话,那么,它所在的内存单元必然被CS:IP指向过.</li>
</ul>
<h4 id="修改CS、IP的指令">修改CS、IP的指令</h4><ul>
<li>在CPU中,程序员能够用指令读写的部件只有寄存器,程序员可以通过改变寄存器中的内容实现对CPU的控制</li>
<li>CPU从何处执行指令是有CS、IP中的内容来控制CPU执行目标指令.</li>
</ul>
<h4 id="如何修改AX中的值">如何修改AX中的值</h4><ul>
<li>mov 指令</li>
<li>如: mov ax,123</li>
<li>mov 指令可以改变8086CPU大部分寄存器的值,被称为传送指令</li>
</ul>
<h4 id="修改CS、IP的指令-1">修改CS、IP的指令</h4><ul>
<li>mov指令不能用于设置CS、IP的值,8086CPU没有提供这样的功能</li>
<li>8086CPU为CS、IP提供了另外的指令来改变它们的值:转移指令</li>
<li>同时修改CS、IP的内容:jmp 段地址 : 偏移地址</li>
<li>jmp 2AE3:3 (最后的地址为2AE33H)   jmp 3:0B16 (最后的地址为00B46H)</li>
<li>功能:用指令中给出的段地址修改CS,偏移地址修改IP</li>
<li>仅修改IP的内容: jmp 某一合法寄存器  </li>
<li>jmp ax (类似于 mov IP,ax) 、jmp bx</li>
<li>功能:用寄存器中的值修改IP</li>
</ul>
<h4 id="代码段">代码段</h4><ul>
<li>对于8086PC机,在编程时,可以根据需要,将一组内存单元定义为一个段.</li>
<li>可以将长度为N(N&lt;=64KB)的一组代码,存在一组地址连续、起始地址为16的倍数的内存单元中,这段内存是用来存放代码的,从而定义了一个代码段</li>
<li>CPU只能被CS:IP指向的内存单元中的内容为指令</li>
<li>所以要将CS:IP指向所定义的代码段中的第一条指令的首地址.</li>
</ul>
<h4 id="DEBUG">DEBUG</h4><ul>
<li>R命令查看、改变CPU寄存器的内容</li>
<li>D命令查看内存中的内容</li>
<li>E命令改写内存中的内容</li>
<li>U命令将内存中的机器指令翻译成汇编指令</li>
<li>T命令执行一条机器指令</li>
<li>A命令以汇编指令的格式在内存中写入一条机器指令<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">e <span class="number">1000</span>:<span class="number">0</span> <span class="number">23</span> <span class="number">11</span> <span class="number">22</span> <span class="number">66</span> -&gt; 向<span class="number">10000</span>H内存单元地址中写入 <span class="number">23</span> <span class="number">11</span> <span class="number">22</span> <span class="number">66</span></span><br><span class="line">d <span class="number">1000</span>:<span class="number">0</span> -&gt; 查看<span class="number">10000</span>H内存单元地址中写入的数据</span><br><span class="line">r 查看CPU寄存器的内容</span><br><span class="line">a <span class="number">073</span>f:<span class="number">011</span>a -&gt; 开始往<span class="number">0750</span>a中写入代码</span><br><span class="line">mov ax,<span class="number">1000</span></span><br><span class="line">mov ds,ax</span><br><span class="line">mov ax,[<span class="number">0</span>]</span><br><span class="line">mov bx,[<span class="number">2</span>]</span><br><span class="line">mov cx,[<span class="number">1</span>]</span><br><span class="line">add bx,[<span class="number">1</span>]</span><br><span class="line">add cx,[<span class="number">2</span>]</span><br><span class="line">t 单步执行汇编指令直到执行结束查看每一步执行时 ax、ds等的变化</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="DS和[address]">DS和[address]</h4><ul>
<li>mov 指令的格式: mov 寄存器名,内存单元地址</li>
<li>“[…]” 表示一个内存单元,”[…]”中的0表示内存单元的偏移地址.</li>
<li>执行指令时,8086CPU自动取DS中的数据为内存单元的段地址.</li>
<li>如何用mov指令从10000H中读取数据?<ul>
<li>mov bx,1000H -&gt; mov ds,bx -&gt; mov al,[0]</li>
<li>10000H表示为1000:0(段地址:偏移地址)</li>
<li>将段地址1000H放入ds</li>
<li>用mov al,[0]完成传送(mov指令中的[]说明操作对象是一个内存单元,[]中的0说明这个内存单元的偏移地址是0,它的段地址默认放在ds中)</li>
</ul>
</li>
<li>如何把1000H送入ds?    </li>
<li>8086CPU不支持将数据直接送入段寄存器的操作,ds是一个段寄存器.</li>
<li>mov ds,1000H是非法的.</li>
<li>数据 -&gt; 通用寄存器 -&gt; 段寄存器</li>
<li>怎样将数据从寄存器送入内存单元?<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">move bx,<span class="number">1000</span>H</span><br><span class="line">move ds,bx</span><br><span class="line">move [<span class="number">0</span>],a1</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="值的传送">值的传送</h4><ul>
<li>因为8086CPU是16位结构,有16根数据线,所以,可以一次性传送16位的数据,也就是一次性传送一个字.</li>
<li>比如:<pre><code class="objc">mov bx,<span class="number">1000</span>H
mov ds,bx
mov ax,[<span class="number">0</span>]  <span class="number">1000</span>:<span class="number">0</span>处的字型数据送入ax
mov [<span class="number">0</span>],cx  cx中的<span class="number">16</span>位数据送到<span class="number">1000</span>:<span class="number">0</span>处
</code></pre>
</li>
</ul>
<h4 id="CPU提供的栈机制">CPU提供的栈机制</h4><ul>
<li>8086CPU提供入栈和出栈指令:<ul>
<li>PUSH (入栈)</li>
<li>POP (出栈)</li>
</ul>
</li>
<li>push ax: 将寄存器ax中的数据送人栈中</li>
<li>pop ax: 从栈顶取出数据送人ax</li>
<li>8086CPU的入栈和出栈操作都是以字为单位进行的</li>
<li>8086CPU中,有两个寄存器:<ul>
<li>段寄存器SS 存放栈顶的段地址</li>
<li>寄存器SP 存放栈顶的偏移地址</li>
</ul>
</li>
<li>任意时刻,SS:SP指向栈顶元素.</li>
</ul>
<h4 id="push指令的执行过程">push指令的执行过程</h4><ul>
<li>push ax<ul>
<li>SP = SP - 2</li>
<li>将ax中的内容送人SS:SP指向的内存单元处,SS:SP此时指向新栈顶.</li>
</ul>
</li>
<li>任意时刻,SS:SP指向栈顶元素,当栈为空的时候,栈中没有元素,也就不存在栈顶元素</li>
<li>所以SS:SP只能指向栈的最底部单元下面的单元,该单元的偏移地址为栈最底部的字单元的偏移地址+2</li>
<li>栈最底部字单元的地址为1000:000E,所以栈空时,SP=0010H。</li>
</ul>
<h4 id="pop指令的执行过程">pop指令的执行过程</h4><ul>
<li>pop ax<ul>
<li>将SS:SP指向的内存单元处的数据送人ax中</li>
<li>SP = SP + 2, SS:SP指向当前栈顶下面的单元,以当前栈顶下面的单元为新的栈顶</li>
</ul>
</li>
</ul>
<h4 id="push、pop指令">push、pop指令</h4><ul>
<li>push和pop指令是可以在寄存器和内存之间传送数据的</li>
<li>push 寄存器 : 将一个寄存器中的数据入栈</li>
<li>pop 寄存器  : 用一个寄存器接收出栈的数据</li>
<li>push 段寄存器 : 将一个段寄存器中的数据入栈</li>
<li>pop 段寄存器 : 出栈,用一个段寄存器接收出栈的数据</li>
<li>push 内存单元 : 讲一个内存单元处的字入栈(栈操作都是以字为单位)</li>
<li>pop 内存单元 : 出栈,用一个内存字单元接收出栈的数据</li>
<li>指令执行时,CPU要知道内存单元的地址,可以在push、pop指令中给出内存单元的偏移地址,段地址在指令执行时,CPU从ds中取得.</li>
</ul>
<h4 id="栈与内存">栈与内存</h4><ul>
<li>栈空间当然也是内存空间的一部分,它只是一段可以以一种特殊的方式进行访问的内存空间</li>
<li>push、pop实质上就是一种内存传送指令,可以在寄存器和内存之间传送数据,与mov指令不同的是,push和pop指令访问的内存单元的地址不是指令中给出的,而是由SS:SP指出的.</li>
<li>同时,push和pop指令还要改变SP中的内容</li>
<li>执行push时 先改变SP,然后向SS:SP处传送.</li>
<li>执行pop时    先读取SS:SP处的数据,然后改变SP.</li>
<li>push、pop等栈操作指令,修改的只是SP也就是说,栈顶的变化范围最大为:0~FFFFH.因为SP存放的也是16位,所以最大值是FFFFH,2的16次方 = 65536,65536/1024 = 64KB,最大存储64KB的数据</li>
</ul>
<h4 id="定义一个段">定义一个段</h4>]]></content>
    <summary type="html">
    <![CDATA[<h4 id="Mac_上搭建汇编环境">Mac 上搭建汇编环境</h4><ul>
<li>下载<a href="https://www.dosbox.com/">DOSBOX</a></li>
<li>下载debug.exe程序到Mac</li>
<li>最后运行DOSBOX,并挂载本地debug.exe所在的目录到DOSBOX的一个盘符,比如你的debug.exe在<code>/Users/weifeng/Downloads/DOS/</code>,就在DOSBOX中运行命令:<code>mount c: /Users/weifeng/Downloads/DOS/</code>,再运行命令<code>c:</code>进入c盘符,最后运行命令:<code>debug</code>,就行了.</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
</feed>