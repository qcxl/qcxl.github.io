<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Mobile Development]]></title>
  <subtitle><![CDATA[移动开发]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com//"/>
  <updated>2017-08-24T12:58:12.000Z</updated>
  <id>http://yoursite.com//</id>
  
  <author>
    <name><![CDATA[weifeng]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/08/24/centeros_study/"/>
    <id>http://yoursite.com/2017/08/24/centeros_study/</id>
    <published>2017-08-24T12:58:15.000Z</published>
    <updated>2017-08-24T12:58:12.000Z</updated>
    <content type="html"><![CDATA[<p>title: VPS主机安装图形界面<br>date: 2017-08-24 20:57:02<br>tags: </p>
<h3 id="CentOS_版本">CentOS 版本</h3><ul>
<li>查看CentOS 版本 <code>cat /etc/system-release</code></li>
</ul>
<h3 id="EPEL_是什么？">EPEL 是什么？</h3><blockquote>
<p>EPEL (Extra Packages for Enterprise Linux,企业版Linux的额外软件包) 是Fedora小组维护的一个软件仓库项目,为RHEL/CentOS提供他们默认不提供的软件包。这个源兼容RHEL及像CentOS和Scientific Linux这样的衍生版本。我们可以很容易地通过yum命令从EPEL源上获取上万个在CentOS自带源上没有的软件。EPEL提供的软件包大多基于其对应的Fedora软件包，不会与企业版Linux发行版本的软件发生冲突或替换其文件。</p>
</blockquote>
<ul>
<li>安装EPEL <code>yum install epel-release</code></li>
</ul>
<a id="more"></a>
<h4 id="检查EPEL源">检查EPEL源</h4><blockquote>
<p>EPEL源的配置安装到了 /etc/yum.repos.d/epel.repo 文件</p>
</blockquote>
<ul>
<li>安装好EPEL 源后,用yum命令来检查是否添加到源列表 <code>yum repolist</code></li>
</ul>
<h3 id="使用YUM源安装图形界面">使用YUM源安装图形界面</h3><ul>
<li><p>对于 CentOS 6, Desktop、Desktop Platform、KDE Desktop、X Window System 是主要的桌面环境。</p>
</li>
<li><p>对于 CentOS 7, 有 KDE Plasma Workspaces 和 Gnome Desktop 两大桌面环境。</p>
</li>
<li><p>查看可安装组件 <code>yum grouplist</code></p>
</li>
<li><p>安装 X Window System 图形界面 <code>yum groupinstall &quot;X Window System&quot;</code></p>
</li>
<li><p>如果安装GNOME 桌面 <code>yum groupinstall &quot;X Window System&quot; &quot;Desktop Platform&quot; Desktop</code> 即可,也是同时安装了 3 个软件包,其中 X Window System 是必须的,不管是 Gnome 还是 KDE。</p>
</li>
<li><p>安装 KDE 桌面 <code>groupinstall &quot;X Window System&quot; &quot;KDE Desktop&quot; Desktop</code> 即可,同时安装了 3 个软件包。注意,因为 KDE Desktop 和  X Window System 两个软件包名称中间都包含空格,需要用引号引起来才行。</p>
</li>
<li><p>安装Xfce <code>yum install xorg-x11-fonts-Type1 xorg-x11-fonts-misc</code></p>
</li>
<li><p>搜索 <code>yum search xfce</code></p>
</li>
<li><p><code>yum groupinfo xfce</code> </p>
</li>
<li><p><a href="http://blog.inticol.com/2012/10/installing-xfce-on-centos-6.html" target="_blank" rel="external">Installing XFCE on CentOS 6</a></p>
</li>
</ul>
<h3 id="安装其它工具">安装其它工具</h3><ul>
<li><code>yum -y groupinstall &quot;Graphical Administration Tools&quot;</code></li>
<li><code>yum -y groupinstall &quot;Internet Browser&quot;</code></li>
<li><code>yum -y groupinstall &quot;General Purpose Desktop&quot;</code></li>
<li><code>yum -y groupinstall &quot;Office Suite and Productivity&quot;</code></li>
<li><code>yum -y groupinstall &quot;Graphics Creation Tools&quot;</code></li>
</ul>
<h3 id="启用">启用</h3><ul>
<li>从命令行直接启动图形桌面环境<code>startx</code></li>
</ul>
<h3 id="安装输入法">安装输入法</h3><ul>
<li><p><code>yum groupinstall &quot;Input Methods&quot;</code></p>
</li>
<li><p>安装中文支持 <code>Yum groupinstall &quot;Chinese support&quot;</code></p>
</li>
</ul>
<h3 id="安装并配置VNC">安装并配置VNC</h3><h4 id="检查是否已安装VNC">检查是否已安装VNC</h4><ul>
<li><code>rpm -qa | grep vnc</code></li>
</ul>
<h4 id="下载和安装VNC">下载和安装VNC</h4><ul>
<li><code>yum install tigervnc tigervnc-server -y</code></li>
</ul>
<h4 id="配置vncserver">配置vncserver</h4><ul>
<li>打开vncservers配置文件 <code>vi /etc/sysconfig/vncservers</code></li>
</ul>
<p>修成成如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VNCSERVERS=<span class="string">"1:root"</span></span><br><span class="line">VNCSERVERARGS[<span class="number">1</span>]=<span class="string">"-geometry 1024x768  -nolisten tcp -localhost"</span></span><br></pre></td></tr></table></figure>
<h4 id="设置vnc访问密码">设置vnc访问密码</h4><p>这里是为上面的root远程用户配密码,所以在root账户下配;依次类推,为别的账户配密码,就要在别的账户下设密码。</p>
<ul>
<li>设置或修改VNC登录密码 <code>vncpasswd</code> </li>
</ul>
<h4 id="配置防火墙规则,允许VNC远程连接">配置防火墙规则,允许VNC远程连接</h4><ul>
<li><p><code>iptables -N RH-Firewall-1-INPUT</code></p>
</li>
<li><p><code>service iptables save</code></p>
</li>
<li><p>编辑<code>/etc/sysconfig/iptables</code> 添加如下内容</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Generated by iptables-save v1.4.7 on Tue Aug 15 00:35:51 2017</span></span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [<span class="number">6</span>:<span class="number">533</span>]</span><br><span class="line">:FORWARD ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</span><br><span class="line">:OUTPUT ACCEPT [<span class="number">4</span>:<span class="number">496</span>]</span><br><span class="line">:RH-Firewall-<span class="number">1</span>-INPUT - [<span class="number">0</span>:<span class="number">0</span>]</span><br><span class="line">-ARH-Firewall-<span class="number">1</span>-INPUT -m state --state NEW -m tcp -p tcp --dport <span class="number">3690</span> -j ACCEPT</span><br><span class="line">-ARH-Firewall-<span class="number">1</span>-INPUT -m state --state NEW -m tcp -p tcp --dport <span class="number">5801</span> -j ACCEPT</span><br><span class="line">-ARH-Firewall-<span class="number">1</span>-INPUT -m state --state NEW -m tcp -p tcp --dport <span class="number">5901</span> -j ACCEPT</span><br><span class="line">-ARH-Firewall-<span class="number">1</span>-INPUT -m state --state NEW -m tcp -p tcp --dport <span class="number">5902</span> -j ACCEPT</span><br><span class="line">-ARH-Firewall-<span class="number">1</span>-INPUT -m state --state NEW -m tcp -p tcp --dport <span class="number">6001</span> -j ACCEPT</span><br><span class="line">COMMIT</span><br><span class="line"><span class="comment"># Completed on Tue Aug 15 00:35:51 2017</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>重启防火墙 <code>service iptables restart</code> 或者 <code>/etc/init.d/iptables restart</code></p>
</li>
<li><p>关闭防火墙 <code>/etc/init.d/iptables stop</code></p>
</li>
</ul>
<h4 id="启动服务（开启多个远程端口）并设置开机自启动">启动服务（开启多个远程端口）并设置开机自启动</h4><h5 id="启动方式一">启动方式一</h5><p>让系统自动分配连接端口</p>
<p>直接输入则会自动打开一个连接服务 <code>vncserver</code></p>
<h5 id="启动方式二">启动方式二</h5><p>指定端口启动,如果指定端口的vnc服务已经启动则会提示,如果还没有启动则会重新启动特定端口的vnc服务</p>
<p><code>vncserver :1</code>  指定端口1（即系统的5901端口）启动服务,注意”:1”之前有一个空格</p>
<p><code>vncserver :2</code>  指定端口2（即系统的5902端口）启动服务</p>
<h5 id="启动方式三—开机自启动">启动方式三—开机自启动</h5><p>设置开机自动启动服务 <code>chkconfig vncserver on</code></p>
<p>查看设置是否设置成功 <code>chkconfig --list | grep vncvncserver</code></p>
<h4 id="关闭vncserver">关闭vncserver</h4><ul>
<li><p>执行kill命令,关闭端口1 <code>vncserver -kill :1</code></p>
</li>
<li><p>执行kill命令,关闭端口2 <code>vncserver -kill :2</code></p>
</li>
</ul>
<p>注意: -kill与:1或:2中间有一空格</p>
<h3 id="Mac使用VNC连接服务器">Mac使用VNC连接服务器</h3><ul>
<li><p><a href="https://pan.baidu.com/s/1kVxa8Vd" target="_blank" rel="external">VNC 破解版</a></p>
</li>
<li><p>打开VNC 输入<code>104.224.166.106:1</code> 进行登录</p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>title: VPS主机安装图形界面<br>date: 2017-08-24 20:57:02<br>tags: </p>
<h3 id="CentOS_版本">CentOS 版本</h3><ul>
<li>查看CentOS 版本 <code>cat /etc/system-release</code></li>
</ul>
<h3 id="EPEL_是什么？">EPEL 是什么？</h3><blockquote>
<p>EPEL (Extra Packages for Enterprise Linux,企业版Linux的额外软件包) 是Fedora小组维护的一个软件仓库项目,为RHEL/CentOS提供他们默认不提供的软件包。这个源兼容RHEL及像CentOS和Scientific Linux这样的衍生版本。我们可以很容易地通过yum命令从EPEL源上获取上万个在CentOS自带源上没有的软件。EPEL提供的软件包大多基于其对应的Fedora软件包，不会与企业版Linux发行版本的软件发生冲突或替换其文件。</p>
</blockquote>
<ul>
<li>安装EPEL <code>yum install epel-release</code></li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[POSIX线程]]></title>
    <link href="http://yoursite.com/2017/08/11/posix/"/>
    <id>http://yoursite.com/2017/08/11/posix/</id>
    <published>2017-08-11T15:00:59.000Z</published>
    <updated>2017-08-13T14:36:45.000Z</updated>
    <content type="html"><![CDATA[<h3 id="安装POSIX文档">安装POSIX文档</h3><ul>
<li><code>apt-get install manpages-posix-dev</code></li>
</ul>
<h3 id="查看POSIX文档">查看POSIX文档</h3><ul>
<li><p><code>man -k pthread</code></p>
</li>
<li><p><code>man pthread_create</code> 查看pthread_create API文档介绍</p>
</li>
</ul>
<a id="more"></a>
<h3 id="创建线程">创建线程</h3><ul>
<li><p><code>pthread_create(pthread_t *restrict thread,const pthread_attr_t *restrict attr, void *(*start_routine)(void *),void *restrict arg);</code> 创建线程</p>
</li>
<li><p><code>pthread_join(pthread_t thread, void **value_ptr);</code> 等待指定线程结束后才执行后面的程序</p>
</li>
<li><p><code>pthread_exit(void *value_ptr);</code> 线程退出</p>
</li>
<li><p><code>man pthread_create</code> 查看如何创建线程</p>
</li>
<li><p><code>gcc o1.c -o 01 -lpthread</code>  生成可执行程序</p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;pthread.h&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span>* thr_fun(<span class="keyword">void</span>* arg)&#123;</span><br><span class="line">    <span class="keyword">char</span>* no = (<span class="keyword">char</span>*)arg;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s thread, i:%d\n"</span>,no,i);</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="comment">//线程退出（自杀）</span></span><br><span class="line">            pthread_exit(<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//他杀pthread_cancel          </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main thread\n"</span>);</span><br><span class="line">    <span class="comment">//线程id</span></span><br><span class="line">    <span class="keyword">pthread_t</span> tid;</span><br><span class="line">    <span class="comment">//线程的属性,NULL默认属性</span></span><br><span class="line">    <span class="comment">//thr_fun,线程创建之后执行的函数</span></span><br><span class="line">    pthread_create(&amp;tid,NULL,thr_fun,<span class="string">"1"</span>);</span><br><span class="line">    <span class="keyword">void</span>* rval;</span><br><span class="line">    <span class="comment">//等待tid线程结束</span></span><br><span class="line">    <span class="comment">//thr_fun与退出时传入的参数,都作为第二个参数的内容</span></span><br><span class="line">    pthread_join(tid,&amp;rval);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"rval:%d\n"</span>,(<span class="keyword">int</span>)rval);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="线程互斥">线程互斥</h3><ul>
<li><p><code>pthread_mutex_init(pthread_mutex_t *restrict mutex,const pthread_mutexattr_t *restrict attr);</code></p>
</li>
<li><p><code>pthread_mutex_lock(pthread_mutex_t *mutex);</code></p>
</li>
<li><p><code>pthread_mutex_unlock(pthread_mutex_t *mutex);</code></p>
</li>
<li><p><code>pthread_mutex_destroy(pthread_mutex_t *mutex);</code></p>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;                                                         </span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;pthread.h&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//互斥锁</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">void</span>* thr_fun(<span class="keyword">void</span>* arg)&#123;</span><br><span class="line">    <span class="comment">//加锁</span></span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line">    <span class="keyword">char</span>* no = (<span class="keyword">char</span>*)arg;</span><br><span class="line">    <span class="keyword">for</span>(;i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s thread, i:%d\n"</span>,no,i);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    i=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//解锁</span></span><br><span class="line">    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> tid1, tid2;</span><br><span class="line">    <span class="comment">//初始化互斥锁</span></span><br><span class="line">    pthread_mutex_init(&amp;mutex,NULL);</span><br><span class="line"> </span><br><span class="line">    pthread_create(&amp;tid1,NULL,thr_fun,<span class="string">"No1"</span>);</span><br><span class="line">    pthread_create(&amp;tid2,NULL,thr_fun,<span class="string">"No2"</span>);</span><br><span class="line"> </span><br><span class="line">    pthread_join(tid1,NULL);</span><br><span class="line">    pthread_join(tid2,NULL);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//销毁互斥锁</span></span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="条件变量">条件变量</h3><ul>
<li><p><code>pthread_cond_init(pthread_cond_t *restrict cond,const pthread_condattr_t *restrict attr);</code></p>
</li>
<li><p><code>pthread_cond_wait(pthread_cond_t *restrict cond,pthread_mutex_t *restrict mutex);</code></p>
</li>
<li><p><code>pthread_cond_signal(pthread_cond_t *cond);</code></p>
</li>
<li><p><code>pthread_cond_destroy(pthread_cond_t *cond);</code></p>
</li>
<li><p><code>pthread_cond_signal</code> 会阻塞输出没有将缓冲区的内容打印出来 需要 使用<code>fflush(NULL)</code></p>
</li>
</ul>
<h3 id="生产者和消费者">生产者和消费者</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;                                                      </span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;pthread.h&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//消费者数量</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> CONSUMER_NUM 2</span></span><br><span class="line"><span class="comment">//生产者数量</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> PRODUCER_NUM 1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">pthread_t</span> pids[CONSUMER_NUM+PRODUCER_NUM];</span><br><span class="line"> </span><br><span class="line"><span class="comment">//产品队列</span></span><br><span class="line"><span class="keyword">int</span> ready = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//互斥锁</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="comment">//条件变量</span></span><br><span class="line"><span class="keyword">pthread_cond_t</span> has_product;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//生产</span></span><br><span class="line"><span class="keyword">void</span>* producer(<span class="keyword">void</span>* arg)&#123;</span><br><span class="line">    <span class="keyword">int</span> no = (<span class="keyword">int</span>)arg;</span><br><span class="line">    <span class="comment">//条件变量</span></span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="comment">//往队列中添加产品</span></span><br><span class="line">        ready++;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"producer %d, produce product\n"</span>,no);</span><br><span class="line">        <span class="comment">//fflush(NULL);</span></span><br><span class="line">        <span class="comment">//通知消费者，有新的产品可以消费了</span></span><br><span class="line">        <span class="comment">//会阻塞输出</span></span><br><span class="line">        pthread_cond_signal(&amp;has_product);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"producer %d, singal\n"</span>,no);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="keyword">void</span>* consumer(<span class="keyword">void</span>* arg)&#123;</span><br><span class="line">    <span class="keyword">int</span> num = (<span class="keyword">int</span>)arg;</span><br><span class="line">    <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">        pthread_mutex_lock(&amp;mutex);</span><br><span class="line">        <span class="comment">//while?</span></span><br><span class="line">        <span class="comment">//superious wake ‘惊群效应’</span></span><br><span class="line">        <span class="keyword">while</span>(ready==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//没有产品，继续等待</span></span><br><span class="line">            <span class="comment">//1.阻塞等待has_product被唤醒</span></span><br><span class="line">            <span class="comment">//2.释放互斥锁，pthread_mutex_unlock</span></span><br><span class="line">            <span class="comment">//3.被唤醒时，解除阻塞，重新申请获得互斥锁pthread_mutex_lock</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d consumer wait\n"</span>,num);</span><br><span class="line">            pthread_cond_wait(&amp;has_product,&amp;mutex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//有产品，消费产品</span></span><br><span class="line">        ready--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d consume product\n"</span>,num);</span><br><span class="line">        pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化互斥锁和条件变量                                                </span></span><br><span class="line">    pthread_mutex_init(&amp;mutex,NULL);</span><br><span class="line">    pthread_cond_init(&amp;has_product,NULL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"init\n"</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;PRODUCER_NUM;i++)&#123;</span><br><span class="line">        <span class="comment">//生产者线程</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,i);</span><br><span class="line">        pthread_create(&amp;pids[i],NULL,producer,(<span class="keyword">void</span>*)i);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;CONSUMER_NUM;i++)&#123;</span><br><span class="line">        <span class="comment">//消费者线程</span></span><br><span class="line">        pthread_create(&amp;pids[PRODUCER_NUM+i],NULL,consumer,(<span class="keyword">void</span>*)i);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//等待</span></span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;PRODUCER_NUM+CONSUMER_NUM;i++)&#123;</span><br><span class="line">        pthread_join(pids[i],NULL);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//销毁互斥锁和条件变量</span></span><br><span class="line">    pthread_mutex_destroy(&amp;mutex);</span><br><span class="line">    pthread_cond_destroy(&amp;has_product);</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="安装POSIX文档">安装POSIX文档</h3><ul>
<li><code>apt-get install manpages-posix-dev</code></li>
</ul>
<h3 id="查看POSIX文档">查看POSIX文档</h3><ul>
<li><p><code>man -k pthread</code></p>
</li>
<li><p><code>man pthread_create</code> 查看pthread_create API文档介绍</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Makefile学习]]></title>
    <link href="http://yoursite.com/2017/08/11/makefile_study/"/>
    <id>http://yoursite.com/2017/08/11/makefile_study/</id>
    <published>2017-08-11T14:44:13.000Z</published>
    <updated>2017-08-11T14:55:10.000Z</updated>
    <content type="html"><![CDATA[<h3 id="gcc">gcc</h3><ul>
<li>gcc 是编译工具 类似javac,将.c文件编译<code>gcc -c .c文件</code>生成.o的目标文件,然后将目标文件链接(<code>gcc xxx.o yyy.o zzz.o  -o  myapp</code> 最后生成myapp可执行程序)得到可执行程序 </li>
</ul>
<a id="more"></a>
<h3 id="Makefile">Makefile</h3><p>Makefile 构建工具 类似Gradle、Maven、Ant,只需通过make一句命令就可以构建一个可执行程序</p>
<p>在很多C/C++中开源项目中,configrue文件用来检查系统配置生成配置文件(这些配置文件会在接下来的makefile文件中被使用到)</p>
<p>Makefile文件用来生成我们需要的动态库文件</p>
<p>为什么要写Makefile文件？</p>
<ul>
<li><p>当项目非常庞大时,让构建过程,自动化,简单</p>
</li>
<li><p>依赖文件,比目标文件更新,会重建目标文件</p>
</li>
</ul>
<h4 id="Makefile_三要素">Makefile 三要素</h4><ul>
<li><p>目标</p>
</li>
<li><p>依赖</p>
</li>
<li><p>命令</p>
</li>
</ul>
<p>新建Makefile文件:</p>
<p><code>touch Makefile</code></p>
<p><code>vim Makefile</code></p>
<p>Makefile内容如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#myapp目标(最终目标,第一行是最终目标)</span></span><br><span class="line"><span class="comment">#:后的文件,这些都是依赖</span></span><br><span class="line"><span class="comment">#命令必须是TAB键开头,如何由依赖文件得到目标</span></span><br><span class="line"><span class="comment">#step 1</span></span><br><span class="line"><span class="comment">#myapp:main.o plus.o minus.o multi.o divi.o</span></span><br><span class="line"><span class="comment">#    gcc main.o plus.o minus.o multi.o divi.o -o myapp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#目标: main.o</span></span><br><span class="line"><span class="comment">#依赖: main.c</span></span><br><span class="line"><span class="comment">#命令: gcc -c main.c</span></span><br><span class="line"><span class="comment">#main.o:main.c</span></span><br><span class="line"><span class="comment">#    gcc -c main.c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#plus.o:plus.c</span></span><br><span class="line"><span class="comment">#    gcc -c plus.c</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#minus.o:minus.c</span></span><br><span class="line"><span class="comment">#    gcc -c minus.c</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#multi.o:multi.c</span></span><br><span class="line"><span class="comment">#    gcc -c multi.c</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#divi.o:divi.c</span></span><br><span class="line"><span class="comment">#    gcc -c divi.c</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#step 2</span></span><br><span class="line"><span class="comment">#变量</span></span><br><span class="line"><span class="comment">#OBJECTS=main.o plus.o minus.o multi.o divi.o</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#step 3</span></span><br><span class="line"><span class="comment">#获取当前目录下所有.c源文件</span></span><br><span class="line">SOURCES=$(wildcard *.c)</span><br><span class="line"><span class="comment">#把.c后缀,替换成.o文件</span></span><br><span class="line">OBJECTS=$(patsubst %.c,%.o,$(SOURCES))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myapp:$(OBJECTS)</span><br><span class="line"><span class="comment">#自动化变量 $^表示所有依赖, $@表示目标</span></span><br><span class="line">    gcc $^ -o <span class="variable">$@</span> </span><br><span class="line"><span class="comment">#通配符</span></span><br><span class="line"><span class="comment">#main.o:main.c</span></span><br><span class="line">%.o:%.c</span><br><span class="line"><span class="comment">#gcc -c main.c -o main.o</span></span><br><span class="line">    gcc -c $^ -o <span class="variable">$@</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#递归展开式 可以引用还有定义的变量,展开是在引用时展开</span></span><br><span class="line">str2=$(str1)</span><br><span class="line">str1=hello</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接展开式</span></span><br><span class="line"><span class="comment">#必须引用定义好了的变量,定义之后就会展开</span></span><br><span class="line">str3 := android</span><br><span class="line">str4 := $(str3)</span><br><span class="line">str5 := $(str1) world</span><br><span class="line"></span><br><span class="line"><span class="comment">#变量的值追加</span></span><br><span class="line">str5 += hello</span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义函数</span></span><br><span class="line"><span class="comment">#第二个参数和第一个参数</span></span><br><span class="line">myfun=<span class="variable">$2</span> <span class="variable">$1</span></span><br><span class="line">myfun_ret=$(call myfun,<span class="number">20</span>,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line">	@<span class="built_in">echo</span> $(str2)</span><br><span class="line">	@<span class="built_in">echo</span> $(str4)</span><br><span class="line">	@<span class="built_in">echo</span> $(str5)</span><br><span class="line">	@<span class="built_in">echo</span> $(myfun_ret)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#没有依赖</span></span><br><span class="line"><span class="comment">#clean清除所有的.o中间文件</span></span><br><span class="line"><span class="comment">#伪目标</span></span><br><span class="line">.PHONY:clean</span><br><span class="line">clean:</span><br><span class="line">    rm <span class="operator">-f</span> *.o</span><br><span class="line">    rm <span class="operator">-f</span> myapp</span><br><span class="line">    </span><br><span class="line"><span class="comment">#测试用 终端输入make test 查看输出结果   </span></span><br><span class="line"><span class="built_in">test</span>:</span><br><span class="line"><span class="comment">#加上@符号就不会将echo打印出来</span></span><br><span class="line">    @<span class="built_in">echo</span> $(OBJECTS)</span><br><span class="line">    @<span class="built_in">echo</span> $(SOURCES)</span><br></pre></td></tr></table></figure>
<h4 id="Android-mk文件介绍">Android.mk文件介绍</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#区分大小写	</span></span><br><span class="line"><span class="comment">#调用my-dir函数,返回Android.mk文件所在的目录,LOCAL_PATH必须放在第一行,地址当前所在目录</span></span><br><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"><span class="comment">#可以引入其他的Makefile文件</span></span><br><span class="line"><span class="comment">#编译模块时清空LOCAL_MODULE等模块</span></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE := fmod</span><br><span class="line"><span class="comment">#编译需要的源文件</span></span><br><span class="line">LOCAL_SRC_FILES := libfmod.so</span><br><span class="line"><span class="comment">#编译需要引入预编译(编译好的)动态库</span></span><br><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE := fmodL</span><br><span class="line">LOCAL_SRC_FILES := libfmodL.so</span><br><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br><span class="line"></span><br><span class="line"><span class="comment">#myapp</span></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE := Voicer</span><br><span class="line">LOCAL_SRC_FILES := Voicer.cpp</span><br><span class="line"><span class="comment">#需要的头文件</span></span><br><span class="line">LOCAL_C_INCLUDES += $(LOCAL_PATH)/inc</span><br><span class="line"><span class="comment">#-l代表的是库</span></span><br><span class="line">LOCAL_LDLIBS := -llog</span><br><span class="line">LOCAL_CPP_FEATURES := exceptions</span><br><span class="line">LOCAL_SHARED_LIBRARIES := fmod fmodL</span><br></pre></td></tr></table></figure>
<h4 id="make命令使用">make命令使用</h4><ul>
<li><p><code>make</code>  直接make,构建的是终极目标</p>
</li>
<li><p><code>make clean</code> 清除所有的.o中间文件和生成的程序</p>
</li>
<li><p><code>make main.o</code> 构建非终极目标</p>
</li>
</ul>
<h4 id="Android_mk文件使用指南"><a href="https://developer.android.google.cn/ndk/guides/android_mk.html" target="_blank" rel="external">Android mk文件使用指南</a></h4>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="gcc">gcc</h3><ul>
<li>gcc 是编译工具 类似javac,将.c文件编译<code>gcc -c .c文件</code>生成.o的目标文件,然后将目标文件链接(<code>gcc xxx.o yyy.o zzz.o  -o  myapp</code> 最后生成myapp可执行程序)得到可执行程序 </li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Shell基础]]></title>
    <link href="http://yoursite.com/2017/08/06/shell/"/>
    <id>http://yoursite.com/2017/08/06/shell/</id>
    <published>2017-08-06T10:40:56.000Z</published>
    <updated>2017-08-11T14:56:59.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Shell基本语法">Shell基本语法</h3><ul>
<li><code>#!/bin/sh</code>: 第一行需要说明当前使用的是哪种类型的shell.是bsh 还是 csh</li>
<li>创建局部变量并赋值时不能有空格,如果值中有空格需要将整个值使用””</li>
<li><code>echo</code>: 输出</li>
</ul>
<a id="more"></a>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">NDK=<span class="number">10</span></span><br><span class="line">text=<span class="string">"i love shell"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#命令的执行结果的输出作为变量的值</span></span><br><span class="line">text1=`date`</span><br><span class="line">text2=$(who)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$NDK</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$text</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$text</span> very much"</span></span><br><span class="line"><span class="comment">#输出$NDK</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"\$NDK"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$text1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$text2</span></span><br></pre></td></tr></table></figure>
<h3 id="输出重定向,将输出结果保存到文件中">输出重定向,将输出结果保存到文件中</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">ls -al &gt; log.txt</span><br></pre></td></tr></table></figure>
<h3 id="输入重定向">输入重定向</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">wc &lt; text.txt</span><br></pre></td></tr></table></figure>
<h3 id="expr命令">expr命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line">c=$(expr <span class="variable">$b</span> / <span class="variable">$a</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"c:<span class="variable">$c</span>"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用方括号来代替expr命令</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line">d=$[<span class="variable">$a</span> * <span class="number">2</span>]</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"d:<span class="variable">$d</span>"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>使用bc命令进行浮点数计算 (bash caculate)</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">#| 管道,一个命令的输出作为另外一个命令的输入</span></span><br><span class="line"><span class="comment">#scale是自带的内建变量</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">e=$(<span class="built_in">echo</span> <span class="string">"scale=4; <span class="variable">$a</span> / 3"</span> | bc)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"e:<span class="variable">$e</span>"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>内联输入重定向scale=4表示保留小数位4位</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line"><span class="comment">#scale是自带的内建变量</span></span><br><span class="line">f=$(bc &lt;&lt; EOF</span><br><span class="line">scale=<span class="number">4</spanspan><br><span class="line"> </span><br><span class="line">a1 = (<span class="variable">$a</span> * <span class="variable">$b</span>)</span><br><span class="line">a1 / <span class="number">3</span></span><br><span class="line">EOF</span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"f:<span class="variable">$f</span>"</span></span><br></pre></td></tr></table></figure>
<h3 id="wc命令">wc命令</h3><ul>
<li>wc命令 用来计算输入内容的 行数、单词个数、字节数</li>
</ul>
<h3 id="命令执行退出的状态">命令执行退出的状态</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">#echo $?命令 上条命令执行后的退出码</span></span><br><span class="line"><span class="comment">#0 代表正常退出  127 命令没找到  1 一般性的未知错误 126 命令不可执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义退出状态码</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"my shell exit"</span></span><br><span class="line"><span class="built_in">exit</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>
<ul>
<li>只有if命令的退出状态码为0,才会执行then部分</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">testuser=lady</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> grep <span class="variable">$testuser</span> /etc/passwd </span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"ok"</span></span><br><span class="line">	ls <span class="operator">-a</span> /home/<span class="variable">$testuser</span>/</span><br><span class="line"></span><br><span class="line"><span class="keyword">elif</span> ls <span class="operator">-d</span> /home/<span class="variable">$testuser</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"用户不存在，主目录仍然存在"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="comment">##嵌套if</span></span><br><span class="line">	<span class="comment">#if </span></span><br><span class="line">	<span class="comment">#then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$testuser</span> not exist"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="grep命令">grep命令</h3><ul>
<li><code>grep -n 关键字 文件</code>: 在指定的文件中查找关键字 并显示查找到的行号</li>
</ul>
<h3 id="test命令">test命令</h3><ul>
<li>如果条件成立,test命令以状态为0退出,if条件成立</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> <span class="variable">$var</span></span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"test条件成立"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"test条件不成立"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="test字符串比较">test字符串比较</h3><ul>
<li><p><code>str1 == str2</code>、<code>str1 != str2</code>、<code>str1 &lt; str2</code></p>
</li>
<li><p><code>-n str1</code> 长度是否非0</p>
</li>
<li><p><code>-z str1</code> 长度是否为0</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">str1=Jack</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="variable">$str1</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"有内容"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"没内容"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="test命令简单形式">test命令简单形式</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">5</span></span><br><span class="line"><span class="comment">#test数值比较-gt、-eq、 -le、 -ne不等于</span></span><br><span class="line"><span class="comment">#test 命令简单形式[]里面左右必须要有空格</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$a</span> <span class="operator">-gt</span> <span class="variable">$b</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> greater than <span class="variable">$b</span>"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"<span class="variable">$a</span> smaller than <span class="variable">$b</span>"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="文件比较">文件比较</h3><ul>
<li><p><code>-d</code> 检查目录是否存在</p>
</li>
<li><p><code>-e</code> 检查file是否存在</p>
</li>
<li><p><code>-f</code> 检查是否存在,并且是一个文件</p>
</li>
<li><p><code>-r</code> 检查是否存在,并且可读</p>
</li>
<li><p><code>-w</code> 检查是否存在,并且可写 </p>
</li>
<li><p><code>-x</code>检查是否存在,并且可执行</p>
</li>
<li><p><code>file1 -nt file2</code> file1比file2新</p>
</li>
<li><p><code>file1 -ot file2</code> file1比file2旧</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">mydir=/usr/weifeng</span><br><span class="line"><span class="keyword">if</span> [ <span class="operator">-d</span> <span class="variable">$mydir</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$mydir</span> exist"</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$mydir</span></span><br><span class="line">    ls</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"<span class="variable">$mydir</span> not exist"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="多条件">多条件</h3><ul>
<li><code>[] &amp;&amp; []</code> 、 <code>[] || []</code> 、<code>(())</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">#多个条件 []</span></span><br><span class="line">mydir=/usr/weifeng/shell</span><br><span class="line"><span class="comment">#任意数学赋值或者比较表达式</span></span><br><span class="line"><span class="comment">#if (( a++ &gt; 90 ))</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="operator">-d</span> <span class="variable">$HOME</span> ] &amp;&amp; [ -w <span class="variable">$mydir</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">	<span class="built_in">cd</span> <span class="variable">$mydir</span></span><br><span class="line">	touch <span class="built_in">test</span>5</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"no"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure>
<h3 id="case命令">case命令</h3><ul>
<li>case 命令类似于java中的switch case</li>
</ul>
<p><code>case 变量 in
pattern1) 命令;;
pattern2) 命令;;
*) 默认命令;;
esac</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">testuser=rose</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$testuser</span> <span class="keyword">in</span></span><br><span class="line">rose)</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"hi,<span class="variable">$testuser</span>"</span>;;</span><br><span class="line">ricky)</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"hello, ricky"</span>;;</span><br><span class="line">*)</span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"defaults"</span>;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>
<h3 id="for命令">for命令</h3><p><code>for var in list
do 
    命令
done</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> Mother Father Brother</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$item</span></span><br><span class="line"><span class="keyword">done</span>	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list=<span class="string">"Mother\'s Father Brother"</span></span><br><span class="line">list2=<span class="string">"windows--linux--macos"</span></span><br><span class="line"><span class="comment">#IFS字段分隔符</span></span><br><span class="line">IFS=$--</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable">$list2</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="variable">$item</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="while命令">while命令</h3><p><code>while命令
while test command
do
    命令
done</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">a=<span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$a</span> <span class="operator">-gt</span> <span class="number">0</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">	<span class="built_in">echo</span> <span class="string">"num:<span class="variable">$a</span>"</span></span><br><span class="line">	a=$[ <span class="variable">$a</span> - <span class="number">1</span> ]</span><br><span class="line">	<span class="keyword">if</span> [ <span class="variable">$a</span> <span class="operator">-eq</span> <span class="number">5</span> ]</span><br><span class="line">	<span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">"break"</span></span><br><span class="line">		<span class="built_in">break</span></span><br><span class="line">	<span class="keyword">fi</span>	</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="脚本传参">脚本传参</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">#获取第一个参数,为当前shell脚本路径,加上bashname获取的是shell脚本名称</span></span><br><span class="line">filename=$(bashname <span class="variable">$0</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$filename</span></span><br><span class="line"><span class="comment">#内建变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"参数的总数: <span class="variable">$#</span>"</span></span><br><span class="line"><span class="comment">#输出第二个参数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$2</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$3</span></span><br></pre></td></tr></table></figure>
<h3 id="遍历所有参数">遍历所有参数</h3><ul>
<li>使用<code>$@</code>遍历所有参数</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"遍历"</span></span><br><span class="line"><span class="keyword">for</span> param <span class="keyword">in</span> <span class="string">"<span class="variable">$@</span>"</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> param:<span class="variable">$param</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h3 id="标准输出重定向">标准输出重定向</h3><ul>
<li>0 STDIN 标准输入, 1 STDOUT 标准输出, 2 STDERR 标准错误</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line">file=<span class="built_in">test</span>6</span><br><span class="line"><span class="comment">#输出到文件</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"cc xx"</span> &gt; <span class="variable">$file</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"cc yy"</span> &gt; <span class="variable">$file</span></span><br><span class="line"><span class="comment">#1代表标准输出,输出到屏幕上</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"cc ZZ"</span> &gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>./脚本名称.sh &amp;&gt; 文件名</code>: 将标准输出重定向到文件,不在输出到屏幕上</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">#永久重定向,将后面echo输出的内容写入到指定文件中</span></span><br><span class="line"><span class="built_in">exec</span> <span class="number">1</span>&gt;<span class="built_in">test</span>7</span><br><span class="line"><span class="comment">#将错误输出到指定文件</span></span><br><span class="line"><span class="built_in">exec</span> <span class="number">2</span>&gt;<span class="built_in">test</span>8</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"cc xx"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"cc yy"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"cc zz"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看一个不存在的文件,将会输出错误</span></span><br><span class="line">ls <span class="operator">-a</span> ./ff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#自定义输出</span></span><br><span class="line"><span class="comment">#输出到文件中</span></span><br><span class="line"><span class="built_in">exec</span> <span class="number">7</span>&gt;<span class="built_in">test</span>9</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"cc aa"</span> &gt;&amp;<span class="number">7</span></span><br></pre></td></tr></table></figure>
<h3 id="函数">函数</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="comment">#myfun 后面需要有空格,最好后面换行</span></span><br><span class="line"><span class="keyword">function</span> myfun &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"myfun"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用函数</span></span><br><span class="line">myfun</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以覆盖myfun,myfun()需要有空格</span></span><br><span class="line"><span class="function"><span class="title">myfun</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"myfun2"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用函数</span></span><br><span class="line">myfun</span><br></pre></td></tr></table></figure>
<ul>
<li>函数的传参以及函数的返回值</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span></span><br><span class="line"><span class="keyword">function</span> myfun</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"myfun"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$2</span></span><br><span class="line">    <span class="comment">#expr, 带[]写最后代表返回</span></span><br><span class="line">    <span class="built_in">echo</span> $[ <span class="variable">$1</span> + <span class="variable">$2</span> ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用函数并传参</span></span><br><span class="line">value=$(myfun <span class="number">10</span> <span class="number">90</span>)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"value:<span class="variable">$value</span>"</span></span><br></pre></td></tr></table></figure>
<h3 id="局部变量和全局变量">局部变量和全局变量</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/bash</span><br><span class="line"></span></span><br><span class="line"><span class="comment">#引入 ./17.sh</span></span><br><span class="line"><span class="comment">#source ./17.sh</span></span><br><span class="line"><span class="comment">#. 是source的快捷别名</span></span><br><span class="line">. ./<span class="number">17</span>.sh</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">myfun</span></span>() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">value=<span class="number">20</span></span><br><span class="line">myfun</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用17.sh中的add函数并传递2个参数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"add value:<span class="variable">$(add 10 30)</span>"</span></span><br></pre></td></tr></table></figure>
<ul>
<li>引入其他脚本<code>source</code> 或者 <code>.</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">add</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> $[ <span class="variable">$1</span> + <span class="variable">$2</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>全局变量 <code>export 变量名=赋值</code>,多个shell脚本都可以使用</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Shell基本语法">Shell基本语法</h3><ul>
<li><code>#!/bin/sh</code>: 第一行需要说明当前使用的是哪种类型的shell.是bsh 还是 csh</li>
<li>创建局部变量并赋值时不能有空格,如果值中有空格需要将整个值使用””</li>
<li><code>echo</code>: 输出</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Linux命令]]></title>
    <link href="http://yoursite.com/2017/08/06/linux_study/"/>
    <id>http://yoursite.com/2017/08/06/linux_study/</id>
    <published>2017-08-06T10:00:56.000Z</published>
    <updated>2017-08-06T10:42:53.000Z</updated>
    <content type="html"><![CDATA[<h3 id="文件操作">文件操作</h3><h4 id="显示列表">显示列表</h4><ul>
<li><code>ls -l</code>: 显示文件列表</li>
<li><code>ls -la</code> 或者 <code>ls -all</code>: 显示所有文件包含隐藏文件</li>
<li><code>ls -ls 文件名或者文件夹名/</code>: 显示指定的文件或者文件夹信息</li>
<li><code>ls -l xxx*</code>: 通配符查找 显示当前目录下包含xxx的所有文件和文件夹</li>
</ul>
<a id="more"></a>
<h4 id="创建文件">创建文件</h4><ul>
<li><code>touch 文件名</code></li>
</ul>
<h4 id="复制">复制</h4><ul>
<li><code>cp 源文件 目标路径</code></li>
<li><code>cp -i 源文件 目标路径</code>: 提示是否将源文件复制到目标路径下</li>
<li><code>cp 源文件 .</code>: 将源文件复制到当前目录下</li>
<li><code>cp -R 源文件夹 目标路径</code>: 复制整个源文件夹到目标路径下</li>
<li><code>cp x?*x 目标路径</code>: 将通配符匹配到的文件复制到目标路径下</li>
</ul>
<h4 id="删除文件">删除文件</h4><ul>
<li><code>rm 文件</code>: 删除文件</li>
<li><code>rm -rf 文件夹</code>: 强制删除文件夹</li>
<li><code>rm x?*x</code>: 将通配符匹配到的文件删除</li>
</ul>
<h4 id="清空">清空</h4><ul>
<li><code>control l</code></li>
<li><code>clear</code></li>
<li><code>reset</code></li>
</ul>
<h4 id="查看文件类型">查看文件类型</h4><ul>
<li><code>file  文件</code></li>
</ul>
<h4 id="查看文件内容">查看文件内容</h4><ul>
<li><code>cat 文件</code></li>
<li><code>cat -n 文件</code>: 带行号显示文件内容(空号显示行号)</li>
<li><code>cat -b 文件</code>: 带行号显示文件内容(空行不显示行号)</li>
<li><code>more 文件</code>: 显示文件内容 (按q退出)</li>
<li><code>tail -n 10 文件</code>: 查看文件最后10行</li>
<li><code>head -n 10 文件</code>: 查看文件最开始的10行</li>
</ul>
<h4 id="创建用户">创建用户</h4><ul>
<li><code>useradd -m 用户名</code>: 创建指定用户的home目录(/home/用户名)</li>
<li><code>useradd -M 用户名</code>: 不创建指定用户的home目录</li>
</ul>
<h4 id="删除用户">删除用户</h4><ul>
<li><code>userdel 用户名</code></li>
</ul>
<h4 id="组操作">组操作</h4><ul>
<li><code>cat /etc/group</code>: 查看用户组</li>
<li><code>groupadd 组名称</code>: 创建组</li>
<li><code>usermod -G 组名 用户名</code>: 分配用户到组</li>
</ul>
<h4 id="文件权限">文件权限</h4><p><code>-rw-r--r--</code></p>
<p><code>drwxr-xr-x</code></p>
<ul>
<li><p>r读 w写 x执行</p>
</li>
<li><p>d代表目录(-代表文件) </p>
</li>
<li><p>rwxr代表文件所属用户具备的权限(root 对该文件具备读写执行权限)</p>
</li>
<li><p>xr代表文件所属用户的所属组具备的权限(读、执行)</p>
</li>
<li><p>x代表系统的其他用户具备的权限(读、执行)</p>
</li>
<li><p><code>chmod 644 file</code>: 修改文件权限</p>
</li>
<li><p><code>chmod u+x file</code>: 给用户加上执行权限</p>
</li>
<li><p><code>chmod u-x file</code>: 去掉用户执行权限</p>
</li>
<li><p><code>chmod [ugoa]+x file</code>:  u代表当前用户 g代表组 o代表other a代表所有</p>
</li>
<li><p><code>umask</code>: 设置了用户创建文件的默认 权限,它与chmod的效果刚好相反,umask设置的是权限”补码”,而chmod设置的是文件权限码。一般在/etc/profile、$ [HOME]/.bash_profile或$[HOME]/.profile中设置umask值。</p>
</li>
<li><p><code>umask 026</code>: 改变创建文件和目录的默认权限</p>
</li>
<li><p><code>chown 用户名 文件或目录名</code>: 改变文件或者目录所属用户</p>
</li>
<li><p><code>chown .组名  文件或目录名</code>: 改变文件或者目录所属用户组</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">rwx 必须是固定顺序</span><br><span class="line"></span><br><span class="line">权限    二进制   八进制</span><br><span class="line">---     <span class="number">000</span>      <span class="number">0</span></span><br><span class="line">--x     <span class="number">001</span>      <span class="number">1</span></span><br><span class="line">-w-     <span class="number">010</span>      <span class="number">2</span></span><br><span class="line">-wx     <span class="number">011</span>      <span class="number">3</span></span><br><span class="line">r--     <span class="number">100</span>      <span class="number">4</span></span><br><span class="line">r-x     <span class="number">101</span>      <span class="number">5</span></span><br><span class="line">rw-     <span class="number">110</span>      <span class="number">6</span></span><br><span class="line">rwx     <span class="number">111</span>      <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>如何计算umask值</p>
<p>umask 命令允许你设定文件创建时的缺省模式,对应每一类用户(文件属主、同组用户、其他用户)存在一个相应的umask值中的数字。对于文件来说,这一数字的最 大值分别是6。系统不允许你在创建一个文本文件时就赋予它执行权限,必须在创建后用chmod命令增加这一权限。目录则允许设置执行权限,这样针对目录来说,umask中各个数字最大可以到7。</p>
<p>该命令的一般形式为: <code>umask nnn</code> 其中nnn为umask置000-777。</p>
<p>例如,<code>umask 002</code> 所对应的文件和目录创建缺省权限分别为6 6 4和7 7 5。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="文件操作">文件操作</h3><h4 id="显示列表">显示列表</h4><ul>
<li><code>ls -l</code>: 显示文件列表</li>
<li><code>ls -la</code> 或者 <code>ls -all</code>: 显示所有文件包含隐藏文件</li>
<li><code>ls -ls 文件名或者文件夹名/</code>: 显示指定的文件或者文件夹信息</li>
<li><code>ls -l xxx*</code>: 通配符查找 显示当前目录下包含xxx的所有文件和文件夹</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[FFmpeg和libyuv的基本使用(五)]]></title>
    <link href="http://yoursite.com/2017/08/04/android_ffmpeg_4/"/>
    <id>http://yoursite.com/2017/08/04/android_ffmpeg_4/</id>
    <published>2017-08-04T14:10:19.000Z</published>
    <updated>2017-08-04T14:14:09.000Z</updated>
    <content type="html"><![CDATA[<h3 id="FFmpeg_和_libyuv的基本使用">FFmpeg 和 libyuv的基本使用</h3><h4 id="万能视频播放器">万能视频播放器</h4><p>实现的基本过程:</p>
<p>将任意格式的视频文件统一解码成YUV格式,然后将解码后的帧数据绘制到本地ANativeWindow里的Surface上. 这里的Surface由SurfaceView提供</p>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SurfaceHolder holder = surfaceView.getHolder();</span><br><span class="line"><span class="comment">//Surface 传入到Native函数中,用于绘制</span></span><br><span class="line">Surface surface = holder.getSurface();</span><br></pre></td></tr></table></figure>
<p>具体实现代码如下:</p>
<ul>
<li>自定义SurfaceView类 VideoView.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoView</span> <span class="keyword">extends</span> <span class="title">SurfaceView</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VideoView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VideoView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, attrs,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VideoView</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SurfaceHolder holder = getHolder();</span><br><span class="line">        holder.setFormat(PixelFormat.RGBA_8888);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>新建音视频播放工具类 VideoPlayer.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoPlayer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">(String input, Surface surface)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">sound</span><span class="params">(String input, String output)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">playSoud</span><span class="params">(String input)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">readAndPlaySound</span><span class="params">(String input, String output)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * 创建一个AudioTrac对象，用于播放</span><br><span class="line">     * <span class="doctag">@param</span> nb_channels</span><br><span class="line">     * <span class="doctag">@return</span></span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AudioTrack <span class="title">createAudioTrack</span><span class="params">(<span class="keyword">int</span> sampleRateInHz, <span class="keyword">int</span> nb_channels)</span></span>&#123;</span><br><span class="line">        <span class="comment">//固定格式的音频码流</span></span><br><span class="line">        <span class="keyword">int</span> audioFormat = AudioFormat.ENCODING_PCM_16BIT;</span><br><span class="line">        Log.i(<span class="string">"jason"</span>, <span class="string">"nb_channels:"</span>+nb_channels);</span><br><span class="line">        <span class="comment">//声道布局</span></span><br><span class="line">        <span class="keyword">int</span> channelConfig;</span><br><span class="line">        <span class="keyword">if</span>(nb_channels == <span class="number">1</span>)&#123;</span><br><span class="line">            channelConfig = android.media.AudioFormat.CHANNEL_OUT_MONO;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nb_channels == <span class="number">2</span>)&#123;</span><br><span class="line">            channelConfig = android.media.AudioFormat.CHANNEL_OUT_STEREO;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            channelConfig = android.media.AudioFormat.CHANNEL_OUT_STEREO;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> bufferSizeInBytes = AudioTrack.getMinBufferSize(sampleRateInHz, channelConfig, audioFormat);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        AudioTrack audioTrack = <span class="keyword">new</span> AudioTrack(</span><br><span class="line">                AudioManager.STREAM_MUSIC,</span><br><span class="line">                sampleRateInHz, channelConfig,</span><br><span class="line">                audioFormat,</span><br><span class="line">                bufferSizeInBytes, AudioTrack.MODE_STREAM);</span><br><span class="line">        <span class="comment">//播放</span></span><br><span class="line">        <span class="comment">//audioTrack.play();</span></span><br><span class="line">        <span class="comment">//写入PCM</span></span><br><span class="line">        <span class="comment">//audioTrack.write(audioData, offsetInBytes, sizeInBytes);</span></span><br><span class="line">        <span class="keyword">return</span> audioTrack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>具体Native代码实现如下</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;jni.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="comment">//C/C++混编 extern: 指示编译器按照C语言进行编译</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;libyuv.h&gt;</span></span><br><span class="line"><span class="comment">//编码</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;libavcodec/avcodec.h&gt;</span></span><br><span class="line"><span class="comment">//封装格式处理</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;libavformat/avformat.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;libavfilter/avfilter.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;libswscale/swscale.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;android/log.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;android/native_window_jni.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;android/native_window.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> libyuv;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//重采样</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;libswresample/swresample.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOGI(FORMAT, ...) __android_log_print(ANDROID_LOG_INFO,"jason",FORMAT,##__VA_ARGS__);</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,"jason",FORMAT,##__VA_ARGS__);</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span>  MAX_AUDIO_FRAME_SIZE 48000 * 4</span></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_MainActivity_avcodecinfo</span><span class="params">(JNIEnv *env, jobject instance)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span></span></span><br><span class="line">    <span class="keyword">char</span> info[<span class="number">40000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    av_register_all();</span><br><span class="line">    AVCodec *<span class="keyword">c_t</span>emp = av_codec_next(NULL);</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">c_t</span>emp != NULL)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">c_t</span>emp-&gt;decode != NULL)&#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(info, <span class="string">"%sdecode:"</span>, info);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(info, <span class="string">"%sencode:"</span>, info);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="keyword">c_t</span>emp-&gt;type)&#123;</span><br><span class="line">            <span class="keyword">case</span> AVMEDIA_TYPE_VIDEO:</span><br><span class="line">                <span class="built_in">sprintf</span>(info, <span class="string">"%s(video):"</span>, info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> AVMEDIA_TYPE_AUDIO:</span><br><span class="line">                <span class="built_in">sprintf</span>(info, <span class="string">"%s(audio):"</span>, info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">sprintf</span>(info, <span class="string">"%s(other):"</span>, info);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sprintf</span>(info, <span class="string">"%s[%10s]\n"</span>, info, <span class="keyword">c_t</span>emp-&gt;name);</span><br><span class="line">        <span class="keyword">c_t</span>emp = <span class="keyword">c_t</span>emp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(info);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_VideoPlayer_readAndPlaySound</span><span class="params">(JNIEnv *env, jobject jthiz,</span><br><span class="line">                                                        jstring input_, jstring output_)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input_cstr = env-&gt;GetStringUTFChars(input_, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *output_cstr = env-&gt;GetStringUTFChars(output_, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    LOGI(<span class="string">"%s"</span>,<span class="string">"sound"</span>);</span><br><span class="line">    <span class="comment">//注册组件</span></span><br><span class="line">    av_register_all();</span><br><span class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</span><br><span class="line">    <span class="comment">//打开音频文件</span></span><br><span class="line">    <span class="keyword">if</span>(avformat_open_input(&amp;pFormatCtx,input_cstr,NULL,NULL) != <span class="number">0</span>)&#123;</span><br><span class="line">        LOGI(<span class="string">"%s"</span>,<span class="string">"无法打开音频文件"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取输入文件信息</span></span><br><span class="line">    <span class="keyword">if</span>(avformat_find_stream_info(pFormatCtx,NULL) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        LOGI(<span class="string">"%s"</span>,<span class="string">"无法获取输入文件信息"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取音频流索引位置</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, audio_stream_idx = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; pFormatCtx-&gt;nb_streams;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(pFormatCtx-&gt;streams[i]-&gt;codec-&gt;<span class="keyword">codec_t</span>ype == AVMEDIA_TYPE_AUDIO)&#123;</span><br><span class="line">            audio_stream_idx = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取解码器</span></span><br><span class="line">    AVCodecContext *codecCtx = pFormatCtx-&gt;streams[audio_stream_idx]-&gt;codec;</span><br><span class="line">    AVCodec *codec = avcodec_find_decoder(codecCtx-&gt;codec_id);</span><br><span class="line">    <span class="keyword">if</span>(codec == NULL)&#123;</span><br><span class="line">        LOGI(<span class="string">"%s"</span>,<span class="string">"无法获取解码器"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打开解码器</span></span><br><span class="line">    <span class="keyword">if</span>(avcodec_open2(codecCtx,codec,NULL) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        LOGI(<span class="string">"%s"</span>,<span class="string">"无法打开解码器"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//压缩数据</span></span><br><span class="line">    AVPacket *packet = (AVPacket *)av_malloc(<span class="keyword">sizeof</span>(AVPacket));</span><br><span class="line">    <span class="comment">//解压缩数据</span></span><br><span class="line">    AVFrame *frame = av_frame_alloc();</span><br><span class="line">    <span class="comment">//frame-&gt;16bit 44100 PCM 统一音频采样格式与采样率</span></span><br><span class="line">    SwrContext *swrCtx = swr_alloc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重采样设置参数-------------start</span></span><br><span class="line">    <span class="comment">//输入的采样格式</span></span><br><span class="line">    <span class="keyword">enum</span> AVSampleFormat in_sample_fmt = codecCtx-&gt;sample_fmt;</span><br><span class="line">    <span class="comment">//输出采样格式16bit PCM</span></span><br><span class="line">    <span class="keyword">enum</span> AVSampleFormat out_sample_fmt = AV_SAMPLE_FMT_S16;</span><br><span class="line">    <span class="comment">//输入采样率</span></span><br><span class="line">    <span class="keyword">int</span> in_sample_rate = codecCtx-&gt;sample_rate;</span><br><span class="line">    <span class="comment">//输出采样率</span></span><br><span class="line">    <span class="keyword">int</span> out_sample_rate = in_sample_rate;</span><br><span class="line">    <span class="comment">//获取输入的声道布局</span></span><br><span class="line">    <span class="comment">//根据声道个数获取默认的声道布局（2个声道，默认立体声stereo）</span></span><br><span class="line">    <span class="comment">//av_get_default_channel_layout(codecCtx-&gt;channels);</span></span><br><span class="line">    <span class="keyword">uint64_t</span> in_ch_layout = codecCtx-&gt;channel_layout;</span><br><span class="line">    <span class="comment">//输出的声道布局（立体声）</span></span><br><span class="line">    <span class="keyword">uint64_t</span> out_ch_layout = AV_CH_LAYOUT_STEREO;</span><br><span class="line"></span><br><span class="line">    swr_alloc_set_opts(swrCtx,</span><br><span class="line">                       out_ch_layout,out_sample_fmt,out_sample_rate,</span><br><span class="line">                       in_ch_layout,in_sample_fmt,in_sample_rate,</span><br><span class="line">                       <span class="number">0</span>, NULL);</span><br><span class="line">    swr_init(swrCtx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出的声道个数</span></span><br><span class="line">    <span class="keyword">int</span> out_channel_nb = av_get_channel_layout_nb_channels(out_ch_layout);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重采样设置参数-------------end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//JNI begin------------------</span></span><br><span class="line">    <span class="comment">//JasonPlayer</span></span><br><span class="line">    jclass player_class = env-&gt;GetObjectClass(jthiz);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AudioTrack对象</span></span><br><span class="line">    jmethodID <span class="keyword">create_audio_t</span>rack_mid = env-&gt;GetMethodID(player_class,<span class="string">"createAudioTrack"</span>,<span class="string">"(II)Landroid/media/AudioTrack;"</span>);</span><br><span class="line">    jobject <span class="keyword">audio_t</span>rack = env-&gt;CallObjectMethod(jthiz,<span class="keyword">create_audio_t</span>rack_mid,out_sample_rate,out_channel_nb);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用AudioTrack.play方法</span></span><br><span class="line">    jclass <span class="keyword">audio_t</span>rack_class = env-&gt;GetObjectClass(<span class="keyword">audio_t</span>rack);</span><br><span class="line">    jmethodID <span class="keyword">audio_t</span>rack_play_mid = env-&gt;GetMethodID(<span class="keyword">audio_t</span>rack_class,<span class="string">"play"</span>,<span class="string">"()V"</span>);</span><br><span class="line">    env-&gt;CallVoidMethod(<span class="keyword">audio_t</span>rack,<span class="keyword">audio_t</span>rack_play_mid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AudioTrack.write</span></span><br><span class="line">    jmethodID <span class="keyword">audio_t</span>rack_write_mid = env-&gt;GetMethodID(<span class="keyword">audio_t</span>rack_class,<span class="string">"write"</span>,<span class="string">"([BII)I"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JNI end------------------</span></span><br><span class="line">    FILE *fp_pcm = fopen(output_cstr,<span class="string">"wb"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//16bit 44100 PCM 数据</span></span><br><span class="line">    <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span> *)av_malloc(MAX_AUDIO_FRAME_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> got_frame = <span class="number">0</span>,index = <span class="number">0</span>, ret;</span><br><span class="line">    <span class="comment">//不断读取压缩数据</span></span><br><span class="line">    <span class="keyword">while</span>(av_read_frame(pFormatCtx,packet) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//解码音频类型的Packet</span></span><br><span class="line">        <span class="keyword">if</span>(packet-&gt;stream_index == audio_stream_idx)&#123;</span><br><span class="line">            <span class="comment">//解码</span></span><br><span class="line">            ret = avcodec_decode_audio4(codecCtx,frame,&amp;got_frame,packet);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                LOGI(<span class="string">"%s"</span>,<span class="string">"解码完成"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//解码一帧成功</span></span><br><span class="line">            <span class="keyword">if</span>(got_frame &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                LOGI(<span class="string">"解码：%d"</span>,index++);</span><br><span class="line">                swr_convert(swrCtx, &amp;out_buffer, MAX_AUDIO_FRAME_SIZE,(<span class="keyword">const</span> <span class="keyword">uint8_t</span> **)frame-&gt;data,frame-&gt;nb_samples);</span><br><span class="line">                <span class="comment">//获取sample的size</span></span><br><span class="line">                <span class="keyword">int</span> out_buffer_size = av_samples_get_buffer_size(NULL, out_channel_nb,</span><br><span class="line">                                                                 frame-&gt;nb_samples, out_sample_fmt, <span class="number">1</span>);</span><br><span class="line">                fwrite(out_buffer,<span class="number">1</span>,out_buffer_size,fp_pcm);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//out_buffer缓冲区数据，转成byte数组</span></span><br><span class="line">                jbyteArray audio_sample_array = env-&gt;NewByteArray(out_buffer_size);</span><br><span class="line">                jbyte* sample_bytep = env-&gt;GetByteArrayElements(audio_sample_array,NULL);</span><br><span class="line">                <span class="comment">//out_buffer的数据复制到sampe_bytep</span></span><br><span class="line">                <span class="built_in">memcpy</span>(sample_bytep,out_buffer,out_buffer_size);</span><br><span class="line">                <span class="comment">//同步</span></span><br><span class="line">                env-&gt;ReleaseByteArrayElements(audio_sample_array,sample_bytep,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//AudioTrack.write PCM数据</span></span><br><span class="line">                env-&gt;CallIntMethod(<span class="keyword">audio_t</span>rack,<span class="keyword">audio_t</span>rack_write_mid,</span><br><span class="line">                                      audio_sample_array,<span class="number">0</span>,out_buffer_size);</span><br><span class="line">                <span class="comment">//释放局部引用</span></span><br><span class="line">                env-&gt;DeleteLocalRef(audio_sample_array);</span><br><span class="line">                usleep(<span class="number">1000</span> * <span class="number">16</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        av_free_packet(packet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    av_frame_free(&amp;frame);</span><br><span class="line">    av_free(out_buffer);</span><br><span class="line"></span><br><span class="line">    swr_free(&amp;swrCtx);</span><br><span class="line">    avcodec_close(codecCtx);</span><br><span class="line">    avformat_close_input(&amp;pFormatCtx);</span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(input_, input_cstr);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(output_, output_cstr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_VideoPlayer_playSoud</span><span class="params">(JNIEnv *env, jobject instance, jstring input_)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input = env-&gt;GetStringUTFChars(input_, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span></span></span><br><span class="line">    <span class="comment">//1.注册所有组件</span></span><br><span class="line">    av_register_all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装格式上下文，统领全局的结构体，保存了音视频文件封装格式的相关信息</span></span><br><span class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.打开音频文件</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx, input, NULL, NULL) != <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法打开音频文件"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取音频文件信息</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法获取音频文件信息"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取音频流的索引位置</span></span><br><span class="line">    <span class="comment">//遍历所有类型的流（音频流、视频流、字幕流），找到音频流</span></span><br><span class="line">    <span class="keyword">int</span> audio_stream_idx = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//number of streams</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</span><br><span class="line">        <span class="comment">//流的类型</span></span><br><span class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;<span class="keyword">codec_t</span>ype == AVMEDIA_TYPE_AUDIO) &#123;</span><br><span class="line">            audio_stream_idx = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (audio_stream_idx == -<span class="number">1</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到音频流\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取音频流中的编解码上下文</span></span><br><span class="line">    AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[audio_stream_idx]-&gt;codec;</span><br><span class="line">    <span class="comment">//4.根据编解码上下文中的编码id查找对应的解码</span></span><br><span class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">    <span class="comment">//（迅雷看看，找不到解码器，临时下载一个解码器）</span></span><br><span class="line">    <span class="keyword">if</span> (pCodec == NULL) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到解码器\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.打开解码器</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"解码器无法打开\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出音频信息</span></span><br><span class="line">    LOGI(<span class="string">"音频的文件格式：%s"</span>, pFormatCtx-&gt;iformat-&gt;name);</span><br><span class="line">    LOGI(<span class="string">"音频时长：%lld"</span>, (pFormatCtx-&gt;duration) / <span class="number">1000000</span>);</span><br><span class="line">    LOGI(<span class="string">"音频的宽高：%d,%d"</span>, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class="line">    LOGI(<span class="string">"解码器的名称：%s"</span>, pCodec-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//压缩数据</span></span><br><span class="line">    AVPacket *packet = (AVPacket *)av_malloc(<span class="keyword">sizeof</span>(AVPacket));</span><br><span class="line">    <span class="comment">//解压缩数据</span></span><br><span class="line">    AVFrame *frame = av_frame_alloc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//frame-&gt;16bit  44100 PCM 统一音频采样格式与采样率</span></span><br><span class="line"></span><br><span class="line">    SwrContext *swrContext = swr_alloc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重采样设置参数</span></span><br><span class="line">    <span class="comment">//输入的采样格式</span></span><br><span class="line">    <span class="keyword">enum</span> AVSampleFormat  in_sample_fmt = pCodecCtx-&gt;sample_fmt;</span><br><span class="line">    <span class="comment">//输出的采样格式</span></span><br><span class="line">    <span class="keyword">enum</span> AVSampleFormat out_sample_fmt = AV_SAMPLE_FMT_S16;</span><br><span class="line">    <span class="comment">//输入采样率</span></span><br><span class="line">    <span class="keyword">int</span> in_sample_rate = pCodecCtx-&gt;sample_rate;</span><br><span class="line">    <span class="comment">//输出采样率</span></span><br><span class="line">    <span class="keyword">int</span> out_sample_rate = in_sample_rate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取输入的声道布局 参加AudioFormat.java  286行</span></span><br><span class="line">    <span class="comment">//根据声道个数获取默认的声道布局(2个声道,默认立体声CHANNEL_OUT_STEREO)</span></span><br><span class="line">    <span class="comment">//CHANNEL_OUT_5POINT1 为5.1环绕声</span></span><br><span class="line">    <span class="comment">//av_get_default_channel_layout(pCodecCtx-&gt;channels);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int64_t</span>  in_ch_layout = pCodecCtx-&gt;channel_layout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出的声道布局</span></span><br><span class="line">    <span class="keyword">int64_t</span> out_ch_layout = AV_CH_LAYOUT_STEREO;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出声道个数</span></span><br><span class="line">    <span class="keyword">int</span> out_channel_nb = av_get_channel_layout_nb_channels(out_ch_layout);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> log_offset = <span class="number">0</span>; <span class="comment">// 不偏移</span></span><br><span class="line"></span><br><span class="line">    swr_alloc_set_opts(swrContext,</span><br><span class="line">                       out_ch_layout, out_sample_fmt, out_sample_rate,</span><br><span class="line">                       in_ch_layout, in_sample_fmt, in_sample_rate,</span><br><span class="line">                       log_offset, NULL);</span><br><span class="line"></span><br><span class="line">    swr_init(swrContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//VideoPlayer</span></span><br><span class="line">    jclass player_class = env-&gt;GetObjectClass(instance);</span><br><span class="line">    <span class="comment">//AudioTrack对象</span></span><br><span class="line">    <span class="comment">//cd  cd /Users/vobile/AndroidStudioProjects/FFmpegDemo/app/build/intermediates/classes/debug/com/vobile/ffmpegdemo/</span></span><br><span class="line">    <span class="comment">//javap -s VideoPlayer.class</span></span><br><span class="line">    jmethodID <span class="keyword">create_audio_t</span>rack_mid = env-&gt;GetMethodID(player_class,<span class="string">"createAudioTrack"</span>,<span class="string">"(II)Landroid/media/AudioTrack;"</span>);</span><br><span class="line">    jobject <span class="keyword">audio_t</span>rack = env-&gt;CallObjectMethod(instance,<span class="keyword">create_audio_t</span>rack_mid,out_sample_rate,out_channel_nb);</span><br><span class="line">    <span class="comment">//调用AudioTrack.play()方法</span></span><br><span class="line">    jclass <span class="keyword">audio_t</span>rack_class = env-&gt;GetObjectClass(<span class="keyword">audio_t</span>rack);</span><br><span class="line">    jmethodID <span class="keyword">audio_t</span>rack_play_mid = env-&gt;GetMethodID(<span class="keyword">audio_t</span>rack_class,<span class="string">"play"</span>,<span class="string">"()V"</span>);</span><br><span class="line">    env-&gt;CallVoidMethod(<span class="keyword">audio_t</span>rack,<span class="keyword">audio_t</span>rack_play_mid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AudioTrack.write</span></span><br><span class="line">    jmethodID <span class="keyword">audio_t</span>rack_write_mid = env-&gt;GetMethodID(<span class="keyword">audio_t</span>rack_class,<span class="string">"write"</span>,<span class="string">"([BII)I"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存了16bit  44100 PCM 采样数据</span></span><br><span class="line">    <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span> *)av_malloc(MAX_AUDIO_FRAME_SIZE); <span class="comment">//unsigned char</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> got_frame = <span class="number">0</span>, frame_count = <span class="number">0</span>, ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不断读取压缩数据</span></span><br><span class="line">    <span class="keyword">while</span>(av_read_frame(pFormatCtx,packet) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//解码音频类型的Packet</span></span><br><span class="line">        <span class="keyword">if</span>(packet-&gt;stream_index == audio_stream_idx)&#123;</span><br><span class="line">            <span class="comment">//解码</span></span><br><span class="line">            ret = avcodec_decode_audio4(pCodecCtx, frame,&amp;got_frame,packet);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                LOGE(<span class="string">"%s"</span>, <span class="string">"解码错误"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//解码一帧成功</span></span><br><span class="line">            <span class="keyword">if</span> (got_frame &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                LOGI(<span class="string">"解码: %d"</span>,frame_count++);</span><br><span class="line">                swr_convert(swrContext, &amp;out_buffer, MAX_AUDIO_FRAME_SIZE,</span><br><span class="line">                            (<span class="keyword">const</span> <span class="keyword">uint8_t</span> **) frame-&gt;data, frame-&gt;nb_samples);</span><br><span class="line">                <span class="comment">//获取sample的大小</span></span><br><span class="line">                <span class="keyword">int</span> out_buffer_size = av_samples_get_buffer_size(NULL,out_channel_nb,frame-&gt;nb_samples,out_sample_fmt,<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//AudioTrack.writePCM数据</span></span><br><span class="line">                <span class="comment">//out_buffer缓冲区数据,转成byte数组</span></span><br><span class="line">                jbyteArray  audio_sample_array = env-&gt;NewByteArray(out_buffer_size);</span><br><span class="line">                jbyte* sample_bytep = env-&gt;GetByteArrayElements(audio_sample_array,NULL);</span><br><span class="line">                <span class="comment">//out_buffer的数据复制到sample_bytep</span></span><br><span class="line">                <span class="built_in">memcpy</span>(sample_bytep,out_buffer,out_buffer_size);</span><br><span class="line">                <span class="comment">//同步</span></span><br><span class="line">                env-&gt;ReleaseByteArrayElements(audio_sample_array,sample_bytep,<span class="number">0</span>);</span><br><span class="line">                env-&gt;CallIntMethod(<span class="keyword">audio_t</span>rack,<span class="keyword">audio_t</span>rack_write_mid,</span><br><span class="line">                                   audio_sample_array,<span class="number">0</span>,out_buffer_size);</span><br><span class="line">                <span class="comment">//释放局部引用</span></span><br><span class="line">                env-&gt;DeleteLocalRef(audio_sample_array);</span><br><span class="line">                usleep(<span class="number">1000</span> * <span class="number">16</span>);<span class="comment">//16毫秒</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        av_free_packet(packet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    av_frame_free(&amp;frame);</span><br><span class="line">    av_free(out_buffer);</span><br><span class="line"></span><br><span class="line">    swr_free(&amp;swrContext);</span><br><span class="line">    avcodec_close(pCodecCtx);</span><br><span class="line">    avformat_close_input(&amp;pFormatCtx);</span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(input_, input);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_VideoPlayer_sound</span><span class="params">(JNIEnv *env, jobject instance, jstring input_,</span><br><span class="line">                                             jstring output_)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input = env-&gt;GetStringUTFChars(input_, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *output = env-&gt;GetStringUTFChars(output_, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span></span></span><br><span class="line">    <span class="comment">//1.注册所有组件</span></span><br><span class="line">    av_register_all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装格式上下文，统领全局的结构体，保存了音视频文件封装格式的相关信息</span></span><br><span class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.打开音频文件</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx, input, NULL, NULL) != <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法打开音频文件"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取音频文件信息</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法获输入文件信息"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取音频流的索引位置</span></span><br><span class="line">    <span class="comment">//遍历所有类型的流（音频流、视频流、字幕流），找到音频流</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>, audio_stream_idx = -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//number of streams</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</span><br><span class="line">        <span class="comment">//流的类型</span></span><br><span class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;<span class="keyword">codec_t</span>ype == AVMEDIA_TYPE_AUDIO) &#123;</span><br><span class="line">            audio_stream_idx = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (audio_stream_idx == -<span class="number">1</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到音频流\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取音频流中的编解码上下文</span></span><br><span class="line">    AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[audio_stream_idx]-&gt;codec;</span><br><span class="line">    <span class="comment">//4.根据编解码上下文中的编码id查找对应的解码</span></span><br><span class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">    <span class="comment">//（迅雷看看，找不到解码器，临时下载一个解码器）</span></span><br><span class="line">    <span class="keyword">if</span> (pCodec == NULL) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到解码器\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.打开解码器</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法打开解码器\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出音频信息</span></span><br><span class="line">    LOGI(<span class="string">"音频的文件格式：%s"</span>, pFormatCtx-&gt;iformat-&gt;name);</span><br><span class="line">    LOGI(<span class="string">"音频时长：%lld"</span>, (pFormatCtx-&gt;duration) / <span class="number">1000000</span>);</span><br><span class="line">    LOGI(<span class="string">"音频的宽高：%d,%d"</span>, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class="line">    LOGI(<span class="string">"解码器的名称：%s"</span>, pCodec-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//压缩数据</span></span><br><span class="line">    AVPacket *packet = (AVPacket *)av_malloc(<span class="keyword">sizeof</span>(AVPacket));</span><br><span class="line">    <span class="comment">//解压缩数据</span></span><br><span class="line">    AVFrame *frame = av_frame_alloc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//frame-&gt;16bit  44100 PCM 统一音频采样格式与采样率</span></span><br><span class="line"></span><br><span class="line">    SwrContext *swrContext = swr_alloc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重采样设置参数</span></span><br><span class="line">    <span class="comment">//输入的采样格式</span></span><br><span class="line">    <span class="keyword">enum</span> AVSampleFormat  in_sample_fmt = pCodecCtx-&gt;sample_fmt;</span><br><span class="line">    <span class="comment">//输出的采样格式16bit PCM</span></span><br><span class="line">    <span class="keyword">enum</span> AVSampleFormat out_sample_fmt = AV_SAMPLE_FMT_S16;</span><br><span class="line">    <span class="comment">//输入采样率</span></span><br><span class="line">    <span class="keyword">int</span> in_sample_rate = pCodecCtx-&gt;sample_rate;</span><br><span class="line">    <span class="comment">//输出采样率</span></span><br><span class="line">    <span class="keyword">int</span> out_sample_rate = in_sample_rate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取输入的声道布局 参加AudioFormat.java  286行</span></span><br><span class="line">    <span class="comment">//根据声道个数获取默认的声道布局(2个声道,默认立体声CHANNEL_OUT_STEREO)</span></span><br><span class="line">    <span class="comment">//CHANNEL_OUT_5POINT1 为5.1环绕声</span></span><br><span class="line">    <span class="comment">//av_get_default_channel_layout(pCodecCtx-&gt;channels);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int64_t</span>  in_ch_layout = pCodecCtx-&gt;channel_layout;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出的声道布局</span></span><br><span class="line">    <span class="keyword">int64_t</span> out_ch_layout = AV_CH_LAYOUT_STEREO;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出的声道个数</span></span><br><span class="line">    <span class="keyword">int</span> out_channel_nb = av_get_channel_layout_nb_channels(out_ch_layout);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> log_offset = <span class="number">0</span>; <span class="comment">// 不偏移</span></span><br><span class="line"></span><br><span class="line">    swr_alloc_set_opts(swrContext,</span><br><span class="line">                       out_ch_layout, out_sample_fmt, out_sample_rate,</span><br><span class="line">                       in_ch_layout, in_sample_fmt, in_sample_rate,</span><br><span class="line">                       log_offset, NULL);</span><br><span class="line">    swr_init(swrContext);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存了16bit  44100 PCM 采样数据</span></span><br><span class="line">    <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span> *)av_malloc(MAX_AUDIO_FRAME_SIZE); <span class="comment">//unsigned char</span></span><br><span class="line"></span><br><span class="line">    FILE *fp_pcm = fopen(output, <span class="string">"wb"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> got_frame = <span class="number">0</span>, frame_count = <span class="number">0</span>, ret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不断读取压缩数据</span></span><br><span class="line">    <span class="keyword">while</span>(av_read_frame(pFormatCtx,packet) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//解码音频类型的Packet</span></span><br><span class="line">        <span class="keyword">if</span>(packet-&gt;stream_index == audio_stream_idx)&#123;</span><br><span class="line">            <span class="comment">//解码</span></span><br><span class="line">            ret = avcodec_decode_audio4(pCodecCtx, frame,&amp;got_frame,packet);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                LOGE(<span class="string">"%s"</span>, <span class="string">"解码错误"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//解码一帧成功</span></span><br><span class="line">            <span class="keyword">if</span> (got_frame &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                LOGI(<span class="string">"解码: %d"</span>,frame_count++);</span><br><span class="line">                swr_convert(swrContext, &amp;out_buffer, MAX_AUDIO_FRAME_SIZE,</span><br><span class="line">                            (<span class="keyword">const</span> <span class="keyword">uint8_t</span> **) frame-&gt;data, frame-&gt;nb_samples);</span><br><span class="line">                <span class="comment">//获取sample的大小</span></span><br><span class="line">                <span class="keyword">int</span> out_buffer_size = av_samples_get_buffer_size(NULL,out_channel_nb,frame-&gt;nb_samples,out_sample_fmt,<span class="number">1</span>);</span><br><span class="line">                <span class="comment">//uint8_t *out_buffer---unsigned char--1</span></span><br><span class="line">                fwrite(out_buffer,<span class="number">1</span>,out_buffer_size,fp_pcm);</span><br><span class="line">            &#125;</span><br><span class="line">            av_free_packet(packet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    LOGI(<span class="string">"解码完成"</span>);</span><br><span class="line">    fclose(fp_pcm);</span><br><span class="line">    av_frame_free(&amp;frame);</span><br><span class="line">    av_free(out_buffer);</span><br><span class="line">    swr_free(&amp;swrContext);</span><br><span class="line">    avcodec_close(pCodecCtx);</span><br><span class="line">    avformat_close_input(&amp;pFormatCtx);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(input_, input);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(output_, output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_VideoPlayer_render</span><span class="params">(JNIEnv *env, jobject instance, jstring input_,</span><br><span class="line">                                              jobject surface)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需要转码的视频文件(输入的视频文件)</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input_cstr = env-&gt;GetStringUTFChars(input_, NULL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span></span></span><br><span class="line">    <span class="comment">//1.注册所有组件</span></span><br><span class="line">    av_register_all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装格式上下文，统领全局的结构体，保存了视频文件封装格式的相关信息</span></span><br><span class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.打开输入视频文件</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx, input_cstr, NULL, NULL) != <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法打开输入视频文件"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取视频文件信息</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法获取视频文件信息"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取视频流的索引位置</span></span><br><span class="line">    <span class="comment">//遍历所有类型的流（音频流、视频流、字幕流），找到视频流</span></span><br><span class="line">    <span class="keyword">int</span> v_stream_idx = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//number of streams</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</span><br><span class="line">        <span class="comment">//流的类型</span></span><br><span class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;<span class="keyword">codec_t</span>ype == AVMEDIA_TYPE_VIDEO) &#123;</span><br><span class="line">            v_stream_idx = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v_stream_idx == -<span class="number">1</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到视频流\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有知道视频的编码方式，才能够根据编码方式去找到解码器</span></span><br><span class="line">    <span class="comment">//获取视频流中的编解码上下文</span></span><br><span class="line">    AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[v_stream_idx]-&gt;codec;</span><br><span class="line">    <span class="comment">//4.根据编解码上下文中的编码id查找对应的解码</span></span><br><span class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">    <span class="comment">//（迅雷看看，找不到解码器，临时下载一个解码器）</span></span><br><span class="line">    <span class="keyword">if</span> (pCodec == NULL) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到解码器\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.打开解码器</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"解码器无法打开\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出视频信息</span></span><br><span class="line">    LOGI(<span class="string">"视频的文件格式：%s"</span>, pFormatCtx-&gt;iformat-&gt;name);</span><br><span class="line">    LOGI(<span class="string">"视频时长：%lld"</span>, (pFormatCtx-&gt;duration) / <span class="number">1000000</span>);</span><br><span class="line">    LOGI(<span class="string">"视频的宽高：%d,%d"</span>, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class="line">    LOGI(<span class="string">"解码器的名称：%s"</span>, pCodec-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备读取</span></span><br><span class="line">    <span class="comment">//AVPacket用于存储一帧一帧的压缩数据（H264）</span></span><br><span class="line">    <span class="comment">//缓冲区，开辟空间</span></span><br><span class="line">    <span class="comment">//AVPacket *packet; //编码数据</span></span><br><span class="line">    <span class="comment">//av_init_packet(packet);</span></span><br><span class="line">    AVPacket *packet = (AVPacket *) av_malloc(<span class="keyword">sizeof</span>(AVPacket));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AVFrame用于存储解码后的像素数据(YUV)</span></span><br><span class="line">    <span class="comment">//内存分配</span></span><br><span class="line">    AVFrame *yuv_frame = av_frame_alloc();</span><br><span class="line"></span><br><span class="line">    AVFrame *rgb_frame = av_frame_alloc();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//native绘制</span></span><br><span class="line">    <span class="comment">//窗体</span></span><br><span class="line">    ANativeWindow*  nativeWindow = ANativeWindow_fromSurface(env, surface);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绘制时的缓冲区</span></span><br><span class="line">    ANativeWindow_Buffer outBuffer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> got_picture, ret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> frame_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.一帧一帧的读取压缩数据</span></span><br><span class="line">    <span class="keyword">while</span> (av_read_frame(pFormatCtx, packet) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//只要视频压缩数据（根据流的索引位置判断）</span></span><br><span class="line">        <span class="keyword">if</span> (packet-&gt;stream_index == v_stream_idx) &#123;</span><br><span class="line">            <span class="comment">//7.解码一帧视频压缩数据，得到视频像素数据</span></span><br><span class="line">            <span class="comment">//解码 AVPacket-&gt;AVFrame</span></span><br><span class="line">            ret = avcodec_decode_video2(pCodecCtx, yuv_frame, &amp;got_picture, packet);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                LOGE(<span class="string">"%s"</span>, <span class="string">"解码错误"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//为0说明解码完成，非0正在解码</span></span><br><span class="line">            <span class="keyword">if</span> (got_picture) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//lock</span></span><br><span class="line">                <span class="comment">//设置缓冲区的属性(宽、高、像素格式)  这里应该和SurfaceView上指定的format一致</span></span><br><span class="line">                ANativeWindow_setBuffersGeometry(nativeWindow,</span><br><span class="line">                                                         pCodecCtx-&gt;width, pCodecCtx-&gt;height, WINDOW_FORMAT_RGBA_8888);</span><br><span class="line">                ANativeWindow_lock(nativeWindow,&amp;outBuffer,NULL);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//YUV-&gt;RGBA_8888</span></span><br><span class="line">                <span class="comment">//pCodecCtx-&gt;pix_fmt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//设置rgb_frame的属性(像素格式、宽高)和缓冲区</span></span><br><span class="line">                avpicture_fill((AVPicture *)rgb_frame, (<span class="keyword">uint8_t</span> *)outBuffer.bits, AV_PIX_FMT_RGBA,pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//fill buffer   data[0] 是Y 的数据, linesize[0]是Y的一行的大小</span></span><br><span class="line">                <span class="comment">//rgb_frame的缓冲区与outBuffer.bits是同一块内存</span></span><br><span class="line">                I420ToARGB(yuv_frame-&gt;data[<span class="number">0</span>],yuv_frame-&gt;linesize[<span class="number">0</span>],</span><br><span class="line">                           yuv_frame-&gt;data[<span class="number">2</span>],yuv_frame-&gt;linesize[<span class="number">2</span>],</span><br><span class="line">                           yuv_frame-&gt;data[<span class="number">1</span>],yuv_frame-&gt;linesize[<span class="number">1</span>],</span><br><span class="line">                           rgb_frame-&gt;data[<span class="number">0</span>], rgb_frame-&gt;linesize[<span class="number">0</span>],</span><br><span class="line">                           pCodecCtx-&gt;width,pCodecCtx-&gt;height</span><br><span class="line">                );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//unlock</span></span><br><span class="line">                ANativeWindow_unlockAndPost(nativeWindow);</span><br><span class="line"></span><br><span class="line">                frame_count++;</span><br><span class="line">                LOGI(<span class="string">"解码第%d帧"</span>, frame_count);</span><br><span class="line"></span><br><span class="line">                usleep(<span class="number">1000</span> * <span class="number">16</span>);<span class="comment">//16毫秒</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        av_free_packet(packet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    ANativeWindow_release(nativeWindow);</span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(input_, input_cstr);</span><br><span class="line"></span><br><span class="line">    av_frame_free(&amp;yuv_frame);</span><br><span class="line"></span><br><span class="line">    avcodec_close(pCodecCtx);</span><br><span class="line"></span><br><span class="line">    avformat_free_context(pFormatCtx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_MainActivity_decode</span><span class="params">(JNIEnv *env, jclass type, jstring input_,</span><br><span class="line">                                               jstring output_)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需要转码的视频文件(输入的视频文件)</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *input_cstr = env-&gt;GetStringUTFChars(input_, NULL);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *output_cstr = env-&gt;GetStringUTFChars(output_, NULL);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag"><span class="keyword">TODO</span></span></span></span><br><span class="line">    <span class="comment">//1.注册所有组件</span></span><br><span class="line">    av_register_all();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装格式上下文，统领全局的结构体，保存了视频文件封装格式的相关信息</span></span><br><span class="line">    AVFormatContext *pFormatCtx = avformat_alloc_context();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.打开输入视频文件</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_open_input(&amp;pFormatCtx, input_cstr, NULL, NULL) != <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法打开输入视频文件"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.获取视频文件信息</span></span><br><span class="line">    <span class="keyword">if</span> (avformat_find_stream_info(pFormatCtx, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"无法获取视频文件信息"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取视频流的索引位置</span></span><br><span class="line">    <span class="comment">//遍历所有类型的流（音频流、视频流、字幕流），找到视频流</span></span><br><span class="line">    <span class="keyword">int</span> v_stream_idx = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//number of streams</span></span><br><span class="line">    <span class="keyword">for</span> (; i &lt; pFormatCtx-&gt;nb_streams; i++) &#123;</span><br><span class="line">        <span class="comment">//流的类型</span></span><br><span class="line">        <span class="keyword">if</span> (pFormatCtx-&gt;streams[i]-&gt;codec-&gt;<span class="keyword">codec_t</span>ype == AVMEDIA_TYPE_VIDEO) &#123;</span><br><span class="line">            v_stream_idx = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (v_stream_idx == -<span class="number">1</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到视频流\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只有知道视频的编码方式，才能够根据编码方式去找到解码器</span></span><br><span class="line">    <span class="comment">//获取视频流中的编解码上下文</span></span><br><span class="line">    AVCodecContext *pCodecCtx = pFormatCtx-&gt;streams[v_stream_idx]-&gt;codec;</span><br><span class="line">    <span class="comment">//4.根据编解码上下文中的编码id查找对应的解码</span></span><br><span class="line">    AVCodec *pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line">    <span class="comment">//（迅雷看看，找不到解码器，临时下载一个解码器）</span></span><br><span class="line">    <span class="keyword">if</span> (pCodec == NULL) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"找不到解码器\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.打开解码器</span></span><br><span class="line">    <span class="keyword">if</span> (avcodec_open2(pCodecCtx, pCodec, NULL) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>, <span class="string">"解码器无法打开\n"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出视频信息</span></span><br><span class="line">    LOGI(<span class="string">"视频的文件格式：%s"</span>, pFormatCtx-&gt;iformat-&gt;name);</span><br><span class="line">    LOGI(<span class="string">"视频时长：%lld"</span>, (pFormatCtx-&gt;duration) / <span class="number">1000000</span>);</span><br><span class="line">    LOGI(<span class="string">"视频的宽高：%d,%d"</span>, pCodecCtx-&gt;width, pCodecCtx-&gt;height);</span><br><span class="line">    LOGI(<span class="string">"解码器的名称：%s"</span>, pCodec-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//准备读取</span></span><br><span class="line">    <span class="comment">//AVPacket用于存储一帧一帧的压缩数据（H264）</span></span><br><span class="line">    <span class="comment">//缓冲区，开辟空间</span></span><br><span class="line">    <span class="comment">//AVPacket *packet; //编码数据</span></span><br><span class="line">    <span class="comment">//av_init_packet(packet);</span></span><br><span class="line">    AVPacket *packet = (AVPacket *) av_malloc(<span class="keyword">sizeof</span>(AVPacket));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//AVFrame用于存储解码后的像素数据(YUV)</span></span><br><span class="line">    <span class="comment">//内存分配</span></span><br><span class="line">    AVFrame *pFrame = av_frame_alloc();</span><br><span class="line">    <span class="comment">//YUV420 像素数据(解码数据)</span></span><br><span class="line">    AVFrame *pFrameYUV = av_frame_alloc();</span><br><span class="line">    <span class="comment">//只有指定了AVFrame的像素格式、画面大小才能真正分配内存</span></span><br><span class="line">    <span class="comment">//缓冲区分配内存</span></span><br><span class="line">    <span class="keyword">uint8_t</span> *out_buffer = (<span class="keyword">uint8_t</span> *) av_malloc(</span><br><span class="line">            avpicture_get_size(AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, pCodecCtx-&gt;height));</span><br><span class="line">    <span class="comment">//初始化缓冲区</span></span><br><span class="line">    avpicture_fill((AVPicture *) pFrameYUV, out_buffer, AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width,</span><br><span class="line">                   pCodecCtx-&gt;height);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于转码（缩放）的参数，转之前的宽高，转之后的宽高，格式等</span></span><br><span class="line">    <span class="keyword">struct</span> SwsContext *sws_ctx = sws_getContext(pCodecCtx-&gt;width, pCodecCtx-&gt;height,</span><br><span class="line">                                                pCodecCtx-&gt;pix_fmt,</span><br><span class="line">                                                pCodecCtx-&gt;width, pCodecCtx-&gt;height,</span><br><span class="line">                                                AV_PIX_FMT_YUV420P,</span><br><span class="line">                                                SWS_BICUBIC, NULL, NULL, NULL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> got_picture, ret;</span><br><span class="line"></span><br><span class="line">    FILE *fp_yuv = fopen(output_cstr, <span class="string">"wb+"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> frame_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.一帧一帧的读取压缩数据</span></span><br><span class="line">    <span class="keyword">while</span> (av_read_frame(pFormatCtx, packet) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//只要视频压缩数据（根据流的索引位置判断）</span></span><br><span class="line">        <span class="keyword">if</span> (packet-&gt;stream_index == v_stream_idx) &#123;</span><br><span class="line">            <span class="comment">//7.解码一帧视频压缩数据，得到视频像素数据</span></span><br><span class="line">            ret = avcodec_decode_video2(pCodecCtx, pFrame, &amp;got_picture, packet);</span><br><span class="line">            <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                LOGE(<span class="string">"%s"</span>, <span class="string">"解码错误"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//为0说明解码完成，非0正在解码</span></span><br><span class="line">            <span class="keyword">if</span> (got_picture) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//AVFrame转为像素格式YUV420，宽高</span></span><br><span class="line">                <span class="comment">//2 6输入、输出数据</span></span><br><span class="line">                <span class="comment">//3 7输入、输出画面一行的数据的大小 AVFrame 转换是一行一行转换的</span></span><br><span class="line">                <span class="comment">//4 输入数据第一列要转码的位置 从0开始</span></span><br><span class="line">                <span class="comment">//5 输入画面的高度</span></span><br><span class="line">                sws_scale(sws_ctx, (<span class="keyword">const</span> <span class="keyword">uint8_t</span> **)pFrame-&gt;data, pFrame-&gt;linesize, <span class="number">0</span>, pCodecCtx-&gt;height,</span><br><span class="line">                          pFrameYUV-&gt;data, pFrameYUV-&gt;linesize);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//输出到YUV文件</span></span><br><span class="line">                <span class="comment">//AVFrame像素帧写入文件</span></span><br><span class="line">                <span class="comment">//data解码后的图像像素数据（音频采样数据）</span></span><br><span class="line">                <span class="comment">//Y 亮度 UV 色度（压缩了） 人对亮度更加敏感</span></span><br><span class="line">                <span class="comment">//U V 个数是Y的1/4</span></span><br><span class="line">                <span class="keyword">int</span> y_size = pCodecCtx-&gt;width * pCodecCtx-&gt;height;</span><br><span class="line">                fwrite(pFrameYUV-&gt;data[<span class="number">0</span>], <span class="number">1</span>, y_size, fp_yuv);</span><br><span class="line">                fwrite(pFrameYUV-&gt;data[<span class="number">1</span>], <span class="number">1</span>, y_size / <span class="number">4</span>, fp_yuv);</span><br><span class="line">                fwrite(pFrameYUV-&gt;data[<span class="number">2</span>], <span class="number">1</span>, y_size / <span class="number">4</span>, fp_yuv);</span><br><span class="line"></span><br><span class="line">                frame_count++;</span><br><span class="line">                LOGI(<span class="string">"解码第%d帧"</span>, frame_count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        av_free_packet(packet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(fp_yuv);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    env-&gt;ReleaseStringUTFChars(input_, input_cstr);</span><br><span class="line">    env-&gt;ReleaseStringUTFChars(output_, output_cstr);</span><br><span class="line"></span><br><span class="line">    av_frame_free(&amp;pFrame);</span><br><span class="line"></span><br><span class="line">    avcodec_close(pCodecCtx);</span><br><span class="line"></span><br><span class="line">    avformat_free_context(pFormatCtx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span></span><br><span class="line"><span class="function">jstring</span><br><span class="line"><span class="title">Java_com_vobile_ffmpegdemo_MainActivity_stringFromJNI</span><span class="params">(</span><br><span class="line">        JNIEnv *env,</span><br><span class="line">        jobject <span class="comment">/* this */</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">"Hello from C++"</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>备注: 播放音频时务必使用真机,模拟机不支持AudioTrack播放pcm格式音频</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="FFmpeg_和_libyuv的基本使用">FFmpeg 和 libyuv的基本使用</h3><h4 id="万能视频播放器">万能视频播放器</h4><p>实现的基本过程:</p>
<p>将任意格式的视频文件统一解码成YUV格式,然后将解码后的帧数据绘制到本地ANativeWindow里的Surface上. 这里的Surface由SurfaceView提供</p>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[FFmpeg和libyuv的基本使用(四)]]></title>
    <link href="http://yoursite.com/2017/08/04/android_ffmpeg_3/"/>
    <id>http://yoursite.com/2017/08/04/android_ffmpeg_3/</id>
    <published>2017-08-04T13:23:18.000Z</published>
    <updated>2017-08-04T13:25:04.000Z</updated>
    <content type="html"><![CDATA[<h3 id="新建并配置工程">新建并配置工程</h3><p>下面使用Android Studio 2.2.3来进行实例工程的开发</p>
<ul>
<li><p>新建FFmpegDemo 工程</p>
</li>
<li><p>将之前生成的FFmpeg头文件、FFmpeg动态库、libyuv头文件、libyuv动态库拷贝到libs目录下</p>
</li>
</ul>
<a id="more"></a>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/67A9C81A-FCC9-4DFA-8A0A-DFD8E2C15D75.png" alt=""></p>
<p>头文件如下图:</p>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/65E470C3-D8AC-44CF-90C1-06D80EEBCF97.png" alt=""></p>
<ul>
<li>整个CMakeLists文件内容如下:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sets the minimum version of CMake required to build the native</span></span><br><span class="line"><span class="comment"># library. You should either keep the default value or only pass a</span></span><br><span class="line"><span class="comment"># value of 3.4.0 or lower.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CMakeLists.txt用于配置jni项目属性，主要用于声明CMake版本 so库名称 C/Cpp文件路径等信息。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># cmake版本声明</span></span><br><span class="line">cmake_minimum_required(VERSION <span class="number">3.4</span>.<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creates and names a library, sets it as either STATIC</span></span><br><span class="line"><span class="comment"># or SHARED, and provides the relative paths to its source code.</span></span><br><span class="line"><span class="comment"># You can define multiple libraries, and CMake builds it for you.</span></span><br><span class="line"><span class="comment"># Gradle automatically packages shared libraries with your APK.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加native-lib动态共享库</span></span><br><span class="line"><span class="comment"># 配置库信息,库的名字,动态库或静态库,依赖的源文件</span></span><br><span class="line"><span class="comment"># STATIC: 静态库,是目标文件的归档文件,在链接其它目标的时候使用。</span></span><br><span class="line"><span class="comment"># SHARED: 动态库,会被动态链接,在运行时被加载。</span></span><br><span class="line"><span class="comment"># MODULE: 模块库,是不会被链接到其它目标中的插件,但是可能会在运行时使用</span></span><br><span class="line"><span class="comment"># dlopen: -系列的函数动态链接。</span></span><br><span class="line">add_library( <span class="comment"># Sets the name of the library.</span></span><br><span class="line">             native-lib</span><br><span class="line"></span><br><span class="line">             <span class="comment"># Sets the library as a shared library.</span></span><br><span class="line">             SHARED</span><br><span class="line"></span><br><span class="line">             <span class="comment"># Provides a relative path to your source file(s).</span></span><br><span class="line">             <span class="comment"># Associated headers in the same location as their source</span></span><br><span class="line">             <span class="comment"># file are automatically included.</span></span><br><span class="line">             src/main/cpp/native-lib.cpp )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Searches for a specified prebuilt library and stores the path as a</span></span><br><span class="line"><span class="comment"># variable. Because system libraries are included in the search path by</span></span><br><span class="line"><span class="comment"># default, you only need to specify the name of the public NDK library</span></span><br><span class="line"><span class="comment"># you want to add. CMake verifies that the library exists before</span></span><br><span class="line"><span class="comment"># completing its build.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载NDK上的library  C++日志</span></span><br><span class="line"><span class="comment"># 查找链接库  在指定目录下搜索一个库,保存在变量log-lib中,如果没有指定路径,则使用默认系统路径</span></span><br><span class="line">find_library( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">              <span class="built_in">log</span>-lib</span><br><span class="line">              <span class="comment"># Specifies the name of the NDK library that</span></span><br><span class="line">              <span class="comment"># you want CMake to locate.</span></span><br><span class="line">              <span class="built_in">log</span> )</span><br><span class="line"></span><br><span class="line">find_library( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">              jnigraphics-lib</span><br><span class="line">              <span class="comment"># Specifies the name of the NDK library that</span></span><br><span class="line">              <span class="comment"># you want CMake to locate.</span></span><br><span class="line">              jnigraphics )</span><br><span class="line"></span><br><span class="line">find_library( <span class="comment"># Sets the name of the path variable.</span></span><br><span class="line">              android-lib</span><br><span class="line">              <span class="comment"># Specifies the name of the NDK library that</span></span><br><span class="line">              <span class="comment"># you want CMake to locate.</span></span><br><span class="line">              android )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置cmakelist的目标路径</span></span><br><span class="line"><span class="built_in">set</span>(distribution_DIR <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加so文件动态共享库</span></span><br><span class="line"><span class="comment"># SHARED: 动态库,会被动态链接,在运行时被加载。</span></span><br><span class="line"><span class="comment"># IMPORTED : 不需要编译,由外部导入</span></span><br><span class="line">add_library( avutil-<span class="number">55</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># PROPERTIES IMPORTED_LOCATION: 需要从本地导入并配置导入文件的路径</span></span><br><span class="line"><span class="comment"># 设置动态库的路径 $&#123;CMAKE_SOURCE_DIR&#125;/libs/$&#123;ANDROID_ABI&#125;/libavutil-55.so</span></span><br><span class="line"><span class="comment"># $&#123;ANDROID_ABI&#125;表示so文件的ABI类型的路径</span></span><br><span class="line"><span class="built_in">set</span>_target_properties( avutil-<span class="number">55</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavutil-<span class="number">55</span>.so )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_library( swresample-<span class="number">2</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>_target_properties( swresample-<span class="number">2</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libswresample-<span class="number">2</span>.so )</span><br><span class="line">add_library( avcodec-<span class="number">57</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED )</span><br><span class="line"><span class="built_in">set</span>_target_properties( avcodec-<span class="number">57</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavcodec-<span class="number">57</span>.so )</span><br><span class="line">add_library( avfilter-<span class="number">6</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED)</span><br><span class="line"><span class="built_in">set</span>_target_properties( avfilter-<span class="number">6</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavfilter-<span class="number">6</span>.so )</span><br><span class="line">add_library( swscale-<span class="number">4</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED)</span><br><span class="line"><span class="built_in">set</span>_target_properties( swscale-<span class="number">4</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libswscale-<span class="number">4</span>.so )</span><br><span class="line"></span><br><span class="line">add_library( avformat-<span class="number">57</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED)</span><br><span class="line"><span class="built_in">set</span>_target_properties( avformat-<span class="number">57</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavformat-<span class="number">57</span>.so )</span><br><span class="line"></span><br><span class="line">add_library( avdevice-<span class="number">57</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED)</span><br><span class="line"><span class="built_in">set</span>_target_properties( avdevice-<span class="number">57</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libavdevice-<span class="number">57</span>.so )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_library( postproc-<span class="number">54</span></span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED)</span><br><span class="line"><span class="built_in">set</span>_target_properties( postproc-<span class="number">54</span></span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libpostproc-<span class="number">54</span>.so )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_library( yuv</span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED)</span><br><span class="line"><span class="built_in">set</span>_target_properties( yuv</span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line">                       <span class="variable">$&#123;CMAKE_SOURCE_DIR&#125;</span>/libs/<span class="variable">$&#123;ANDROID_ABI&#125;</span>/libyuv.so )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_FLAGS <span class="string">"<span class="variable">$&#123;CMAKE_CXX_FLAGS&#125;</span> -std=gnu++11"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置头文件路径</span></span><br><span class="line">include_directories(libs/include/ffmpeg libs/include/yuv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># include_directories(libs/include/yuv)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies libraries CMake should link to your target library. You</span></span><br><span class="line"><span class="comment"># can link multiple libraries, such as libraries you define in the</span></span><br><span class="line"><span class="comment"># build script, prebuilt third-party libraries, or system libraries.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成链接动态库</span></span><br><span class="line"><span class="comment"># 添加链接库,相同于指定-l参数</span></span><br><span class="line"><span class="comment"># 将需要的库文件进行链接</span></span><br><span class="line">target_link_libraries( <span class="comment"># Specifies the target library.</span></span><br><span class="line">                       native-lib</span><br><span class="line">                       avutil-<span class="number">55</span></span><br><span class="line">                       swresample-<span class="number">2</span></span><br><span class="line">                       avcodec-<span class="number">57</span></span><br><span class="line">                       avfilter-<span class="number">6</span></span><br><span class="line">                       swscale-<span class="number">4</span></span><br><span class="line">                       avformat-<span class="number">57</span></span><br><span class="line">                       avdevice-<span class="number">57</span></span><br><span class="line">                       postproc-<span class="number">54</span></span><br><span class="line">                       yuv</span><br><span class="line"></span><br><span class="line">                       <span class="comment"># Links the target library to the log library</span></span><br><span class="line">                       <span class="comment"># included in the NDK.</span></span><br><span class="line">                       <span class="variable">$&#123;log-lib&#125;</span></span><br><span class="line">                       <span class="variable">$&#123;jnigraphics-lib&#125;</span></span><br><span class="line">                       <span class="variable">$&#123;android-lib&#125;</span> )</span><br></pre></td></tr></table></figure>
<ul>
<li>app Module 下 build.gradle文件内容如下:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    buildToolsVersion <span class="string">"25.0.2"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"com.vobile.ffmpegdemo"</span></span><br><span class="line">        minSdkVersion <span class="number">15</span></span><br><span class="line">        targetSdkVersion <span class="number">25</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        <span class="built_in">test</span>InstrumentationRunner <span class="string">"android.support.test.runner.AndroidJUnitRunner"</span></span><br><span class="line">        externalNativeBuild &#123;</span><br><span class="line">            cmake &#123;</span><br><span class="line">                cppFlags <span class="string">"-frtti -fexceptions"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ndk &#123;</span><br><span class="line">            abiFilters <span class="string">'armeabi-v7a'</span>, <span class="string">"x86"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">source</span>Sets &#123;</span><br><span class="line"></span><br><span class="line">        main &#123;</span><br><span class="line">            jniLibs.srcDirs = [<span class="string">'libs'</span>]</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line"></span><br><span class="line">        debug &#123;</span><br><span class="line">            jniDebuggable <span class="literal">true</span></span><br><span class="line">            jniDebuggable = <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">            path <span class="string">"CMakeLists.txt"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(dir: <span class="string">'libs'</span>, include: [<span class="string">'*.jar'</span>])</span><br><span class="line">    androidTestCompile(<span class="string">'com.android.support.test.espresso:espresso-core:2.2.2'</span>, &#123;</span><br><span class="line">        exclude group: <span class="string">'com.android.support'</span>, module: <span class="string">'support-annotations'</span></span><br><span class="line">    &#125;)</span><br><span class="line">    compile <span class="string">'com.android.support:appcompat-v7:25.3.1'</span></span><br><span class="line">    <span class="built_in">test</span>Compile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="新建并配置工程">新建并配置工程</h3><p>下面使用Android Studio 2.2.3来进行实例工程的开发</p>
<ul>
<li><p>新建FFmpegDemo 工程</p>
</li>
<li><p>将之前生成的FFmpeg头文件、FFmpeg动态库、libyuv头文件、libyuv动态库拷贝到libs目录下</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[FFmpeg和libyuv的基本使用(三)]]></title>
    <link href="http://yoursite.com/2017/08/04/android_ffmpeg_2/"/>
    <id>http://yoursite.com/2017/08/04/android_ffmpeg_2/</id>
    <published>2017-08-04T13:20:30.000Z</published>
    <updated>2017-08-04T13:22:46.000Z</updated>
    <content type="html"><![CDATA[<h3 id="配置libyuv编译脚本">配置libyuv编译脚本</h3><p>如果需要将YUV格式转RGBA像素格式,建议使用另外一个开源库<code>libyuv</code>,接下来教大家编译并生成<code>libyuv.so</code>库</p>
<ul>
<li><p>下载<a href="https://chromium.googlesource.com/libyuv/libyuv/" target="_blank" rel="external">libyuv</a>源代码</p>
</li>
<li><p>使用git clone下来 <code>git clone https://chromium.googlesource.com/libyuv/libyuv</code></p>
</li>
<li><p><code>cd libyuv</code> 进入libyuv源码目录,新建jni目录<code>mkdir jni</code>将源码拷贝到jni目录下</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li>修改Android.mk文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is the Android makefile for libyuv for both platform and NDK.</span></span><br><span class="line">LOCAL_PATH:= $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_CPP_EXTENSION := .cc</span><br><span class="line"></span><br><span class="line">LOCAL_SRC_FILES := \</span><br><span class="line">    <span class="built_in">source</span>/compare.cc           \</span><br><span class="line">    <span class="built_in">source</span>/compare_common.cc    \</span><br><span class="line">    <span class="built_in">source</span>/convert.cc           \</span><br><span class="line">    <span class="built_in">source</span>/convert_argb.cc      \</span><br><span class="line">    <span class="built_in">source</span>/convert_from.cc      \</span><br><span class="line">    <span class="built_in">source</span>/convert_from_argb.cc \</span><br><span class="line">    <span class="built_in">source</span>/convert_to_argb.cc   \</span><br><span class="line">    <span class="built_in">source</span>/convert_to_i420.cc   \</span><br><span class="line">    <span class="built_in">source</span>/cpu_id.cc            \</span><br><span class="line">    <span class="built_in">source</span>/planar_functions.cc  \</span><br><span class="line">    <span class="built_in">source</span>/rotate.cc            \</span><br><span class="line">    <span class="built_in">source</span>/rotate_any.cc        \</span><br><span class="line">    <span class="built_in">source</span>/rotate_argb.cc       \</span><br><span class="line">    <span class="built_in">source</span>/rotate_common.cc     \</span><br><span class="line">    <span class="built_in">source</span>/row_any.cc           \</span><br><span class="line">    <span class="built_in">source</span>/row_common.cc        \</span><br><span class="line">    <span class="built_in">source</span>/scale.cc             \</span><br><span class="line">    <span class="built_in">source</span>/scale_any.cc         \</span><br><span class="line">    <span class="built_in">source</span>/scale_argb.cc        \</span><br><span class="line">    <span class="built_in">source</span>/scale_common.cc      \</span><br><span class="line">    <span class="built_in">source</span>/video_common.cc</span><br><span class="line"></span><br><span class="line">ifeq ($(TARGET_ARCH_ABI),armeabi-v7a)</span><br><span class="line">    LOCAL_CFLAGS += -DLIBYUV_NEON</span><br><span class="line">    LOCAL_SRC_FILES += \</span><br><span class="line">        <span class="built_in">source</span>/compare_neon.cc.neon    \</span><br><span class="line">        <span class="built_in">source</span>/rotate_neon.cc.neon     \</span><br><span class="line">        <span class="built_in">source</span>/row_neon.cc.neon        \</span><br><span class="line">        <span class="built_in">source</span>/scale_neon.cc.neon</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">ifeq ($(TARGET_ARCH_ABI),arm64-v8a)</span><br><span class="line">    LOCAL_CFLAGS += -DLIBYUV_NEON</span><br><span class="line">    LOCAL_SRC_FILES += \</span><br><span class="line">        <span class="built_in">source</span>/compare_neon64.cc    \</span><br><span class="line">        <span class="built_in">source</span>/rotate_neon64.cc     \</span><br><span class="line">        <span class="built_in">source</span>/row_neon64.cc        \</span><br><span class="line">        <span class="built_in">source</span>/scale_neon64.cc </span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line">ifeq ($(TARGET_ARCH_ABI),$(filter $(TARGET_ARCH_ABI), x86 x86_64))</span><br><span class="line">    LOCAL_SRC_FILES += \</span><br><span class="line">        <span class="built_in">source</span>/compare_gcc.cc       \</span><br><span class="line">        <span class="built_in">source</span>/rotate_gcc.cc        \</span><br><span class="line">        <span class="built_in">source</span>/row_gcc.cc           \</span><br><span class="line">        <span class="built_in">source</span>/scale_gcc.cc</span><br><span class="line">endif</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include</span><br><span class="line">LOCAL_C_INCLUDES += $(LOCAL_PATH)/include</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE := libyuv</span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line"></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>
<ul>
<li>修改Application.mk文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">APP_ABI := armeabi-v7a arm64-v8a x86 x86_64</span><br><span class="line">APP_PLATFORM := android-<span class="number">9</span></span><br><span class="line">APP_CPPFLAGS += -fno-rtti</span><br></pre></td></tr></table></figure>
<h3 id="编译libyuv动态库">编译libyuv动态库</h3><ul>
<li>使用<code>ndk-build</code>命令进行编译,每次执行<code>ndk-build</code>之前都需要<code>ndk-build clean</code>一遍才行,不然不会将新的改动编译进去。</li>
</ul>
<p>执行 <code>ndk-build NDK_PROJECT_PATH=/Users/weifeng/Downloads/libyuv NDK_APPLICATION_MK=/Users/weifeng/Downloads/libyuv/jni/Application.mk</code> 命令生成动态库</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="配置libyuv编译脚本">配置libyuv编译脚本</h3><p>如果需要将YUV格式转RGBA像素格式,建议使用另外一个开源库<code>libyuv</code>,接下来教大家编译并生成<code>libyuv.so</code>库</p>
<ul>
<li><p>下载<a href="https://chromium.googlesource.com/libyuv/libyuv/">libyuv</a>源代码</p>
</li>
<li><p>使用git clone下来 <code>git clone https://chromium.googlesource.com/libyuv/libyuv</code></p>
</li>
<li><p><code>cd libyuv</code> 进入libyuv源码目录,新建jni目录<code>mkdir jni</code>将源码拷贝到jni目录下</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[FFmpeg和libyuv的基本使用(二)]]></title>
    <link href="http://yoursite.com/2017/08/04/android_ffmpeg_1/"/>
    <id>http://yoursite.com/2017/08/04/android_ffmpeg_1/</id>
    <published>2017-08-04T13:15:36.000Z</published>
    <updated>2017-08-09T15:02:22.000Z</updated>
    <content type="html"><![CDATA[<h3 id="配置FFmpeg编译脚本">配置FFmpeg编译脚本</h3><ul>
<li><p>进入FFmpeg-master源码目录</p>
</li>
<li><p><code>touch config.sh</code> 添加如下内容</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NDK=/Users/weifeng/Library/Android/sdk/ndk-bundle</span><br><span class="line">SYSROOT=<span class="variable">$NDK</span>/platforms/android-<span class="number">22</span>/arch-x86_64</span><br><span class="line"><span class="comment">#交叉编译(在不同的平台下编译生成不同平台下的动态库需要交叉编译以及交叉编译工具) 工具链 目录路径</span></span><br><span class="line">TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/x86_64-<span class="number">4.9</span>/prebuilt/darwin-x86_64</span><br><span class="line">CPU=x86_64</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li><code>touch build_android.sh</code> 添加如下内容</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line">. config.sh</span><br><span class="line"><span class="comment">#声明变量 PREFIX代表编译后生成动态库的路径</span></span><br><span class="line">PREFIX=$(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">ADDI_CFLAGS=<span class="string">""</span></span><br><span class="line"><span class="comment">#--enable-cross-compile开启交叉编译,--cross-prefix 设置交叉编译所需要的交叉编译工具链所在目录</span></span><br><span class="line"><span class="comment">#--sysroot 交叉编译的根路径</span></span><br><span class="line"><span class="comment">#--arch 指定CPU架构</span></span><br><span class="line"><span class="comment">#--target-os 为哪个目标操作系统编译动态库</span></span><br><span class="line"><span class="comment">#--extra-cflags="-fpic"  动态库能够在Android上使用需要加上gcc fpic</span></span><br><span class="line"><span class="comment">#make clean 清除.o的临时文件</span></span><br><span class="line"><span class="comment">#make 自动编译</span></span><br><span class="line"><span class="comment">#make install 编译并且生成动态库</span></span><br><span class="line"><span class="keyword">function</span> build_android</span><br><span class="line">&#123;</span><br><span class="line">./configure \</span><br><span class="line">    --prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line">    --enable-shared \</span><br><span class="line">    --disable-static \</span><br><span class="line">    --disable-doc \</span><br><span class="line">    --disable-ffmpeg \</span><br><span class="line">    --disable-ffplay \</span><br><span class="line">    --disable-ffprobe \</span><br><span class="line">    --disable-ffserver \</span><br><span class="line">    --disable-doc \</span><br><span class="line">    --disable-symver \</span><br><span class="line">    --disable-x86asm \</span><br><span class="line">    --enable-gpl \</span><br><span class="line">    --cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/x86_64-linux-android- \</span><br><span class="line">    --target-os=linux \</span><br><span class="line">    --arch=x86_64 \</span><br><span class="line">    --enable-cross-compile \</span><br><span class="line">    --sysroot=<span class="variable">$SYSROOT</span> \</span><br><span class="line">    --extra-cflags=<span class="string">"-Os -fpic <span class="variable">$ADDI_CFLAGS</span>"</span> \</span><br><span class="line">    --extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</span><br><span class="line">    <span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span></span><br><span class="line">make clean</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">&#125;</span><br><span class="line">build_android</span><br></pre></td></tr></table></figure>
<ul>
<li>修改<code>configure</code>文件中<code># build settings</code>下内容</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># build settings</span></span><br><span class="line">SHFLAGS=<span class="string">'-shared -Wl,-soname,$$(@F)'</span></span><br><span class="line">LIBPREF=<span class="string">"lib"</span></span><br><span class="line">LIBSUF=<span class="string">".a"</span></span><br><span class="line">FULLNAME=<span class="string">'$(NAME)$(BUILDSUF)'</span></span><br><span class="line">LIBNAME=<span class="string">'$(LIBPREF)$(FULLNAME)$(LIBSUF)'</span></span><br><span class="line">SLIBPREF=<span class="string">"lib"</span></span><br><span class="line">SLIBSUF=<span class="string">".so"</span></span><br><span class="line">SLIBNAME=<span class="string">'$(SLIBPREF)$(FULLNAME)$(SLIBSUF)'</span></span><br><span class="line">SLIBNAME_WITH_VERSION=<span class="string">'$(SLIBNAME).$(LIBVERSION)'</span></span><br><span class="line">SLIBNAME_WITH_MAJOR=<span class="string">'$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'</span>  </span><br><span class="line">LIB_INSTALL_EXTRA_CMD=<span class="string">'$$(RANLIB)"$(LIBDIR)/$(LIBNAME)"'</span>  </span><br><span class="line">SLIB_INSTALL_NAME=<span class="string">'$(SLIBNAME_WITH_MAJOR)'</span>  </span><br><span class="line">SLIB_INSTALL_LINKS=<span class="string">'$(SLIBNAME)'</span></span><br><span class="line">VERSION_SCRIPT_POSTPROCESS_CMD=<span class="string">"cat"</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>为<code>build_android.sh</code>和<code>config.sh</code>添加执行权限  <code>chmod u+x build_android.sh</code> 、 <code>chmod u+x config.sh</code></p>
</li>
<li><p>执行<code>./build_android.sh</code> 编译并生成动态库</p>
</li>
</ul>
<p>如果要生成arm平台下的动态库,则要修改<code>config.sh</code>和<code>build_android.sh</code>内容如下:</p>
<p><code>config.sh</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NDK=/Users/weifeng/Library/Android/sdk/ndk-bundle</span><br><span class="line">SYSROOT=<span class="variable">$NDK</span>/platforms/android-<span class="number">21</span>/arch-arm</span><br><span class="line">TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/arm-linux-androideabi-<span class="number">4.9</span>/prebuilt/darwin-x86_64</span><br><span class="line">CPU=armv7<span class="operator">-a</span></span><br></pre></td></tr></table></figure>
<p><code>build_android.sh</code>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span><br><span class="line"></span></span><br><span class="line">. config.sh</span><br><span class="line"></span><br><span class="line">PREFIX=$(<span class="built_in">pwd</span>)/android/<span class="variable">$CPU</span></span><br><span class="line">ADDI_CFLAGS=<span class="string">"-marm"</span></span><br><span class="line"><span class="keyword">function</span> build_android</span><br><span class="line">&#123;</span><br><span class="line">./configure \</span><br><span class="line">    --prefix=<span class="variable">$PREFIX</span> \</span><br><span class="line">    --enable-shared \</span><br><span class="line">    --disable-static \</span><br><span class="line">    --disable-doc \</span><br><span class="line">    --disable-ffmpeg \</span><br><span class="line">    --disable-ffplay \</span><br><span class="line">    --disable-ffprobe \</span><br><span class="line">    --disable-ffserver \</span><br><span class="line">    --disable-doc \</span><br><span class="line">    --disable-symver \</span><br><span class="line">    --enable-gpl \</span><br><span class="line">    --cross-prefix=<span class="variable">$TOOLCHAIN</span>/bin/arm-linux-androideabi- \</span><br><span class="line">    --target-os=linux \</span><br><span class="line">    --arch=arm \</span><br><span class="line">    --enable-cross-compile \</span><br><span class="line">    --sysroot=<span class="variable">$SYSROOT</span> \</span><br><span class="line">    --extra-cflags=<span class="string">"-Os -fpic <span class="variable">$ADDI_CFLAGS</span>"</span> \</span><br><span class="line">    --extra-ldflags=<span class="string">"<span class="variable">$ADDI_LDFLAGS</span>"</span> \</span><br><span class="line">    <span class="variable">$ADDITIONAL_CONFIGURE_FLAG</span></span><br><span class="line">make clean</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">&#125;</span><br><span class="line">build_android</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h3 id="配置FFmpeg编译脚本">配置FFmpeg编译脚本</h3><ul>
<li><p>进入FFmpeg-master源码目录</p>
</li>
<li><p><code>touch config.sh</code> 添加如下内容</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NDK=/Users/weifeng/Library/Android/sdk/ndk-bundle</span><br><span class="line">SYSROOT=<span class="variable">$NDK</span>/platforms/android-<span class="number">22</span>/arch-x86_64</span><br><span class="line"><span class="comment">#交叉编译(在不同的平台下编译生成不同平台下的动态库需要交叉编译以及交叉编译工具) 工具链 目录路径</span></span><br><span class="line">TOOLCHAIN=<span class="variable">$NDK</span>/toolchains/x86_64-<span class="number">4.9</span>/prebuilt/darwin-x86_64</span><br><span class="line">CPU=x86_64</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[FFmpeg和libyuv的基本使用(一)]]></title>
    <link href="http://yoursite.com/2017/08/04/android_ffmpeg_0/"/>
    <id>http://yoursite.com/2017/08/04/android_ffmpeg_0/</id>
    <published>2017-08-04T12:15:36.000Z</published>
    <updated>2017-08-04T14:13:25.000Z</updated>
    <content type="html"><![CDATA[<h3 id="FFmpeg库简介">FFmpeg库简介</h3><h4 id="FFmpeg一共包含8个库:">FFmpeg一共包含8个库:</h4><ul>
<li><p>avodec: 编解码 (最重要的库)</p>
</li>
<li><p>avformat: 封装格式处理</p>
</li>
<li><p>avfilter: 滤镜特效处理</p>
</li>
<li><p>avdevice: 各种设备的输入输出</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>avutil: 工具库(大部分都需要这个库的支持)</p>
</li>
<li><p>postproc: 后加工</p>
</li>
<li><p>swresample: 音频采样数据格式转换</p>
</li>
<li><p>swscale: 视频像素数据格式转换</p>
</li>
</ul>
<h4 id="FFmpeg解码的流程图">FFmpeg解码的流程图</h4><p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/Snip20170728_3.png" alt=""></p>
<h4 id="FFmpeg解码函数简介">FFmpeg解码函数简介</h4><ul>
<li><p>av_register_all(): 注册所有组件</p>
</li>
<li><p>avformat_open_input(): 打开输入视频文件</p>
</li>
<li><p>avformat_find_stream_info(): 获取视频文件信息</p>
</li>
<li><p>avcodec_find_decoder(): 查找解码器</p>
</li>
<li><p>avcodec_open2(): 打开解码器</p>
</li>
<li><p>av_read_frame(): 从输入文件读取一帧压缩数据</p>
</li>
<li><p>avcodec_decode_vide2(): 解码一帧压缩数据</p>
</li>
<li><p>avcodec_close(): 关闭解码器</p>
</li>
<li><p>avformat_close_input(): 关闭输入视频文件 </p>
</li>
</ul>
<h4 id="FFmpeg解码的数据结构">FFmpeg解码的数据结构</h4><p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/Snip20170728_4.png" alt=""></p>
<h4 id="FFmpeg数据结构简介">FFmpeg数据结构简介</h4><ul>
<li><p>AVFormatContext</p>
<ul>
<li>封装格式上下文结构体,也是统领全局的结构体,保存了视频文件封装格式相关信息</li>
</ul>
</li>
<li><p>AVInputFormat</p>
<ul>
<li>每种封装格式(例如FLV,KVM,MP4,AVI)对应一个该结构体</li>
</ul>
</li>
<li><p>AVStream</p>
<ul>
<li>视频文件中每个视频(音频)流对应一个该结构体.(是一个数组,数量是不确定的,一般第0个都是视频流,第1个都是音频流)</li>
</ul>
</li>
<li><p>AVCodecContext</p>
<ul>
<li>编解码器上下文结构体,保存了视频(音频)编解码相关信息.(被更新了,现在使用AVCodecParameters,但是很多api并没有更新所以我们依旧使用AVCodecContext)</li>
</ul>
</li>
<li><p>AVCodec</p>
<ul>
<li>每种视频(音频)编解码器(例如H.264解码器)对应一个该结构体.(指明了编码器是什么类型的)</li>
</ul>
</li>
<li><p>AVPacket</p>
<ul>
<li>存储一帧压缩编码数据</li>
</ul>
</li>
<li><p>AVFrame</p>
<ul>
<li>存储一帧解码后像素(采样)数据</li>
</ul>
</li>
</ul>
<h4 id="FFmpeg数据结构的内容">FFmpeg数据结构的内容</h4><ul>
<li><p>AVFormatContext</p>
<ul>
<li>iformat: 输入视频的AVInputFormat</li>
<li>nb_streams: 输入视频的AVStream 个数</li>
<li>streams: 输入视频的AVStream []数组</li>
<li>duration: 输入视频的时长 (以微妙为单位)</li>
<li>bit_rate: 输入视频的码率</li>
</ul>
</li>
<li><p>AVInputFormat</p>
<ul>
<li>name: 封装格式名称</li>
<li>long_name: 封装格式的长名称</li>
<li>extensions: 封装格式的扩展名</li>
<li>id: 封装格式ID</li>
<li>一些封装格式处理的接口函数</li>
</ul>
</li>
<li><p>AVStream</p>
<ul>
<li>id: 序号</li>
<li>codec: 该流对应的AVCodecContext</li>
<li>time_base: 该流的时基</li>
<li>r_frame_rate: 该流的帧率</li>
</ul>
</li>
<li><p>AVCodecContext</p>
<ul>
<li>codec: 编解码器的AVCodec</li>
<li>width, height: 图形的宽高 (只针对视频)</li>
<li>pix_fmt: 像素格式 (只针对视频)</li>
<li>sample_rare: 采样率 (只针对音频)</li>
<li>channels: 声道数 (只针对音频)</li>
<li>sample_fmt: 采样格式 (只针对音频)</li>
</ul>
</li>
<li><p>AVCodec</p>
<ul>
<li>name: 编解码器名称</li>
<li>long_name: 编解码器长名称</li>
<li>type: 编解码器类型</li>
<li>id: 编解码器ID</li>
<li>一些编解码的接口函数</li>
</ul>
</li>
<li><p>AVPacket</p>
<ul>
<li>pts: 显示时间戳</li>
<li>dts: 解码时间戳</li>
<li>data: 压缩编码数据</li>
<li>size: 压缩编码数据大小</li>
<li>stream_index: 所属的AVStream</li>
</ul>
</li>
<li><p>AVFrame</p>
<ul>
<li>data: 编码后的图像像素数据 (音频采样数据)</li>
<li>linesize: 对视频来说是图像中一行像素的大小;对音频来说是整个音频帧的大小</li>
<li>width, height: 图像的宽高 (只针对视频)</li>
<li>key_frame: 是否为关键帧 (只针对视频)</li>
<li>pict_type: 帧类型 (只针对视频) 例如I, P, B</li>
</ul>
</li>
</ul>
<h4 id="示例程序">示例程序</h4><ul>
<li>位置: <code>FFmpeg-master/doc/examples</code></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="FFmpeg库简介">FFmpeg库简介</h3><h4 id="FFmpeg一共包含8个库:">FFmpeg一共包含8个库:</h4><ul>
<li><p>avodec: 编解码 (最重要的库)</p>
</li>
<li><p>avformat: 封装格式处理</p>
</li>
<li><p>avfilter: 滤镜特效处理</p>
</li>
<li><p>avdevice: 各种设备的输入输出</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio配置自动生成类的头文件和查看类中方法签名]]></title>
    <link href="http://yoursite.com/2017/08/04/as_javap_javah/"/>
    <id>http://yoursite.com/2017/08/04/as_javap_javah/</id>
    <published>2017-08-04T06:33:37.000Z</published>
    <updated>2017-08-04T13:12:20.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Android_Studio配置自动生成类的头文件以及查看类中方法签名">Android Studio配置自动生成类的头文件以及查看类中方法签名</h3><ul>
<li><p>Android Studio-&gt;Preferences-&gt;Tools-&gt;External Tools</p>
</li>
<li><p>查看项目中类方法签名配置如下</p>
</li>
</ul>
<a id="more"></a>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/Snip20170804_2.png" alt=""></p>
<ul>
<li>查看系统源码中类中方法签名</li>
</ul>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/Snip20170804_android_javap.png" alt=""></p>
<ul>
<li>生成头文件</li>
</ul>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/Snip20170804_javah.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Android_Studio配置自动生成类的头文件以及查看类中方法签名">Android Studio配置自动生成类的头文件以及查看类中方法签名</h3><ul>
<li><p>Android Studio-&gt;Preferences-&gt;Tools-&gt;External Tools</p>
</li>
<li><p>查看项目中类方法签名配置如下</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vim使用]]></title>
    <link href="http://yoursite.com/2017/07/26/vim/"/>
    <id>http://yoursite.com/2017/07/26/vim/</id>
    <published>2017-07-26T13:44:23.000Z</published>
    <updated>2017-08-06T13:58:10.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Vim的基本使用">Vim的基本使用</h2><h3 id="插入模式">插入模式</h3><ul>
<li><p><code>i</code> 进入插入模式,光标前</p>
</li>
<li><p><code>a</code> 进入插入模式,光标后</p>
</li>
<li><p><code>I</code> 行首</p>
</li>
<li><p><code>A</code> 行末</p>
</li>
</ul>
<a id="more"></a>
<h3 id="命令模式">命令模式</h3><ul>
<li><p><code>Esc</code> 进入命令模式</p>
</li>
<li><p><code>u</code> 撤销上一步的操作</p>
</li>
<li><p><code>Ctrl r</code> 恢复上一步被撤销的操作 </p>
</li>
<li><p><code>x</code> 删除, <code>dd</code> 删除一行</p>
</li>
<li><p><code>0</code> 跳到行首</p>
</li>
<li><p><code>shift g</code> 跳到文尾</p>
</li>
<li><p><code>gg</code> 跳到文首</p>
</li>
<li><p><code>w</code> 光标跳到下个字的开头</p>
</li>
<li><p><code>e</code> 光标跳到下个字的结尾</p>
</li>
<li><p><code>b</code> 光标回到上个字的开头</p>
</li>
<li><p><code>yy</code> 复制行</p>
</li>
<li><p><code>p</code> 粘贴</p>
</li>
<li><p><code>Ctrl f</code> 上一页  <code>Ctrl b</code> 下一页</p>
</li>
</ul>
<h3 id="退出Vim">退出Vim</h3><ul>
<li><p>保存退出 <code>shift zz</code> 或者 <code>Esc退出编辑模式,shift : wq</code></p>
</li>
<li><p>强制退出 <code>shift : q!</code></p>
</li>
</ul>
<h3 id="文本搜索">文本搜索</h3><ul>
<li><p><code>? pattern Enter</code></p>
</li>
<li><p><code>n</code> 朝同一方向搜索</p>
</li>
<li><p><code>N</code> 朝相反方向搜索</p>
</li>
</ul>
<h3 id="Vim配置">Vim配置</h3><ul>
<li><p><code>cp /usr/share/vim/vimrc ~/.vimrc</code></p>
</li>
<li><p><code>cd  ~/.vimrc</code></p>
</li>
</ul>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/A159B6EB-9B20-4EB2-A56A-A52FAD84BE32.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Vim的基本使用">Vim的基本使用</h2><h3 id="插入模式">插入模式</h3><ul>
<li><p><code>i</code> 进入插入模式,光标前</p>
</li>
<li><p><code>a</code> 进入插入模式,光标后</p>
</li>
<li><p><code>I</code> 行首</p>
</li>
<li><p><code>A</code> 行末</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++基础(七)]]></title>
    <link href="http://yoursite.com/2017/07/25/ndk_cpp_6/"/>
    <id>http://yoursite.com/2017/07/25/ndk_cpp_6/</id>
    <published>2017-07-25T15:55:16.000Z</published>
    <updated>2017-08-05T13:11:59.000Z</updated>
    <content type="html"><![CDATA[<h4 id="IO流">IO流</h4><ul>
<li>读写文本文件</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文本文件操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* fname = <span class="string">"/Users/weifeng/dest.txt"</span>;</span><br><span class="line">    <span class="comment">//输出流</span></span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(fname)</span></span>;</span><br><span class="line">    <span class="comment">//创建失败</span></span><br><span class="line">    <span class="keyword">if</span>(fout.bad())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fout &lt;&lt; <span class="string">"Jack"</span> &lt;&lt; endl;</span><br><span class="line">    fout &lt;&lt; <span class="string">"Rose"</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭输出流</span></span><br><span class="line">    fout.close();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//读取</span></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(fname)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(fin.bad())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>(fin.get(ch))&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ch;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fin.close();</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>二进制文件</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* src = <span class="string">"/Users/weifeng/src.jpg"</span>;</span><br><span class="line">    <span class="keyword">char</span>* dest = <span class="string">"/Users/weifeng/dest.jpg"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输入流</span></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(src, ios::binary)</span></span>;</span><br><span class="line">    <span class="comment">//输出流</span></span><br><span class="line">    <span class="function">ofsteam <span class="title">fout</span><span class="params">(dest, ios::binary)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(fin.bad() || fout.bad())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!fin.eof())&#123;</span><br><span class="line">        <span class="comment">//读取</span></span><br><span class="line">        <span class="keyword">char</span> buff[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">//栈内存执行完会释放</span></span><br><span class="line">        fin.read(buff, <span class="number">1024</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//写入</span></span><br><span class="line">        fout.write(buff, <span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭</span></span><br><span class="line">    fin.close();</span><br><span class="line">    fout.close();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>对象持久化</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    Person(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">("Jack", 22)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">("Rose", 18)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出流</span></span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">("/Users/weifeng/c_obj.data", ios::binary)</span></span>;</span><br><span class="line">    fout.write((<span class="keyword">char</span>*)(&amp;p1), <span class="keyword">sizeof</span>(Person)); <span class="comment">//指针能够读取到正确的数据,读取内存区的长度</span></span><br><span class="line">    fout.write((<span class="keyword">char</span>*)(&amp;p2), <span class="keyword">sizeof</span>(Person));</span><br><span class="line">    fout.close();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输入流</span></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">("/Users/weifeng/c_obj.data", ios::binary)</span></span>;</span><br><span class="line">    Person tmp;</span><br><span class="line">    fin.read((<span class="keyword">char</span>*)(&amp;tmp), <span class="keyword">sizeof</span>(Person));</span><br><span class="line">    tmp.print();</span><br><span class="line">    </span><br><span class="line">    fin.read((<span class="keyword">char</span>*)(&amp;tmp), <span class="keyword">sizeof</span>(Person));</span><br><span class="line">    tmp.print();</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="STL标准模板库">STL标准模板库</h4><p>STL: standard template library</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="string">"Jack"</span>; </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">("Rose")</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> s3 </span>= s1 + s2;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s4</span><span class="params">(10,"a")</span></span>; <span class="comment">//十个a</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">string</span> s5 = <span class="string">"  pray"</span>;</span><br><span class="line">    </span><br><span class="line">    s3.append(s5);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s3 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//string 转C字符串</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* c_str = s1.c_str();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c_str &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//s1.at(2);</span></span><br><span class="line">    <span class="comment">//string遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s1.length(); i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s1[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//迭代器指针</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">string</span>::iterator it = s1.begin(); it != s1.end(); it++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//at函数(charAt)</span></span><br><span class="line">    <span class="comment">//可能会抛出异常</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; s1.length(); i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; s1.at(i) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">catch</span>(...)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"异常"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//动态数组</span></span><br><span class="line">    <span class="comment">//C动态数组只能通过动态内存分配来完成,C++则不需要使用动态内存分配,就可以使用动态数组</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    v.push_back(<span class="number">12</span>);</span><br><span class="line">    v.push_back(<span class="number">10</span>);</span><br><span class="line">    v.push_back(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; v.size(); i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i] &lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="IO流">IO流</h4><ul>
<li>读写文本文件</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文本文件操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* fname = <span class="string">"/Users/weifeng/dest.txt"</span>;</span><br><span class="line">    <span class="comment">//输出流</span></span><br><span class="line">    <span class="function">ofstream <span class="title">fout</span><span class="params">(fname)</span></span>;</span><br><span class="line">    <span class="comment">//创建失败</span></span><br><span class="line">    <span class="keyword">if</span>(fout.bad())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fout &lt;&lt; <span class="string">"Jack"</span> &lt;&lt; endl;</span><br><span class="line">    fout &lt;&lt; <span class="string">"Rose"</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭输出流</span></span><br><span class="line">    fout.close();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//读取</span></span><br><span class="line">    <span class="function">ifstream <span class="title">fin</span><span class="params">(fname)</span></span>;</span><br><span class="line">    <span class="keyword">if</span>(fin.bad())&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span>(fin.get(ch))&#123;</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ch;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    fin.close();</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++基础(六)]]></title>
    <link href="http://yoursite.com/2017/07/25/ndk_cpp_5/"/>
    <id>http://yoursite.com/2017/07/25/ndk_cpp_5/</id>
    <published>2017-07-25T15:50:16.000Z</published>
    <updated>2017-08-05T13:11:43.000Z</updated>
    <content type="html"><![CDATA[<h4 id="模板类">模板类</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(T a)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    T a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通类继承模板类</span></span><br><span class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> A&lt;<span class="keyword">int</span>&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> a, <span class="keyword">int</span> b) : A&lt;<span class="keyword">int</span>&gt;(a)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ul>
<li>模板类继承模板类</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(T a)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    T a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> C : <span class="keyword">public</span> A&lt;T&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    C(T c, T a) : A&lt;T&gt;(a)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;c = c;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    T c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//实例化模板类对象</span></span><br><span class="line">    A&lt;<span class="keyword">int</span>&gt;(<span class="number">6</span>);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="类型转换">类型转换</h4><ul>
<li><p>static_cast 普遍情况</p>
</li>
<li><p>const_cast  去常量</p>
</li>
<li><p>dynamic_cast  子类类型转为父类类型</p>
</li>
<li><p>reinterpret_cast 函数指针转型,不具备移植性</p>
</li>
</ul>
<p>原始类型转换,所有情况都是一种写法,可读性不高,有可能有潜在的风险</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span>* func(<span class="keyword">int</span> type)&#123;</span><br><span class="line">    <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> &amp;i; </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:&#123;</span><br><span class="line">            <span class="keyword">char</span> a = <span class="string">'A'</span>;</span><br><span class="line">            <span class="keyword">return</span> &amp;a;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">default</span>:&#123;</span><br><span class="line">            <span class="keyword">return</span> NULL;</span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(<span class="keyword">char</span>* c_p)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *c_p &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//int i = 0;</span></span><br><span class="line">    <span class="comment">//double d = i; //自动类型转换</span></span><br><span class="line">    <span class="comment">//double d = 9.5;</span></span><br><span class="line">    <span class="comment">//int i = d;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//int i = 8;</span></span><br><span class="line">    <span class="comment">//double d = 9.5;</span></span><br><span class="line">    <span class="comment">//i = static_cast&lt;int&gt;(d);</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//int i = 9;</span></span><br><span class="line">    <span class="comment">//int *i_p = &amp;i;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//void* -&gt; char*</span></span><br><span class="line">    <span class="comment">//char* c_p = (char*)func(2);</span></span><br><span class="line">    <span class="keyword">char</span>* c_p = <span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>*&gt;(func(<span class="number">2</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//C++ 意图明显</span></span><br><span class="line">    func2(<span class="keyword">static_cast</span>&lt;<span class="keyword">char</span>*&gt;(func(<span class="number">2</span>)));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//C</span></span><br><span class="line">    func2((<span class="keyword">char</span>*)(func(<span class="number">2</span>)));</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>去常量转换</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> c[])</span></span>&#123;</span><br><span class="line">    <span class="comment">//c[1] = 'a';</span></span><br><span class="line">    <span class="comment">//通过指针间接赋值</span></span><br><span class="line">    <span class="comment">//其他人并不知道,这次转型是为了去常量</span></span><br><span class="line">    <span class="comment">//char* c_p = (char*)c;</span></span><br><span class="line">    <span class="comment">//c_p[1] = 'a';</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>* c_p = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(c);</span><br><span class="line">    c_p[<span class="number">1</span>] = <span class="string">'y'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c[] = <span class="string">"hello"</span>;</span><br><span class="line">    func(c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>子类类型转为父类类型</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"人"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Man : <span class="keyword">public</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"男人"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chasing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"泡妞"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Woman : <span class="keyword">public</span> Person&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"女人"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">carebaby</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"生孩子"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(Person* obj)</span></span>&#123;</span><br><span class="line">    obj-&gt;print();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//调用子类的特有函数,转为实际类型</span></span><br><span class="line">    <span class="comment">//并不知道转型失败</span></span><br><span class="line">    <span class="comment">// Man* m = (Man*)obj;</span></span><br><span class="line">    <span class="comment">// m-&gt;print(); //"女人"</span></span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">//如果转型失败,返回NULL</span></span><br><span class="line">    Man* m = <span class="keyword">dynamic_cast</span>&lt;Man*&gt;(obj);</span><br><span class="line">    <span class="keyword">if</span>(m != NULL)&#123;</span><br><span class="line">        m-&gt;chasing();</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    Woman* w = <span class="keyword">dynamic_cast</span>&lt;Woman*&gt;(obj);</span><br><span class="line">    <span class="keyword">if</span>(w != NULL)&#123;</span><br><span class="line">        w-&gt;carebaby();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    Woman w1;</span><br><span class="line">    Person *p1 = &amp;w1;</span><br><span class="line">    </span><br><span class="line">    func(p1);<span class="comment">//"女人"</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>函数指针转型</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"func1"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* func2()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"func2"</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"abc"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*f_p)</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//函数指针数组</span></span><br><span class="line">    f_p f_array[<span class="number">6</span>];</span><br><span class="line">    <span class="comment">//赋值</span></span><br><span class="line">    f_array[<span class="number">0</span>] = func1;</span><br><span class="line">    <span class="comment">//C方式</span></span><br><span class="line">    <span class="comment">//f_array[1] = (f_p)func2;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//C++方式</span></span><br><span class="line">    f_array[<span class="number">1</span>] = <span class="keyword">reinterpret_cast</span>&lt;f_p&gt;(func2);</span><br><span class="line">    </span><br><span class="line">    f_array[<span class="number">1</span>]();<span class="comment">// func2 不一定总是能执行,reinterpret_cast 转型不具备移植性</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="模板类">模板类</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</span><br><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(T a)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    T a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//普通类继承模板类</span></span><br><span class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> A&lt;<span class="keyword">int</span>&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    B(<span class="keyword">int</span> a, <span class="keyword">int</span> b) : A&lt;<span class="keyword">int</span>&gt;(a)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++基础(五)]]></title>
    <link href="http://yoursite.com/2017/07/25/ndk_cpp_4/"/>
    <id>http://yoursite.com/2017/07/25/ndk_cpp_4/</id>
    <published>2017-07-25T15:45:16.000Z</published>
    <updated>2017-08-05T13:11:33.000Z</updated>
    <content type="html"><![CDATA[<h4 id="多继承">多继承</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公民</span></span><br><span class="line"><span class="keyword">class</span> Citizen&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Student : <span class="keyword">public</span> Person, <span class="keyword">public</span> Citizen&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p><img src="http://7xk9ih.com1.z0.glb.clouddn.com/33287F78-183F-4673-917F-9B6BA29B7381.png" alt=""></p>
<h4 id="继承的二义性">继承的二义性</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//虚继承,不同路径继承来的同名成员只有一份拷贝,解决不明确的问题</span></span><br><span class="line"><span class="keyword">class</span> A1 : <span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> A2 : <span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> B : <span class="keyword">public</span> A1, <span class="keyword">public</span> A2&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    B b;</span><br><span class="line">    <span class="comment">//b.name = "Jack";//没有加virtual前 NO</span></span><br><span class="line">    <span class="comment">//指定父类显示调用</span></span><br><span class="line">    b.A1::name = <span class="string">"Jack"</span>;</span><br><span class="line">    b.A2::name = <span class="string">"Rose"</span>;</span><br><span class="line">    b.name = <span class="string">"Jack"</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="虚函数-多态(程序的扩展性)">虚函数-多态(程序的扩展性)</h4><ul>
<li><p>动态多态: 程序运行过程中,觉得哪一个函数被调用(重写)</p>
</li>
<li><p>静态多态: 重载</p>
</li>
</ul>
<p>发生动态多态的条件:</p>
<ul>
<li><p>继承</p>
</li>
<li><p>父类的引用或者指针指向子类的对象</p>
</li>
<li><p>函数的重写</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Plane.h</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通飞机</span></span><br><span class="line"><span class="keyword">class</span> Plane&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">land</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Plane.cpp</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Plane.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Plane::fly()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"起飞"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Plane::land()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"着陆"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Jet.h</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//直升飞机</span></span><br><span class="line"><span class="keyword">class</span> Jet : <span class="keyword">public</span> Plane&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">land</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Jet.cpp</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Jet.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Jet::fly()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"直升飞机在原地起飞..."</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Jet::land()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"直升飞机降落在屋顶"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Copter.h</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Plane.h"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Copter : <span class="keyword">public</span> Plane&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">land</span><span class="params">()</span></span>;    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Copter.cpp</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Copter.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Copter::fly()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"喷气式飞机在跑道上起飞"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Copter::land()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"喷气式飞机在跑道上着陆"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">01.</span>cpp</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Plane.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Jet.h"</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "Copter.h"</span></span><br><span class="line"><span class="comment">//业务函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bizPlay</span><span class="params">(Plane&amp; p)</span></span>&#123;</span><br><span class="line">    p.fly();</span><br><span class="line">    p.land();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Plane p1;</span><br><span class="line">    bizPlay(p1);</span><br><span class="line">    </span><br><span class="line">    Jet p2;</span><br><span class="line">    bizPlay(p2);</span><br><span class="line">    </span><br><span class="line">    Copter p3;</span><br><span class="line">    bizPlay(p3);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="纯虚函数(抽象类)">纯虚函数(抽象类)</h4><ul>
<li><p>当一个类具有一个纯虚函数,这个类就是抽象类</p>
</li>
<li><p>抽象类不能实例化对象</p>
</li>
<li><p>子类继承抽象类,必须要实现纯虚函数,如果没有,子类也是抽象类</p>
</li>
</ul>
<p>抽象类的作用:</p>
<ul>
<li>为了继承约束,根本不知道未来的实现</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Shape&#123;<span class="comment">//具有纯虚函数的类叫抽象类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//纯虚函数</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">sayArea</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"hi"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Circle : <span class="keyword">public</span> Shape&#123;<span class="comment">//如果没有实现父类的纯虚函数,则该类也是抽象类</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Circle(<span class="keyword">int</span> r)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayArea</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"圆的面积: "</span> &lt;&lt; <span class="number">3.14</span> * r * r &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Circle <span class="title">c</span><span class="params">(10)</span></span>;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="接口(只是逻辑上的划分,语法上跟抽象类的写法没有区别)">接口(只是逻辑上的划分,语法上跟抽象类的写法没有区别)</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以当做一个接口</span></span><br><span class="line"><span class="keyword">class</span> Drawable&#123;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="函数模板(泛型)">函数模板(泛型)</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myswap</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myswap</span><span class="params">(<span class="keyword">char</span>&amp; a, <span class="keyword">char</span>&amp; b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> tmp = <span class="number">0</span>;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myswap</span><span class="params">(T&amp; a, T&amp; b)</span></span>&#123;</span><br><span class="line">    T tmp = <span class="number">0</span>;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//根据实际类型,自动推导</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    myswap(a, b);<span class="comment">//或者写成 myswap&lt;int&gt;(a, b);</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">","</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> x = <span class="string">'x'</span>, y = <span class="string">'y'</span>;</span><br><span class="line">    myswap(x, y);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">","</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="异常处理">异常处理</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异常处理,根据抛出的异常数据类型,进入到相应的catch块中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">300</span>;</span><br><span class="line">        <span class="keyword">if</span>(age &gt; <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="comment">//throw age;</span></span><br><span class="line">            <span class="comment">//throw "发生异常";</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="number">9.8</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="keyword">int</span> a)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"int 异常"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="keyword">char</span>* b)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(...)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"未知异常"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>抛出函数外</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"除数为零"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        mydiv(<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="keyword">char</span>* a)&#123;</span><br><span class="line">        <span class="keyword">throw</span> a;<span class="comment">//throw 抛出函数外</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        mydiv(<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">        func();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(<span class="keyword">char</span>* a)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>抛出对象</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> MyException&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//throw MyException();</span></span><br><span class="line">        <span class="comment">//throw new MyException //不要抛出异常指针,需要手动 delete</span></span><br><span class="line">        <span class="keyword">throw</span> MyException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        mydiv(<span class="number">8</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(MyException* e1)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"MyException 指针"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">delete</span> e1;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(MyException&amp; e2)&#123; <span class="comment">//不会产生副本</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"MyException 引用"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//catch(MyException e)&#123;//会产生对象的副本,因为调用了拷贝构造函数</span></span><br><span class="line">        <span class="comment">//cout &lt;&lt; "MyException" &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>throw声明函数会抛出的异常类型</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="title">throw</span> <span class="params">(<span class="keyword">char</span>*, <span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"除数为零"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>标准异常(类似于Java中的NullPointException)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdexcpt&gt; <span class="comment">//需要引入标准异常</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> out_of_range(<span class="string">"超出范围"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> invalid_argument(<span class="string">"参数不合法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>自定义异常</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> NullPointException : <span class="keyword">public</span> exception&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    NullPointException(<span class="keyword">char</span>* msg) : exception(msg)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> out_of_range(<span class="string">"超出范围"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//else if(b == 0)&#123;</span></span><br><span class="line">        <span class="comment">//throw invalid_argument("参数不合法");</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(b == NULL)&#123;</span><br><span class="line">        <span class="keyword">throw</span> NullPointException(<span class="string">"为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        mydiv(<span class="number">8</span>,<span class="number">20</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(out_of_range e1)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e1.what() &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(NullPointException&amp; e2)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e2.what() &lt;&lt; endl;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(...)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"其它异常"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>外部类异常</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Err&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">class</span> MyException&#123;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        MyException()&#123;</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mydiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b &gt; <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> Err::MyException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="多继承">多继承</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//公民</span></span><br><span class="line"><span class="keyword">class</span> Citizen&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Student : <span class="keyword">public</span> Person, <span class="keyword">public</span> Citizen&#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++基础(四)]]></title>
    <link href="http://yoursite.com/2017/07/25/ndk_cpp_3/"/>
    <id>http://yoursite.com/2017/07/25/ndk_cpp_3/</id>
    <published>2017-07-25T15:40:16.000Z</published>
    <updated>2017-08-05T13:11:10.000Z</updated>
    <content type="html"><![CDATA[<h3 id="静态成员">静态成员</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="comment">//计数器</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> total; <span class="comment">//不能在这直接赋值</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Teacher(<span class="keyword">char</span>* name)&#123;<span class="comment">//也不能在构造函数中给total属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 有参构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>* getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计数,静态函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span><br><span class="line">        total++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态属性初始化赋值</span></span><br><span class="line"><span class="keyword">int</span> Teacher::total = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//Teacher::total = 10;//无法解析的外部符号</span></span><br><span class="line">    Teacher::total++；</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Teacher::total &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//直接通过类名访问</span></span><br><span class="line">    Teacher::count();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//可以通过对象名访问</span></span><br><span class="line">    <span class="function">Teacher <span class="title">t1</span><span class="params">("Jack")</span></span>;</span><br><span class="line">    t1.count();</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="类的大小">类的大小</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m;<span class="comment">//存放全局区不计算成类的大小</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprintf</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"打印"</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> i;<span class="comment">//4个字节</span></span><br><span class="line">    <span class="keyword">int</span> j;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="keyword">void</span>(*myprintf)() = myprintf; <span class="comment">//函数不计算成类的大小,它存放于程序代码区.指针大小是固定的4个字节</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(A) &lt;&lt; endl;<span class="comment">// 12</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(B) &lt;&lt; endl;<span class="comment">// 12</span></span><br><span class="line">    <span class="comment">//Java内存分区:JVM Stack、Native Method Stack(本地方法栈 JNI开发中的方法都存在本地方法栈中)、方法区、程序计数区、直接内存</span></span><br><span class="line">    <span class="comment">//C/C++内存分区:栈、堆、全局(静态成员、全局成员)、常量区(字符串)、程序代码区(存放程序的二进制代码)</span></span><br><span class="line">    <span class="comment">//普通属性与结构体有相同的内存布局</span></span><br><span class="line">    <span class="comment">//字符数组是存在堆上</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="this指针">this指针</h4><p>函数是共享的,必须要有能够标识当前对象是谁的办法,所以需要this指针<br>this指针的地址是当前对象的地址</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Teacher(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher析构构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,<span class="keyword">this</span>);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="keyword">this</span>-&gt;age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Teacher <span class="title">t1</span><span class="params">("Jack",20)</span></span>;</span><br><span class="line">    <span class="function">Teacher <span class="title">t2</span><span class="params">("Rose",20)</span></span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,&amp;t1);</span><br><span class="line">    t1.myprint();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%#x\n"</span>,&amp;t2);</span><br><span class="line">    t2.myprint();</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="友元函数">友元函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> i)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//友元函数</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">modify_i</span><span class="params">(A* p, <span class="keyword">int</span> a)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//友元函数的实现,在友元函数中可以访问私有的属性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify_i</span><span class="params">(A* p, <span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    p-&gt;i = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    A* a = <span class="keyword">new</span> A(<span class="number">10</span>);</span><br><span class="line">    a-&gt;myprint();</span><br><span class="line">    </span><br><span class="line">    modify_i(a,<span class="number">20</span>);</span><br><span class="line">    a-&gt;myprint();</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="友元类">友元类</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//友元类</span></span><br><span class="line"><span class="keyword">class</span> A&#123;</span><br><span class="line">    <span class="comment">//友元类</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">class</span> B;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> i)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;i = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> B&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//B这个友元类可以访问A类的任何成员</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accessAny</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a.i = <span class="number">30</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    A a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="运算符重载">运算符重载</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Point&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point(<span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">int</span> y = <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员函数,运算符重载</span></span><br><span class="line">    Point <span class="keyword">operator</span>+(Point &amp;p2)&#123;</span><br><span class="line">        <span class="function">Point <span class="title">tmp</span><span class="params">(<span class="keyword">this</span>-&gt;x+p2.x, <span class="keyword">this</span>-&gt;y+p2.y)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">","</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载+号</span></span><br><span class="line">Point <span class="keyword">operator</span>+(Point &amp;p1, Point &amp;p2)&#123;</span><br><span class="line">    <span class="function">Point <span class="title">tmp</span><span class="params">(p1.x+p2.x, p1.y+p2.y)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载-号</span></span><br><span class="line">Point <span class="keyword">operator</span>-(Point &amp;p1, Point &amp;p2)&#123;</span><br><span class="line">    <span class="function">Point <span class="title">tmp</span><span class="params">(p1.x-p2.x, p1.y-p2.y)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(10,20)</span></span>;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(20,10)</span></span>;</span><br><span class="line">    <span class="comment">//运算符的重载,本质还是函数的调用</span></span><br><span class="line">    <span class="comment">//p1.operator+(p2);</span></span><br><span class="line">    Point p3 = p1 + p2; <span class="comment">//重载+号运算符</span></span><br><span class="line">    </span><br><span class="line">    p3.myprint(); <span class="comment">//30,30</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="当属性私有时,通过友元函数完成运算符重载">当属性私有时,通过友元函数完成运算符重载</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Point&#123;</span><br><span class="line"><span class="keyword">friend</span> Point <span class="keyword">operator</span>+(Point &amp;p1, Point &amp;p2);</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Point(<span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">int</span> y = <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;x = x;</span><br><span class="line">        <span class="keyword">this</span>-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//成员函数,运算符重载</span></span><br><span class="line">    Point <span class="keyword">operator</span>+(Point &amp;p2)&#123;</span><br><span class="line">        <span class="function">Point <span class="title">tmp</span><span class="params">(<span class="keyword">this</span>-&gt;x+p2.x, <span class="keyword">this</span>-&gt;y+p2.y)</span></span>;</span><br><span class="line">        <span class="keyword">return</span> tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">","</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载+号</span></span><br><span class="line">Point <span class="keyword">operator</span>+(Point &amp;p1, Point &amp;p2)&#123;</span><br><span class="line">    <span class="function">Point <span class="title">tmp</span><span class="params">(p1.x+p2.x, p1.y+p2.y)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(10,20)</span></span>;</span><br><span class="line">    <span class="function">Point <span class="title">p1</span><span class="params">(20,10)</span></span>;</span><br><span class="line">    <span class="comment">//运算符的重载,本质还是函数的调用</span></span><br><span class="line">    <span class="comment">//p1.operator+(p2);</span></span><br><span class="line">    Point p3 = p1 + p2; <span class="comment">//重载+号运算符</span></span><br><span class="line">    </span><br><span class="line">    p3.myprint(); <span class="comment">//30,30</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="继承">继承</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"说话"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Man : <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chasing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"泡妞"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//this-&gt;name;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* brother;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(Human&amp; h)</span></span>&#123;</span><br><span class="line">    h.say();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Man m1;</span><br><span class="line">    m1.say();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//父类类型的引用或者指针</span></span><br><span class="line">    Human* h_p = &amp;m1;</span><br><span class="line">    h_p-&gt;say();</span><br><span class="line">    </span><br><span class="line">    Human &amp;h1 = m1;</span><br><span class="line">    h1.say();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//子类对象初始化父类类型的对象</span></span><br><span class="line">    Human h2 = m1;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="向父类构造方法传参">向父类构造方法传参</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Human(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"说话"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Man : <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//给父类构造函数传参,同时给属性对象赋值</span></span><br><span class="line">    Man(<span class="keyword">char</span> *brother, <span class="keyword">char</span>* s_name, <span class="keyword">char</span>* s_age, <span class="keyword">char</span>* h_name, <span class="keyword">char</span>* h_age) : Human(s_name, s_age) : h(h_name, h_age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;brother = brother;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chasing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"泡妞"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//this-&gt;name;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* brother;</span><br><span class="line">    Human h;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Man m1;//NO 因为父类没有默认的构造函数</span></span><br><span class="line">    </span><br><span class="line">    <span class="function">Man <span class="title">m1</span><span class="params">("Rose","Jack",18,"Test",20)</span></span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="构造函数与析构函数调用的顺序">构造函数与析构函数调用的顺序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Human(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human 构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Human()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"说话"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Man : <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//给父类构造函数传参,同时给属性对象赋值</span></span><br><span class="line">    Man(<span class="keyword">char</span> *brother, <span class="keyword">char</span>* s_name, <span class="keyword">char</span>* s_age, <span class="keyword">char</span>* h_name, <span class="keyword">char</span>* h_age) : Human(s_name, s_age) : h(h_name, h_age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;brother = brother;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Man 构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Man()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Man 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chasing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"泡妞"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//this-&gt;name;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* brother;</span><br><span class="line">    Human h;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//Human 构造函数  Man构造函数  Man 析构函数  Human析构函数</span></span><br><span class="line">    <span class="comment">//父类的构造函数先调用,子类的析构函数先调用</span></span><br><span class="line">   <span class="function">Man <span class="title">m1</span><span class="params">("Rose","Jack",18,"Test",20)</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    func();</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="子类对象调用父类的成员">子类对象调用父类的成员</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Human(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human 构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Human()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Human 说话"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Man : <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//给父类构造函数传参,同时给属性对象赋值</span></span><br><span class="line">    Man(<span class="keyword">char</span> *brother, <span class="keyword">char</span>* s_name, <span class="keyword">char</span>* s_age, <span class="keyword">char</span>* h_name, <span class="keyword">char</span>* h_age) : Human(s_name, s_age) : h(h_name, h_age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;brother = brother;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Man 构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Man()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Man 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Man 说话"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">chasing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"泡妞"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//this-&gt;name;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* brother;</span><br><span class="line">    Human h;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//是覆盖,并非多态</span></span><br><span class="line">    <span class="function">Man <span class="title">m1</span><span class="params">("Rose","Jack",18,"Test",20)</span></span>; </span><br><span class="line">    m1.say();<span class="comment">//调用的是Man中的say函数</span></span><br><span class="line">    <span class="comment">//对象名.父类名::函数名();</span></span><br><span class="line">    m1.Human::say();<span class="comment">//调用的是Human中的say函数</span></span><br><span class="line">    m1.Human::age = <span class="number">10</span>;<span class="comment">//给父类中的属性赋值</span></span><br><span class="line">    </span><br><span class="line">    Human h1 = m1;</span><br><span class="line">    h1.say();<span class="comment">//调用的是Human中的say函数</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="静态成员">静态成员</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="comment">//计数器</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> total; <span class="comment">//不能在这直接赋值</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Teacher(<span class="keyword">char</span>* name)&#123;<span class="comment">//也不能在构造函数中给total属性赋值</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 有参构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>* getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计数,静态函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span><br><span class="line">        total++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态属性初始化赋值</span></span><br><span class="line"><span class="keyword">int</span> Teacher::total = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//Teacher::total = 10;//无法解析的外部符号</span></span><br><span class="line">    Teacher::total++；</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; Teacher::total &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//直接通过类名访问</span></span><br><span class="line">    Teacher::count();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//可以通过对象名访问</span></span><br><span class="line">    <span class="function">Teacher <span class="title">t1</span><span class="params">("Jack")</span></span>;</span><br><span class="line">    t1.count();</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++基础(三)]]></title>
    <link href="http://yoursite.com/2017/07/25/ndk_cpp_2/"/>
    <id>http://yoursite.com/2017/07/25/ndk_cpp_2/</id>
    <published>2017-07-25T15:35:16.000Z</published>
    <updated>2017-08-05T13:10:52.000Z</updated>
    <content type="html"><![CDATA[<h4 id="类">类</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyTeacher.h</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#progma once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MyTeacher&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">gwtAge</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* name)</span></span>;</span><br><span class="line">        <span class="keyword">char</span>* getName();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyTeacher.cpp</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "MyTeacher.h"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MyTeacher::setAge(<span class="keyword">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MyTeacher::getAge()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MyTeacher::setName(<span class="keyword">char</span>* name)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* MyTeacher::getName()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">01.</span>cpp</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "MyTeacher.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyTeacher t1;</span><br><span class="line">    t1.name = <span class="string">"Jack"</span>;</span><br><span class="line">    t1.age = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t1.getName() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="构造函数、析构函数、拷贝构造函数">构造函数、析构函数、拷贝构造函数</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//无参构造函数(写了就会覆盖默认的无参构造函数)</span></span><br><span class="line">    Teacher()&#123;</span><br><span class="line">        <span class="comment">//无参构造函数赋默认值</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">100</span>);</span><br><span class="line">        <span class="built_in">strcpy</span>(name, <span class="string">"jack walson"</span>);</span><br><span class="line">        age = <span class="number">20</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"无参构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参构造函数会覆盖默认的构造函数</span></span><br><span class="line">    Teacher(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//析构函数,没有参数</span></span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"析构构造函数"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//释放内存</span></span><br><span class="line">        <span class="built_in">free</span>(<span class="keyword">this</span>-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//浅拷贝 拷贝的是指针的地址,拷贝的是值</span></span><br><span class="line">    <span class="comment">//拷贝构造函数(值拷贝)</span></span><br><span class="line">    <span class="comment">//默认拷贝构造函数,就是值拷贝</span></span><br><span class="line">    Teacher(<span class="keyword">const</span> Teacher &amp;obj)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = obj.name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = obj.age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"拷贝构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//深拷贝 拷贝的是指针指向的数据内容</span></span><br><span class="line">    Teacher(<span class="keyword">const</span> Teacher &amp;obj)&#123;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(obj.name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len+<span class="number">1</span>); <span class="comment">// 长度加1 因为有结束符 0</span></span><br><span class="line">        <span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, obj.name);</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = obj.age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">","</span> &lt;&lt; age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Teacher t1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//浅拷贝的问题</span></span><br><span class="line"><span class="comment">//函数执行完毕会调用t1和t2的析构函数,2次释放相同name会出错</span></span><br><span class="line"><span class="comment">//调用这个函数会出错</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Teacher <span class="title">t1</span><span class="params">("test",20)</span></span>;</span><br><span class="line">    </span><br><span class="line">    Teacher t2 = t1;<span class="comment">//调用默认拷贝构造函数</span></span><br><span class="line">    t2.myprint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">(Teacher t)</span></span>&#123;</span><br><span class="line">    t.myprint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func3</span><span class="params">(Teacher t)</span></span>&#123;</span><br><span class="line">    t.myprint();</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//Teacher t1; //会调用无参构造函数</span></span><br><span class="line">    <span class="function">Teacher <span class="title">t2</span><span class="params">("test",20)</span></span>; <span class="comment">//会调用有参构造函数</span></span><br><span class="line">    Teacher t3 = Teacher(<span class="string">"jack"</span>,<span class="number">21</span>);</span><br><span class="line">    func();<span class="comment">//会调用析构函数,当对象要被系统释放时,析构函数会被调用,作用: 主要做善后处理</span></span><br><span class="line">    </span><br><span class="line">    Teacher t4 = t2;</span><br><span class="line">    t4.myprint();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//拷贝构造函数被调用的场景</span></span><br><span class="line">    <span class="comment">//1.声明的时候赋值拷贝构造函数会调用(例如: Teacher t4 = t2;) </span></span><br><span class="line">    <span class="comment">//2.作为参数传人也会被调用,实参给形参赋值(例如: func2(t2))</span></span><br><span class="line">    <span class="comment">//3.作为函数返回值返回,给变量初始化赋值(例如: Teacher t5 = func3(t2);)</span></span><br><span class="line">    func2(t2);</span><br><span class="line">    Teacher t5 = func3(t2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这里不会调用拷贝构造函数,因为只有声明的时候才会被调用</span></span><br><span class="line">    Teacher t6;</span><br><span class="line">    Teacher t7;</span><br><span class="line">    t6 = t7;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="构造函数属性初始化列表">构造函数属性初始化列表</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Teacher(<span class="keyword">char</span>* name)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 有参构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>* getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Student&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="comment">//属性对象</span></span><br><span class="line">    Teacher t1;</span><br><span class="line">    Teacher t2;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(<span class="keyword">int</span> id,<span class="keyword">char</span>* t1_n,<span class="keyword">char</span>* t2_n) : t1(t1_n) , t2(<span class="string">"Jack"</span>)&#123;<span class="comment">//给属性对象赋值,也可以直接给值</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;id = id;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Student 有参构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ~Student()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Student 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; id &lt;&lt; <span class="string">","</span> &lt;&lt; t1.getName() &lt;&lt; t2.getName() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Student <span class="title">s1</span><span class="params">(20,"Jack","Rose")</span></span>;</span><br><span class="line">    s1.myprint();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//Student中的属性 Teacher 先创建,然后再创建Student. Student先析构,然后属性对象Teacher析构</span></span><br><span class="line">    func(); </span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="C++通过new(delete)进行动态内存分配,C中的malloc(free)也是支持的">C++通过new(delete)进行动态内存分配,C中的malloc(free)也是支持的</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Teacher(<span class="keyword">char</span>* name)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 有参构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher 析构函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>* getName()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//C++的写法</span></span><br><span class="line">    <span class="comment">//会调用构造函数和析构函数</span></span><br><span class="line">    Teacher *t1 = <span class="keyword">new</span> Teacher(<span class="string">"Jack"</span>);<span class="comment">//动态内存分配,在堆内存上开辟空间,需要手动释放堆内存</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t1-&gt;getName() &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//释放</span></span><br><span class="line">    <span class="keyword">delete</span> t1;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//C的写法</span></span><br><span class="line">    Teacher *t2 = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher));<span class="comment">//与C++最大的区别是不会调用构造函数和析构函数</span></span><br><span class="line">    t2-&gt;setName(<span class="string">"Jack"</span>);</span><br><span class="line">    <span class="built_in">free</span>(t2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    func();</span><br><span class="line">    <span class="comment">//C</span></span><br><span class="line">    <span class="comment">//数组类型</span></span><br><span class="line">    <span class="keyword">int</span> *p1 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">10</span>);</span><br><span class="line">    p1[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line">    <span class="built_in">free</span>(p1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//C++</span></span><br><span class="line">    <span class="keyword">int</span> *p2 = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    p2[<span class="number">0</span>] = <span class="number">9</span>;</span><br><span class="line">    <span class="comment">//释放数组需要加上[]</span></span><br><span class="line">    <span class="keyword">delete</span>[] p2;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="类">类</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyTeacher.h</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#progma once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> MyTeacher&#123;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">gwtAge</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* name)</span></span>;</span><br><span class="line">        <span class="keyword">char</span>* getName();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyTeacher.cpp</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "MyTeacher.h"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MyTeacher::setAge(<span class="keyword">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> MyTeacher::getAge()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MyTeacher::setName(<span class="keyword">char</span>* name)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* MyTeacher::getName()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">01.</span>cpp</span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "MyTeacher.h"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyTeacher t1;</span><br><span class="line">    t1.name = <span class="string">"Jack"</span>;</span><br><span class="line">    t1.age = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t1.getName() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++基础(二)]]></title>
    <link href="http://yoursite.com/2017/07/25/ndk_cpp_1/"/>
    <id>http://yoursite.com/2017/07/25/ndk_cpp_1/</id>
    <published>2017-07-25T15:30:16.000Z</published>
    <updated>2017-08-05T13:10:37.000Z</updated>
    <content type="html"><![CDATA[<h4 id="引用">引用</h4><ul>
<li>指针(保存的是地址)与引用(变量的别名)</li>
</ul>
<a id="more"></a>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指针值交换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_1</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c = *a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"(*a):%d\n"</span>,*a);</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用值交换</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap_2</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    c = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//变量名-门牌号(内存空间0x00001的别名,可不可用有多个名字?)</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="comment">//b就是这个内存空间另外一个别名</span></span><br><span class="line">    <span class="comment">//&amp; 在C++中表示引用 </span></span><br><span class="line">    <span class="keyword">int</span> &amp;b = a;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> *p = &amp;a; <span class="comment">//输出10</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b &lt;&lt; endl;<span class="comment">//输出10</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>,x,y);</span><br><span class="line">    </span><br><span class="line">    swap_1(&amp;x, &amp;y);</span><br><span class="line">    </span><br><span class="line">    swap_2(x, y);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d\n"</span>,x,y);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>结构体的引用作为参数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用</span></span><br><span class="line"><span class="comment">//不用加*去取值</span></span><br><span class="line"><span class="comment">//引用是变量的别名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">(Teacher &amp;t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.name &lt;&lt; <span class="string">","</span> &lt;&lt; t.age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint2</span><span class="params">(Teacher *t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t-&gt;name &lt;&lt; <span class="string">","</span> &lt;&lt; t-&gt;age &lt;&lt; endl;</span><br><span class="line">    <span class="comment">//(*t).name  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用的主要功能: 作为函数的参数或返回值(不能返回局部变量)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Teacher t;</span><br><span class="line">    t.name = <span class="string">"jason"</span>;</span><br><span class="line">    t.age = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line">    myprint(t);</span><br><span class="line">    </span><br><span class="line">    myprint2(&amp;t);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>指针的引用</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二级指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getTeacher</span><span class="params">(Teacher **p)</span></span>&#123;</span><br><span class="line">    Teacher *tmp = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher));</span><br><span class="line">    tmp-&gt;age = <span class="number">20</span>;</span><br><span class="line">    *p = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针的引用,代替二级指针</span></span><br><span class="line"><span class="comment">//&amp;p = (*p) </span></span><br><span class="line"><span class="comment">//Teacher* &amp;p = (Teacher* *p); 相当于给*p取了一个别名</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getTeacher</span><span class="params">(Teacher* &amp;p)</span></span>&#123;</span><br><span class="line">    p = (Teacher*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Teacher));</span><br><span class="line">    p-&gt;age = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Teacher *t = NULL;</span><br><span class="line">    </span><br><span class="line">    getTeacher(&amp;t);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>指针常量</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//指针常量,指针的常量,不改变地址的指针,但是可以修改它指向的内容</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">2</span>, b = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> *<span class="keyword">const</span> p1 = &amp;a;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//p1 = &amp;b; //NO </span></span><br><span class="line">    *p1 = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//常量指针,指向常量的指针,内容不能修改 类似Java中final修饰的变量其值不能被再次修改</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> *p2 = &amp;a;</span><br><span class="line">    p2 = &amp;b;</span><br><span class="line">    <span class="comment">//*p2 = 9; //NO</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//const int c;  //NO 必须要赋值</span></span><br><span class="line">    <span class="comment">//int &amp;d; //NO 必须赋值</span></span><br><span class="line">    <span class="comment">//int &amp;e = NULL //NO 引用必须要有值,不能为空</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>指针与引用的区别</li>
</ul>
<p>单纯给变量取别名没有任何意义,作为函数参数传递,能保证参数传递过程中不产生副本</p>
<p>引用可以直接操作变量,而指针要通过取值<code>(*p)</code>,间接操作变量,指针的程序可读性差</p>
<ul>
<li>常引用(类似于Java中的final)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprintf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//常引用</span></span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> &amp;c = a;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//c = b;  //NO</span></span><br><span class="line">    myprintf(c);</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>常函数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> Teacher&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span>* name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Teacher(<span class="keyword">char</span>* name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    ~Teacher()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher析构构造函数"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//const Teacher* const this 既是指针常量又是常量指针,const this是常量指针,const Teacher* 指针常量,既不能改变指针的值,又不能改变指针指向的内容</span></span><br><span class="line">    <span class="comment">//常函数,保证了数据的安全,当前对象不能被修改,防止数据成员被非法访问</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">()</span> <span class="keyword">const</span></span>&#123;</span><br><span class="line">        <span class="comment">//this-&gt;name = "Jack"; //NO 属性值不能修改</span></span><br><span class="line">        <span class="comment">//改变this指针的值</span></span><br><span class="line">        <span class="comment">//this = (Teacher*)0x00009; //NO</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="keyword">this</span>-&gt;age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myprint2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//this = (Teacher*)0x00009; //NO this指针是常量指针</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;name &lt;&lt; <span class="string">","</span> &lt;&lt; <span class="keyword">this</span>-&gt;age &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Teacher <span class="title">t1</span><span class="params">("Jack", 20)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">const</span> Teacher <span class="title">t2</span><span class="params">("Rose", 20)</span></span>;<span class="comment">//常量对象</span></span><br><span class="line">    <span class="comment">//t2.myprint2(); //NO 常量对象只能调用常量函数,非常量对象可以调用常量函数</span></span><br><span class="line">    t1.myprint();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>引用的大小</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Teacher t;</span><br><span class="line">    </span><br><span class="line">    Teacher &amp;t1 = t;</span><br><span class="line">    </span><br><span class="line">    Teacher *p = &amp;t;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(t1) &lt;&lt;endl; <span class="comment">//24</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(p) &lt;&lt;endl; <span class="comment">//4 结构体指针 大小都是4个字节</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>引用必须要有值,不能为空</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">(Teacher *t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t-&gt;name &lt;&lt; <span class="string">","</span> &lt;&lt; t-&gt;age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint2</span><span class="params">(Teacher &amp;t)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.name &lt;&lt; <span class="string">","</span> &lt;&lt; t.age &lt;&lt; endl;</span><br><span class="line">    t.age = <span class="number">21</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Teacher t;</span><br><span class="line">    </span><br><span class="line">    Teacher *p = NULL;</span><br><span class="line">    </span><br><span class="line">    myprint(p);<span class="comment">//报错,为了防止不报错,要进行非空判断</span></span><br><span class="line">    </span><br><span class="line">    Teacher &amp;t2 = NULL;<span class="comment">//引用不能为空,没法传进去,编译出错</span></span><br><span class="line">    myprint2(t2);<span class="comment">//NO</span></span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>函数默认值参数 和 重载</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//中间参数有值的话后面的参数必须有值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myprint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y = 9, <span class="keyword">int</span> z = 10)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载,不能有二意性</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mtprint</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">bool</span> ret)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>可变参数</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stdarg.h&gt;</span><br><span class="line"></span><br><span class="line">void func(int i,...)&#123;//从i开始后面是可变参数</span><br><span class="line">    va_list args_p;  //va_list 的实际类型是 char*</span><br><span class="line">    //开始读取可变参数,i是最后一个固定参数</span><br><span class="line">    va_start(args_p,i);</span><br><span class="line">    </span><br><span class="line">    int a = va_arg(args_p,int); //第二个参数为参数类型</span><br><span class="line">    int b = va_arg(args_p,char);</span><br><span class="line">    int c = va_arg(args_p,int);</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; c &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    //结束</span><br><span class="line">    va_end(args_p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()&#123;</span><br><span class="line">    func(9,10,'b',30);</span><br><span class="line">    </span><br><span class="line">    system("pause);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>循环读取可变参数</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i,...)</span></span>&#123;</span><br><span class="line">    va_list args_p;</span><br><span class="line">    va_start(args_p,i);</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        value = va_arg(args_p,<span class="keyword">int</span>);</span><br><span class="line">        <span class="keyword">if</span>(value &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; value &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(args_p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="引用">引用</h4><ul>
<li>指针(保存的是地址)与引用(变量的别名)</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[C++基础(一)]]></title>
    <link href="http://yoursite.com/2017/07/25/ndk_cpp_0/"/>
    <id>http://yoursite.com/2017/07/25/ndk_cpp_0/</id>
    <published>2017-07-25T15:28:16.000Z</published>
    <updated>2017-08-05T13:06:10.000Z</updated>
    <content type="html"><![CDATA[<h3 id="C与C++的关系">C与C++的关系</h3><ul>
<li><p>C++可以与C代码进行混编</p>
</li>
<li><p>C++面向对象的编程语言、C是面向过程的编程</p>
</li>
<li><p>C++是对C的一个增强</p>
</li>
</ul>
<a id="more"></a>
<h4 id="命名空间">命名空间</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt; <span class="comment">//C++中的标准输入输出</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//std 标准命名空间(包含很多标准的定义)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="comment">//命名空间类似于Java中的包(归类)</span></span><br><span class="line"><span class="comment">//下面就可以简写成cout &lt;&lt; "this is C plus plus" &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> NSP_A&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">struct</span> Student&#123;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> age; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> age; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> NSP_B&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">//命名空间嵌套</span></span><br><span class="line">    <span class="keyword">namespace</span> NSP_C&#123;</span><br><span class="line">        <span class="keyword">int</span> c = <span class="number">90</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> Student&#123;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> age; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">struct</span> Teacher&#123;</span><br><span class="line">        <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> age; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;&lt; 运算符重载,本身没有什么特殊的意义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"this is C plus plus"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"this is C plus plus"</span> &lt;&lt; <span class="built_in">std</span>::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用命名空间</span></span><br><span class="line">    <span class="comment">//::访问修饰符</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; NSP_A::a &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; NSP_B::a &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; NSP_B::NSP_C::c &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用命名空间中的结构体</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> NSP_A;</span><br><span class="line">    Teacher t;</span><br><span class="line">    <span class="comment">//struct NSP_A::Teacher t;</span></span><br><span class="line">    t.age = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//struct NSP_A::Student s;</span></span><br><span class="line">    Student s;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//或者</span></span><br><span class="line">    <span class="keyword">using</span> NSP_A::Student;</span><br><span class="line">    <span class="keyword">struct</span> Student s1;<span class="comment">//struct 写与不写都一样</span></span><br><span class="line">    s1.age = <span class="number">90</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">using</span> NSP_B::Student;</span><br><span class="line">    <span class="keyword">struct</span> Student s2;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="类、属性、方法">类、属性、方法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">define</span> PI 3.14</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//圆</span></span><br><span class="line"><span class="keyword">class</span> MyCircle&#123;</span><br><span class="line"><span class="comment">//属性(多个属性共用权限访问修饰符)</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    <span class="keyword">double</span> s;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">double</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取面积</span></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getS</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PI * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    MyCircle c1;</span><br><span class="line">    c1.setR(<span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"圆的面积:"</span> &lt;&lt; c1.getS() &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="结构体">结构体</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> MyTeacher&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;age &lt;&lt; <span class="string">"岁"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyTeacher t1; <span class="comment">//struct 可写可不写</span></span><br><span class="line">    t1.age = <span class="number">10</span>;</span><br><span class="line">    t1.say();</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="布尔类型">布尔类型</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> isSingle = <span class="keyword">true</span>;<span class="comment">//bool isSingle = 17  </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; isSingle &lt;&lt; endl; <span class="comment">// 打印出来是 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(isSingle)&#123;<span class="comment">//isSingle = true 或者大于0的值都是true</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"单身"</span> &lt;&lt; endl;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>) &lt;&lt; endl; <span class="comment">//输出1个字节</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"有对象"</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line">    ((a &gt; b) ? a :b) = <span class="number">30</span>; <span class="comment">//三目运算成为左值 只适用于C++</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b &lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="C与C++的关系">C与C++的关系</h3><ul>
<li><p>C++可以与C代码进行混编</p>
</li>
<li><p>C++面向对象的编程语言、C是面向过程的编程</p>
</li>
<li><p>C++是对C的一个增强</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用fmod实现QQ变声功能]]></title>
    <link href="http://yoursite.com/2017/07/24/ndk_fmod/"/>
    <id>http://yoursite.com/2017/07/24/ndk_fmod/</id>
    <published>2017-07-24T14:35:06.000Z</published>
    <updated>2017-08-04T15:07:33.000Z</updated>
    <content type="html"><![CDATA[<h3 id="fmod初步使用">fmod初步使用</h3><ul>
<li><p>新建Android工程qq_voicer_change</p>
</li>
<li><p>进入项目根目录新建libs目录,并将fmod example工程中fmod.jar拷贝进去</p>
</li>
<li><p>进入项目根目录新建jni目录,并将fmod example工程中inc整个目录拷贝进去</p>
</li>
<li><p>拷贝fmod example工程中play_sound.cpp、common.h、common.cpp、common_platform.cpp、common_platform.h文件到jni目录</p>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>拷贝fmod example工程中 MainActivity.java</p>
</li>
<li><p>添加权限 RECORD_AUDIO、WRITE_EXTERNAL_STORAGE</p>
</li>
<li><p>修改System.loadLibrary(“fmodL”)、System.loadLibrary(“fmod”)、System.loadLibrary(“qq_voicer”)</p>
</li>
<li><p>右键项目属性选择”Add Android Native Support” 将项目转为C/C++工程</p>
</li>
<li><p>修改jni目录下的Android.mk文件 LOCAL_MODULE := qq_voicer   LOCAL_SRC_FILES := play_sound.cpp  common_platform.cpp</p>
</li>
<li><p>删掉jni目录下自动生成的qq_voicer_change.cpp文件</p>
</li>
<li><p>build project</p>
</li>
<li><p>修改play_sound.cpp中 <code>#include &quot;fmod.hpp&quot;</code> 为 <code>#include &quot;inc/fmod.hpp&quot;</code>  C++中如果一个文件中既有函数的声明又有函数的实现取名为hpp(.h 与 .cpp的结合)</p>
</li>
<li><p>修改common.h中 <code>#include &quot;fmod.h&quot;</code> 为 <code>#include &quot;inc/fmod.h&quot;</code> </p>
</li>
<li><p>修改common.cpp中 <code>#include &quot;fmod_errors.h&quot;</code> 为 <code>#include &quot;inc/fmod_errors.h&quot;</code> </p>
</li>
<li><p>将libfmod.so和libfmodL.so拷贝到jni目录下 做为预编译的库(编译common_pltform.cpp和play_sound.cpp需要用到其它的函数 这些函数在.so库中,所以这些.so库就成了预编译的库)</p>
</li>
<li><p>修改Android.mk文件</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE := fmod</span><br><span class="line">LOCAL_SRC_FILES := libfmod.so</span><br><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE := fmodL</span><br><span class="line">LOCAL_SRC_FILES := libfmodL.so</span><br><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"></span><br><span class="line">LOCAL_MODULE    := qq_voicer</span><br><span class="line">LOCAL_SRC_FILES := play_sound.cpp common.cpp common_platform.cpp</span><br><span class="line">LOCAL_SHARED_LIBRARIES := fmod fmodL</span><br><span class="line">LOCAL_LDLIBS := -llog <span class="comment">//添加android log功能</span></span><br><span class="line">LOCAL_CPP_FEATURES := exceptions <span class="comment">//C++支持异常处理 </span></span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>
<ul>
<li>修改jni目录下的Application.mk文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">##支持C++异常处理，标准莫板块</span><br><span class="line">APP_STL := gnustl_static</span><br></pre></td></tr></table></figure>
<p>测试<code>effects.cpp</code>功能</p>
<ul>
<li><p>拷贝effects.cpp文件到jni目录,将Android.mk文件中的<code>LOCAL_SRC_FILES := play_sound.cpp</code>改为 <code>LOCAL_SRC_FILES := effects.cpp</code></p>
</li>
<li><p>修改<code>effects.cpp</code>中的<code>#include &quot;fmod.hpp&quot;</code>为<code>#include &quot;inc/fmod.hpp&quot;</code></p>
</li>
</ul>
<p>自定义音效</p>
<ul>
<li>新建QQActivity.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle saveInstanceState)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(saveInstanceState);</span><br><span class="line">        FMOD.init();</span><br><span class="line">        </span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fix</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        String path = Environment.getExternalStorageDirectory().getAbsolutePath() + File.separator + <span class="string">"test.wav"</span>;</span><br><span class="line">        EffectUtils.fix(path, EffectUtils.MODE_NORMAL);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        FMOD.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>新建EffectUtils.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EffectUtils</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//音效的类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_NORMAL = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_LUOLI = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_DASHU = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_JINGSONG = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_GAOGUAI = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MODE_KONGLING = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//音效处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fix</span><span class="params">(String path, <span class="keyword">int</span> type)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">"fmodL"</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">"fmod"</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">"qq_voicer"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>生成EffectUtils对应的头文件并拷贝到jni目录下</p>
</li>
<li><p>jni目录下新建effect_fix.cpp, 将Android.mk文件中的<code>LOCAL_SRC_FILES := effects.cpp</code>改为 <code>LOCAL_SRC_FILES := effect_fix.cpp</code></p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "inc/fmod.hpp"</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;unistd.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "org_fmod_example_EffectUtils.h"</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;android/log.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOGI(FORMAT,...) __android_log_print(ANDROID_LOG_INFO,"vobile",FORMAT,##__VA_ARGS__);</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> LOGE(FORMAT,...) __android_log_print(ANDROID_LOG_ERROR,"vobile",FORMAT,##__VA_ARGS__);</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MODE_NORMAL 0</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MODE_LUOLI 1</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MODE_DASHU 2</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MODE_JINGSONG 3</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MODE_GAOGUAI 4</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> int MODE_KONGLING 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> FMOD;</span><br><span class="line"></span><br><span class="line"><span class="function">JNIEXPORT <span class="keyword">void</span> JNICALL <span class="title">Java_org_fmod_example_EffectUtils_fix</span><span class="params">(JNIEnv *env,jclass jcls,jstring path_jstr,jint type)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    System *system;</span><br><span class="line">    Sound *sound;</span><br><span class="line">    Channel *channel;</span><br><span class="line">    DSP *dsp;<span class="comment">//DSP digital signal process</span></span><br><span class="line">    <span class="keyword">bool</span> playing;</span><br><span class="line">    <span class="keyword">float</span> frequency = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//创建System对象并初始化</span></span><br><span class="line">        System_Create(&amp;system);</span><br><span class="line">        system-&gt;init(<span class="number">32</span>, FMOD_INIT_NORMAL, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* path_cstr = env-&gt;GetStringUTFChars(path_jstr,NULL);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">//创建声音</span></span><br><span class="line">        system-&gt;createSound(path_cstr, FMOD_DEFAULT, NULL, &amp;sound);</span><br><span class="line">        <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">            <span class="keyword">case</span> MODE_NORMAL:</span><br><span class="line">                <span class="comment">//原生播放</span></span><br><span class="line">                system-&gt;playSound(sound, <span class="number">0</span>, <span class="keyword">false</span>, &amp;channel)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MODE_LUOLI:<span class="comment">//萝莉 提高音频</span></span><br><span class="line">                <span class="comment">//DSP digital signal process</span></span><br><span class="line">                <span class="comment">//dsp -&gt; 音效 创建fmod中预定义好的音效</span></span><br><span class="line">                <span class="comment">//FMOD_DSP_TYPE_PITCHSHIFT 提升或者降低音调的一种音效</span></span><br><span class="line">                system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT,&amp;dsp);</span><br><span class="line">                <span class="comment">//设置音调的参数 </span></span><br><span class="line">                dsp-&gt;setParameterFloat(FMOD_DSP_PITCHSHIFT_PITCH,<span class="number">2.0</span>);</span><br><span class="line">                </span><br><span class="line">                system-&gt;playSound(sound, <span class="number">0</span>, <span class="keyword">false</span>, &amp;channel)<span class="comment">//这里不会真正播放,只有调用了system-&gt;update()之后才开始播放</span></span><br><span class="line">                <span class="comment">//添加到channel</span></span><br><span class="line">                channel-&gt;addDSP(<span class="number">0</span>,dsp);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MODE_DASHU:<span class="comment">//大叔 降低音频</span></span><br><span class="line">                system-&gt;createDSPByType(FMOD_DSP_TYPE_PITCHSHIFT,&amp;dsp);</span><br><span class="line">    </span><br><span class="line">                dsp-&gt;setParameterFloat(FMOD_DSP_PITCHSHIFT_PITCH,<span class="number">0.8</span>);</span><br><span class="line">                </span><br><span class="line">                system-&gt;playSound(sound, <span class="number">0</span>, <span class="keyword">false</span>, &amp;channel)</span><br><span class="line">                </span><br><span class="line">                channel-&gt;addDSP(<span class="number">0</span>,dsp);</span><br><span class="line">            </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MODE_JINGSONG:<span class="comment">//惊悚</span></span><br><span class="line">                system-&gt;createDSPByType(FMOD_DSP_TYPE_TREMOLO,&amp;dsp);</span><br><span class="line">                dsp-&gt;setParameterFloat(FMOD_DSP_TYPE_SKEW,<span class="number">0.5</span>);</span><br><span class="line">                system-&gt;playSound(sound, <span class="number">0</span>, <span class="keyword">false</span>, &amp;channel)</span><br><span class="line">                </span><br><span class="line">                channel-&gt;addDSP(<span class="number">0</span>,dsp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MODE_GAOGUAI:<span class="comment">//搞怪 频率  提高说话的速度 </span></span><br><span class="line">                system-&gt;playSound(sound, <span class="number">0</span>, <span class="keyword">false</span>, &amp;channel)</span><br><span class="line">                </span><br><span class="line">                channel-&gt;getFrequency(&amp;frequency);</span><br><span class="line">                </span><br><span class="line">                frequency = frequency * <span class="number">1.6</span></span><br><span class="line">                </span><br><span class="line">                channel-&gt;setFrequency(frequency);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MODE_KONGLING:<span class="comment">//空灵</span></span><br><span class="line">                system-&gt;createDSPByType(FMOD_DSP_TYPE_ECHO,&amp;dsp);</span><br><span class="line">                </span><br><span class="line">                dsp-&gt;setParameterFloat(FMOD_DSP_ECHO_DELAY,<span class="number">300</span>);</span><br><span class="line">                dsp-&gt;setParameterFloat(FMOD_DSP_ECHO_FEEDBACK,<span class="number">20</span>);</span><br><span class="line">                </span><br><span class="line">                system-&gt;playSound(sound, <span class="number">0</span>, <span class="keyword">false</span>, &amp;channel)</span><br><span class="line">                </span><br><span class="line">                channel-&gt;addDSP(<span class="number">0</span>,dsp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(...)&#123;</span><br><span class="line">        LOGE(<span class="string">"%s"</span>,<span class="string">"发生异常"</span>);</span><br><span class="line">        <span class="keyword">goto</span> end;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    system-&gt;update();<span class="comment">//update之后才真正播放</span></span><br><span class="line">    <span class="comment">//释放资源</span></span><br><span class="line">    <span class="comment">//单位是微秒</span></span><br><span class="line">    <span class="comment">//Common_Sleep(5* 1000 * 1000);//需要#include &lt;unistd.h&gt;</span></span><br><span class="line">    <span class="comment">//usleep(5* 1000 * 1000);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//每秒钟判断一下是否播放</span></span><br><span class="line">    <span class="keyword">while</span>(playing)&#123;</span><br><span class="line">        channel-&gt;isPlaying(&amp;playing);</span><br><span class="line">        usleep(<span class="number">1</span>* <span class="number">1000</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">goto</span> end;</span><br><span class="line">    end:</span><br><span class="line">        env-&gt;ReleaseStringUTFChars(path_jstr,path_cstr);</span><br><span class="line">        sound-&gt;release();</span><br><span class="line">        system-&gt;close();</span><br><span class="line">        system-&gt;release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="fmod初步使用">fmod初步使用</h3><ul>
<li><p>新建Android工程qq_voicer_change</p>
</li>
<li><p>进入项目根目录新建libs目录,并将fmod example工程中fmod.jar拷贝进去</p>
</li>
<li><p>进入项目根目录新建jni目录,并将fmod example工程中inc整个目录拷贝进去</p>
</li>
<li><p>拷贝fmod example工程中play_sound.cpp、common.h、common.cpp、common_platform.cpp、common_platform.h文件到jni目录</p>
</li>
</ul>]]>
    
    </summary>
    
  </entry>
  
</feed>